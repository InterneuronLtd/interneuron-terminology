// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.dmd_seed_data_xml_1_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: dmd_seed_data_xml_1 Purpose: dmd_seed_data_xml_1<br>
 * Description: dmd_seed_data_xml_1 <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class dmd_seed_data_xml_1 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(dmd_db_additionalparams != null){
				
					this.setProperty("dmd_db_additionalparams", dmd_db_additionalparams.toString());
				
			}
			
			if(dmd_db_host != null){
				
					this.setProperty("dmd_db_host", dmd_db_host.toString());
				
			}
			
			if(dmd_db_name != null){
				
					this.setProperty("dmd_db_name", dmd_db_name.toString());
				
			}
			
			if(dmd_db_password != null){
				
					this.setProperty("dmd_db_password", dmd_db_password.toString());
				
			}
			
			if(dmd_db_port != null){
				
					this.setProperty("dmd_db_port", dmd_db_port.toString());
				
			}
			
			if(dmd_db_psql_path != null){
				
					this.setProperty("dmd_db_psql_path", dmd_db_psql_path.toString());
				
			}
			
			if(dmd_db_pwd_string != null){
				
					this.setProperty("dmd_db_pwd_string", dmd_db_pwd_string.toString());
				
			}
			
			if(dmd_db_schema != null){
				
					this.setProperty("dmd_db_schema", dmd_db_schema.toString());
				
			}
			
			if(dmd_db_script_path != null){
				
					this.setProperty("dmd_db_script_path", dmd_db_script_path.toString());
				
			}
			
			if(dmd_db_user != null){
				
					this.setProperty("dmd_db_user", dmd_db_user.toString());
				
			}
			
			if(dmd_file_path != null){
				
					this.setProperty("dmd_file_path", dmd_file_path.toString());
				
			}
			
			if(dmd_db_stg_additionalparams != null){
				
					this.setProperty("dmd_db_stg_additionalparams", dmd_db_stg_additionalparams.toString());
				
			}
			
			if(dmd_db_stg_port != null){
				
					this.setProperty("dmd_db_stg_port", dmd_db_stg_port.toString());
				
			}
			
			if(dmd_db_stg_name != null){
				
					this.setProperty("dmd_db_stg_name", dmd_db_stg_name.toString());
				
			}
			
			if(dmd_db_stg_schema != null){
				
					this.setProperty("dmd_db_stg_schema", dmd_db_stg_schema.toString());
				
			}
			
			if(dmd_db_stg_user != null){
				
					this.setProperty("dmd_db_stg_user", dmd_db_stg_user.toString());
				
			}
			
			if(dmd_db_stg_password != null){
				
					this.setProperty("dmd_db_stg_password", dmd_db_stg_password.toString());
				
			}
			
			if(dmd_db_stg_host != null){
				
					this.setProperty("dmd_db_stg_host", dmd_db_stg_host.toString());
				
			}
			
		}

public String dmd_db_additionalparams;
public String getDmd_db_additionalparams(){
	return this.dmd_db_additionalparams;
}
public String dmd_db_host;
public String getDmd_db_host(){
	return this.dmd_db_host;
}
public String dmd_db_name;
public String getDmd_db_name(){
	return this.dmd_db_name;
}
public java.lang.String dmd_db_password;
public java.lang.String getDmd_db_password(){
	return this.dmd_db_password;
}
public Integer dmd_db_port;
public Integer getDmd_db_port(){
	return this.dmd_db_port;
}
public String dmd_db_psql_path;
public String getDmd_db_psql_path(){
	return this.dmd_db_psql_path;
}
public String dmd_db_pwd_string;
public String getDmd_db_pwd_string(){
	return this.dmd_db_pwd_string;
}
public String dmd_db_schema;
public String getDmd_db_schema(){
	return this.dmd_db_schema;
}
public String dmd_db_script_path;
public String getDmd_db_script_path(){
	return this.dmd_db_script_path;
}
public String dmd_db_user;
public String getDmd_db_user(){
	return this.dmd_db_user;
}
public String dmd_file_path;
public String getDmd_file_path(){
	return this.dmd_file_path;
}
public String dmd_db_stg_additionalparams;
public String getDmd_db_stg_additionalparams(){
	return this.dmd_db_stg_additionalparams;
}
public Integer dmd_db_stg_port;
public Integer getDmd_db_stg_port(){
	return this.dmd_db_stg_port;
}
public String dmd_db_stg_name;
public String getDmd_db_stg_name(){
	return this.dmd_db_stg_name;
}
public String dmd_db_stg_schema;
public String getDmd_db_stg_schema(){
	return this.dmd_db_stg_schema;
}
public String dmd_db_stg_user;
public String getDmd_db_stg_user(){
	return this.dmd_db_stg_user;
}
public java.lang.String dmd_db_stg_password;
public java.lang.String getDmd_db_stg_password(){
	return this.dmd_db_stg_password;
}
public String dmd_db_stg_host;
public String getDmd_db_stg_host(){
	return this.dmd_db_stg_host;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dmd_seed_data_xml_1";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils("_AaB8MO2bEeq5AfBKTyh16g", "0.1");
	MetterCatcherUtils talendMeter_METTER = new MetterCatcherUtils("_AaB8MO2bEeq5AfBKTyh16g", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dmd_seed_data_xml_1.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dmd_seed_data_xml_1.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
			try{
				tLogCatcher_1Process(globalMap);
			}finally{
				talendLogs_LOGSProcess(globalMap);
			}
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_1_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_1_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_1_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_13_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_13_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_13_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_11_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_11_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_11_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_4_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_4_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_4_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_10_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_10_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_10_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_9_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_9_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_9_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_5_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_5_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_5_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_8_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_8_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_8_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_7_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_7_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_7_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_6_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_6_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_6_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_3_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_3_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_3_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_2_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_2_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_2_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendStats_STATS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendStats_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendStats_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendStats_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendStats_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendMeter_METTER_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendMeter_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendMeter_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendMeter_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendMeter_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendMeter_METTER_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError5", 0, "error");
						}
					
					errorCode = null;
					tDie_5Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError6", 0, "error");
						}
					
					errorCode = null;
					tDie_6Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError7", 0, "error");
						}
					
					errorCode = null;
					tDie_7Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError9", 0, "error");
						}
					
					errorCode = null;
					tDie_9Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError11", 0, "error");
						}
					
					errorCode = null;
					tDie_11Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
						}
					
					errorCode = null;
					tDie_1Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError4", 0, "error");
						}
					
					errorCode = null;
					tDie_4Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError3", 0, "error");
						}
					
					errorCode = null;
					tDie_3Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError2", 0, "error");
						}
					
					errorCode = null;
					tDie_2Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError12", 0, "error");
						}
					
					errorCode = null;
					tDie_12Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError10", 0, "error");
						}
					
					errorCode = null;
					tDie_10Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError8", 0, "error");
						}
					
					errorCode = null;
					tDie_8Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendStats_STATS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendMeter_METTER_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class amp_drugroute_rowStruct implements routines.system.IPersistableRow<amp_drugroute_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(amp_drugroute_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public routines.system.Document amp;

				public routines.system.Document getAmp () {
					return this.amp;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
						this.amp = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.amp);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("amp="+String.valueOf(amp));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
amp_drugroute_rowStruct amp_drugroute_row = new amp_drugroute_rowStruct();
row2Struct row2 = new row2Struct();



	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = context.dmd_file_path;
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("f_amp2_3*.xml");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = false;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
    
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("amp_drugroute_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputXML_1);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tXMLMap_1_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_1_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_1_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_1_TXMLMAP_OUT__Struct Var__tXMLMap_1_TXMLMAP_OUT = new Var__tXMLMap_1_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
amp_drugroute_rowStruct amp_drugroute_row_tmp = new amp_drugroute_rowStruct();
amp_drugroute_rowStruct amp_drugroute_row_save = null;
//the aggregate variable
amp_drugroute_rowStruct amp_drugroute_row_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_1 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_1",allOutsForAggregate_tXMLMap_1);
// ###############################
class TreeNode_API_tXMLMap_1_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	Short get_Short(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Short(content);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Long get_Long(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Long(content);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Float get_Float(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Float(content);
	}
}
			TreeNode_API_tXMLMap_1_TXMLMAP_OUT treeNodeAPI_tXMLMap_1_TXMLMAP_OUT = new TreeNode_API_tXMLMap_1_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_1_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_1_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_1_TXMLMAP_OUT xml_api_tXMLMap_1_TXMLMAP_OUT = new XML_API_tXMLMap_1_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_1_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_1_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";

	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = (String)globalMap.get("tFileList_1_CURRENT_FILEPATH");
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"ISO-8859-15");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
		str_tFileInputXML_1 = null;
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
		str_tFileInputXML_1 = node_tFileInputXML_1.asXML();
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
		str_tFileInputXML_1 = node_tFileInputXML_1==null?null:node_tFileInputXML_1.asXML();
	}
								row1.amp = ParserUtils.parseTo_Document(str_tFileInputXML_1,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

	boolean rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_1_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setOriginalLoop("/ACTUAL_MEDICINAL_PRODUCTS/LICENSED_ROUTE/LIC_ROUTE");
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setIsOptional(true);
				if(row1.amp == null || row1.amp.getDocument() == null) {
					throw new RuntimeException("row1.amp can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT = row1.amp.getDocument();
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setDoc(doc_tXMLMap_1_TXMLMAP_OUT);
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_1_TXMLMAP_OUT.countNSMap(doc_tXMLMap_1_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT = nsTool_tXMLMap_1_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT = new String[2];
				String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT = new String[2];
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[0] = "row1.amp:/ACTUAL_MEDICINAL_PRODUCTS/LICENSED_ROUTE/LIC_ROUTE/APID";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[0] = "APID";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[1] = "row1.amp:/ACTUAL_MEDICINAL_PRODUCTS/LICENSED_ROUTE/LIC_ROUTE/ROUTECD";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[1] = "ROUTECD";
				
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT);
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_1_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT = docToFlat_tXMLMap_1_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_1_TXMLMAP_OUT: resultSet_tXMLMap_1_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_1_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_1_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT : oneRow_tXMLMap_1_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(entry_tXMLMap_1_TXMLMAP_OUT.getKey(),entry_tXMLMap_1_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
		// ###############################
		// # Output tables

amp_drugroute_row = null;


// # Output table : 'amp_drugroute_row'

amp_drugroute_row_tmp = new amp_drugroute_rowStruct();
amp_drugroute_row_tmp.apid = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.amp:/ACTUAL_MEDICINAL_PRODUCTS/LICENSED_ROUTE/LIC_ROUTE/APID");
amp_drugroute_row_tmp.routecd = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row1.amp:/ACTUAL_MEDICINAL_PRODUCTS/LICENSED_ROUTE/LIC_ROUTE/ROUTECD");
amp_drugroute_row_tmp.col_val_hash = null;allOutsForAggregate_tXMLMap_1.add(amp_drugroute_row_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_1_TXMLMAP_OUT++;

/**
 * [tXMLMap_1_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	
 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_1_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"amp_drugroute_row");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.dmd_db_schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dmd_amp_drugroute");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dmd_amp_drugroute");
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_1 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_1 = context.dmd_db_password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
            int rsTruncCountNumber_tDBOutput_1 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_1 = stmtTruncCount_tDBOutput_1.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\"")) {
                    if(rsTruncCount_tDBOutput_1.next()) {
                        rsTruncCountNumber_tDBOutput_1 = rsTruncCount_tDBOutput_1.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                stmtTrunc_tDBOutput_1.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_1 + "\"");
                deletedCount_tDBOutput_1 += rsTruncCountNumber_tDBOutput_1;
            }
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"apid\",\"routecd\",\"col_val_hash\") VALUES (?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tXMLMap_1_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	
		int tos_count_tXMLMap_1_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_1 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_1");
for(Object  row_out_tXMLMap_1_TXMLMAP_IN : outs_tXMLMap_1) {//TD512
 



/**
 * [tXMLMap_1_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

	amp_drugroute_row = null;
	if(row_out_tXMLMap_1_TXMLMAP_IN!=null && row_out_tXMLMap_1_TXMLMAP_IN instanceof amp_drugroute_rowStruct) {
		amp_drugroute_row = (amp_drugroute_rowStruct)row_out_tXMLMap_1_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_1_TXMLMAP_IN++;

/**
 * [tXMLMap_1_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "amp_drugroute_row"
if(amp_drugroute_row != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"amp_drugroute_row");
					}
					



            row2 = null;
        whetherReject_tDBOutput_1 = false;
                    if(amp_drugroute_row.apid == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, amp_drugroute_row.apid);
}

                    if(amp_drugroute_row.routecd == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, amp_drugroute_row.routecd);
}

                    if(amp_drugroute_row.col_val_hash == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_1.setObject(3, amp_drugroute_row.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
            if(!whetherReject_tDBOutput_1) {
                            row2 = new row2Struct();
                                row2.apid = amp_drugroute_row.apid;
                                row2.routecd = amp_drugroute_row.routecd;
                                row2.col_val_hash = amp_drugroute_row.col_val_hash;
            }
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    		if (ne_tDBOutput_1 != null) {
				    			throw(sqle_tDBOutput_1);
				    		}else{
				            	throw(e_tDBOutput_1);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    		if (ne_tDBOutput_1 != null) {
			    			throw(sqle_tDBOutput_1);
			    		}else{
			            	throw(e_tDBOutput_1);
			            }
			    	
				}
            }
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row2.apid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.apid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.routecd != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.routecd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "amp_drugroute_row"




	
	/**
	 * [tXMLMap_1_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_1_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_1_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    		if (ne_tDBOutput_1 != null) {
	    			throw(sqle_tDBOutput_1);
	    		}else{
	            	throw(e_tDBOutput_1);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"amp_drugroute_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputXML_1);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

    if (NB_FILEtFileList_1 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_1);
  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileList_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_5", false);
		start_Hash.put("tDie_5", System.currentTimeMillis());
		
	
	currentComponent="tDie_5";

	
		int tos_count_tDie_5 = 0;
		

 



/**
 * [tDie_5 begin ] stop
 */
	
	/**
	 * [tDie_5 main ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_5", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
				talendLogs_LOGS.addMessage("tDie", "tDie_5", 5, "the end is near", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_5_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_5_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_5_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_5) {
		logIgnoredError(String.format("tDie_5 - tDie failed to log message due to internal error: %s", e_tDie_5), e_tDie_5);
	}
	
	currentComponent = "tDie_5";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_5_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_5++;

/**
 * [tDie_5 main ] stop
 */
	
	/**
	 * [tDie_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

 



/**
 * [tDie_5 process_data_begin ] stop
 */
	
	/**
	 * [tDie_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

 



/**
 * [tDie_5 process_data_end ] stop
 */
	
	/**
	 * [tDie_5 end ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

 

ok_Hash.put("tDie_5", true);
end_Hash.put("tDie_5", System.currentTimeMillis());




/**
 * [tDie_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_5 finally ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

 



/**
 * [tDie_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_5_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.isid = readString(dis);
					
						this.strnth = (BigDecimal) dis.readObject();
					
					this.strnth_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnth);
					
					// String
				
						writeString(this.strnth_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class excipient_rowStruct implements routines.system.IPersistableRow<excipient_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public BigDecimal strnth;

				public BigDecimal getStrnth () {
					return this.strnth;
				}
				
			    public String strnth_uomcd;

				public String getStrnth_uomcd () {
					return this.strnth_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
					this.isid = readString(dis);
					
						this.strnth = (BigDecimal) dis.readObject();
					
					this.strnth_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnth);
					
					// String
				
						writeString(this.strnth_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",isid="+isid);
		sb.append(",strnth="+String.valueOf(strnth));
		sb.append(",strnth_uomcd="+strnth_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(excipient_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public routines.system.Document amp;

				public routines.system.Document getAmp () {
					return this.amp;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
						this.amp = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.amp);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("amp="+String.valueOf(amp));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();
excipient_rowStruct excipient_row = new excipient_rowStruct();
row35Struct row35 = new row35Struct();



	
	/**
	 * [tFileList_12 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_12 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_12", false);
		start_Hash.put("tFileList_12", System.currentTimeMillis());
		
	
	currentComponent="tFileList_12";

	
		int tos_count_tFileList_12 = 0;
		
	
 
     
    
  String directory_tFileList_12 = context.dmd_file_path;
  final java.util.List<String> maskList_tFileList_12 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_12 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_12.add("f_amp2_3*.xml");  
  for (final String filemask_tFileList_12 : maskList_tFileList_12) {
	String filemask_compile_tFileList_12 = filemask_tFileList_12;
	
		filemask_compile_tFileList_12 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_12.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_12 = java.util.regex.Pattern.compile(filemask_compile_tFileList_12, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_12.add(fileNamePattern_tFileList_12);
  }
  int NB_FILEtFileList_12 = 0;

  final boolean case_sensitive_tFileList_12 = false;
    final java.util.List<java.io.File> list_tFileList_12 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_12 = new java.util.HashSet<String>();
	java.io.File file_tFileList_12 = new java.io.File(directory_tFileList_12);
    
		file_tFileList_12.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_12 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_12 : patternList_tFileList_12) {
          	if (fileNamePattern_tFileList_12.matcher(fileName_tFileList_12).matches()){
					if(!filePath_tFileList_12.contains(file.getAbsolutePath())) {
			          list_tFileList_12.add(file);
			          filePath_tFileList_12.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_12);
    
    for (int i_tFileList_12 = 0; i_tFileList_12 < list_tFileList_12.size(); i_tFileList_12++){
      java.io.File files_tFileList_12 = list_tFileList_12.get(i_tFileList_12);
      String fileName_tFileList_12 = files_tFileList_12.getName();
      
      String currentFileName_tFileList_12 = files_tFileList_12.getName(); 
      String currentFilePath_tFileList_12 = files_tFileList_12.getAbsolutePath();
      String currentFileDirectory_tFileList_12 = files_tFileList_12.getParent();
      String currentFileExtension_tFileList_12 = null;
      
      if (files_tFileList_12.getName().contains(".") && files_tFileList_12.isFile()){
        currentFileExtension_tFileList_12 = files_tFileList_12.getName().substring(files_tFileList_12.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_12 = "";
      }
      
      NB_FILEtFileList_12 ++;
      globalMap.put("tFileList_12_CURRENT_FILE", currentFileName_tFileList_12);
      globalMap.put("tFileList_12_CURRENT_FILEPATH", currentFilePath_tFileList_12);
      globalMap.put("tFileList_12_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_12);
      globalMap.put("tFileList_12_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_12);
      globalMap.put("tFileList_12_NB_FILE", NB_FILEtFileList_12);
      
 



/**
 * [tFileList_12 begin ] stop
 */
	
	/**
	 * [tFileList_12 main ] start
	 */

	

	
	
	currentComponent="tFileList_12";

	

 


	tos_count_tFileList_12++;

/**
 * [tFileList_12 main ] stop
 */
	
	/**
	 * [tFileList_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_12";

	

 



/**
 * [tFileList_12 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_12++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row34", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("excipient_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row35", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate12", 1, "exec" + NB_ITERATE_tFileInputXML_12);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tXMLMap_13_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_13_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_13_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_13";
	
	currentComponent="tXMLMap_13_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tXMLMap_13_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_13_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_13_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_13_TXMLMAP_OUT__Struct Var__tXMLMap_13_TXMLMAP_OUT = new Var__tXMLMap_13_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
excipient_rowStruct excipient_row_tmp = new excipient_rowStruct();
excipient_rowStruct excipient_row_save = null;
//the aggregate variable
excipient_rowStruct excipient_row_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_13 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_13",allOutsForAggregate_tXMLMap_13);
// ###############################
class TreeNode_API_tXMLMap_13_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	BigDecimal get_BigDecimal(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_BigDecimal(content);
	}
}
			TreeNode_API_tXMLMap_13_TXMLMAP_OUT treeNodeAPI_tXMLMap_13_TXMLMAP_OUT = new TreeNode_API_tXMLMap_13_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_13_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_13_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_13_TXMLMAP_OUT xml_api_tXMLMap_13_TXMLMAP_OUT = new XML_API_tXMLMap_13_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_13_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_13_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_12", false);
		start_Hash.put("tFileInputXML_12", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_12";

	
		int tos_count_tFileInputXML_12 = 0;
		

	

int nb_line_tFileInputXML_12 = 0;

	String os_tFileInputXML_12 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_12=false;
	if(os_tFileInputXML_12.indexOf("windows") > -1 || os_tFileInputXML_12.indexOf("nt") > -1){
		isWindows_tFileInputXML_12=true;
	}
class NameSpaceTool_tFileInputXML_12 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_12{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_12 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_12 = null;
try {
	filename_tFileInputXML_12 = (String)globalMap.get("tFileList_12_CURRENT_FILEPATH");
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_12 != null && filename_tFileInputXML_12 instanceof String && filename_tFileInputXML_12.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_12){
		filename_tFileInputXML_12 = filename_tFileInputXML_12.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_12 = true;
org.dom4j.Document doc_tFileInputXML_12 = null;
java.io.Closeable toClose_tFileInputXML_12 = null;
try{
	if(filename_tFileInputXML_12 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_12 = (java.io.InputStream)filename_tFileInputXML_12;
		toClose_tFileInputXML_12 = inputStream_tFileInputXML_12;
		doc_tFileInputXML_12 = reader_tFileInputXML_12.read(inputStream_tFileInputXML_12);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_12 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_12)),"ISO-8859-15");
		toClose_tFileInputXML_12 = unicodeReader_tFileInputXML_12;
		org.xml.sax.InputSource in_tFileInputXML_12= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_12);
		doc_tFileInputXML_12 = reader_tFileInputXML_12.read(in_tFileInputXML_12);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_12 = false;
} finally {
	if(toClose_tFileInputXML_12!=null) {
		toClose_tFileInputXML_12.close();
	}
}
if(isValidFile_tFileInputXML_12){
NameSpaceTool_tFileInputXML_12 nsTool_tFileInputXML_12 = new NameSpaceTool_tFileInputXML_12();
nsTool_tFileInputXML_12.countNSMap(doc_tFileInputXML_12.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_12 = nsTool_tFileInputXML_12.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_12 = doc_tFileInputXML_12.createXPath(nsTool_tFileInputXML_12.addDefaultNSPrefix("/"));  
x_tFileInputXML_12.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_12); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_12 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_12.selectNodes(doc_tFileInputXML_12);	
XML_API_tFileInputXML_12 xml_api_tFileInputXML_12 = new XML_API_tFileInputXML_12();
String str_tFileInputXML_12 = "";
org.dom4j.Node node_tFileInputXML_12 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_12=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_12{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_12 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_12 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_12 xPathUtil_tFileInputXML_12 = new XPathUtil_tFileInputXML_12();
	xPathUtil_tFileInputXML_12.initXPaths(xpaths_tFileInputXML_12, nsTool_tFileInputXML_12, xmlNameSpaceMap_tFileInputXML_12);
for (org.dom4j.Node temp_tFileInputXML_12: nodeList_tFileInputXML_12) {
		nb_line_tFileInputXML_12++;
		
	row34 = null;			
	boolean whetherReject_tFileInputXML_12 = false;
	row34 = new row34Struct();
	try{
    Object obj0_tFileInputXML_12 = xpaths_tFileInputXML_12.get(0).evaluate(temp_tFileInputXML_12);
    if(obj0_tFileInputXML_12 == null) {
    	node_tFileInputXML_12 = null;
		str_tFileInputXML_12 = null;
    	
    } else if(obj0_tFileInputXML_12 instanceof org.dom4j.Node) {
    	node_tFileInputXML_12 = (org.dom4j.Node)obj0_tFileInputXML_12;
		str_tFileInputXML_12 = node_tFileInputXML_12.asXML();
    } else if(obj0_tFileInputXML_12 instanceof String || obj0_tFileInputXML_12 instanceof Number){
    	node_tFileInputXML_12 = temp_tFileInputXML_12;
    	str_tFileInputXML_12 = String.valueOf(obj0_tFileInputXML_12);
    } else if(obj0_tFileInputXML_12 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_12 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_12;
    	node_tFileInputXML_12 = nodes_tFileInputXML_12.size()>0 ? nodes_tFileInputXML_12.get(0) : null;
		str_tFileInputXML_12 = node_tFileInputXML_12==null?null:node_tFileInputXML_12.asXML();
	}
								row34.amp = ParserUtils.parseTo_Document(str_tFileInputXML_12,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_12 = true;
                System.err.println(e.getMessage());
                row34 = null;
    }
			
			

 



/**
 * [tFileInputXML_12 begin ] stop
 */
	
	/**
	 * [tFileInputXML_12 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_12";

	

 


	tos_count_tFileInputXML_12++;

/**
 * [tFileInputXML_12 main ] stop
 */
	
	/**
	 * [tFileInputXML_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_12";

	

 



/**
 * [tFileInputXML_12 process_data_begin ] stop
 */
// Start of branch "row34"
if(row34 != null) { 



	
	/**
	 * [tXMLMap_13_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_13";
	
	currentComponent="tXMLMap_13_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					

	boolean rejectedInnerJoin_tXMLMap_13_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_13_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_13_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_13_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_13_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_13_TXMLMAP_OUT.setOriginalLoop("/ACTUAL_MEDICINAL_PRODUCTS/AP_INGREDIENT/AP_ING");
				docToFlat_tXMLMap_13_TXMLMAP_OUT.setIsOptional(true);
				if(row34.amp == null || row34.amp.getDocument() == null) {
					throw new RuntimeException("row34.amp can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_13_TXMLMAP_OUT = row34.amp.getDocument();
				docToFlat_tXMLMap_13_TXMLMAP_OUT.setDoc(doc_tXMLMap_13_TXMLMAP_OUT);
				docToFlat_tXMLMap_13_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_13_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_13_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_13_TXMLMAP_OUT.countNSMap(doc_tXMLMap_13_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_13_TXMLMAP_OUT = nsTool_tXMLMap_13_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_13_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_13_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_13_TXMLMAP_OUT = new String[4];
				String[] relativePathMappings_tXMLMap_13_TXMLMAP_OUT = new String[4];
				
				absolutePathMappings_tXMLMap_13_TXMLMAP_OUT[0] = "row34.amp:/ACTUAL_MEDICINAL_PRODUCTS/AP_INGREDIENT/AP_ING/ISID";
				relativePathMappings_tXMLMap_13_TXMLMAP_OUT[0] = "ISID";
				
				absolutePathMappings_tXMLMap_13_TXMLMAP_OUT[1] = "row34.amp:/ACTUAL_MEDICINAL_PRODUCTS/AP_INGREDIENT/AP_ING/APID";
				relativePathMappings_tXMLMap_13_TXMLMAP_OUT[1] = "APID";
				
				absolutePathMappings_tXMLMap_13_TXMLMAP_OUT[2] = "row34.amp:/ACTUAL_MEDICINAL_PRODUCTS/AP_INGREDIENT/AP_ING/STRNTH";
				relativePathMappings_tXMLMap_13_TXMLMAP_OUT[2] = "STRNTH";
				
				absolutePathMappings_tXMLMap_13_TXMLMAP_OUT[3] = "row34.amp:/ACTUAL_MEDICINAL_PRODUCTS/AP_INGREDIENT/AP_ING/UOMCD";
				relativePathMappings_tXMLMap_13_TXMLMAP_OUT[3] = "UOMCD";
				
				docToFlat_tXMLMap_13_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_13_TXMLMAP_OUT);
				docToFlat_tXMLMap_13_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_13_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_13_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_13_TXMLMAP_OUT = docToFlat_tXMLMap_13_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_13_TXMLMAP_OUT: resultSet_tXMLMap_13_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_13_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_13_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_13_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_13_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_13_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_13_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_13_TXMLMAP_OUT : oneRow_tXMLMap_13_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_13_TXMLMAP_OUT.put(entry_tXMLMap_13_TXMLMAP_OUT.getKey(),entry_tXMLMap_13_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_13_TXMLMAP_OUT__Struct Var = Var__tXMLMap_13_TXMLMAP_OUT;
		// ###############################
		// # Output tables

excipient_row = null;


// # Output table : 'excipient_row'

excipient_row_tmp = new excipient_rowStruct();
excipient_row_tmp.apid =   treeNodeAPI_tXMLMap_13_TXMLMAP_OUT.get_String("row34.amp:/ACTUAL_MEDICINAL_PRODUCTS/AP_INGREDIENT/AP_ING/APID");
excipient_row_tmp.isid =   treeNodeAPI_tXMLMap_13_TXMLMAP_OUT.get_String("row34.amp:/ACTUAL_MEDICINAL_PRODUCTS/AP_INGREDIENT/AP_ING/ISID");
excipient_row_tmp.strnth =   treeNodeAPI_tXMLMap_13_TXMLMAP_OUT.get_BigDecimal("row34.amp:/ACTUAL_MEDICINAL_PRODUCTS/AP_INGREDIENT/AP_ING/STRNTH");
excipient_row_tmp.strnth_uomcd =   treeNodeAPI_tXMLMap_13_TXMLMAP_OUT.get_String("row34.amp:/ACTUAL_MEDICINAL_PRODUCTS/AP_INGREDIENT/AP_ING/UOMCD");
excipient_row_tmp.col_val_hash = null;allOutsForAggregate_tXMLMap_13.add(excipient_row_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_13_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_13_TXMLMAP_OUT++;

/**
 * [tXMLMap_13_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_13_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_13";
	
	currentComponent="tXMLMap_13_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_13_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_13_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_13";
	
	currentComponent="tXMLMap_13_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_13_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row34"




	
	/**
	 * [tFileInputXML_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_12";

	

 



/**
 * [tFileInputXML_12 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_12 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_12";

	


}
	}
	globalMap.put("tFileInputXML_12_NB_LINE",nb_line_tFileInputXML_12);

	
 

ok_Hash.put("tFileInputXML_12", true);
end_Hash.put("tFileInputXML_12", System.currentTimeMillis());




/**
 * [tFileInputXML_12 end ] stop
 */

	
	/**
	 * [tXMLMap_13_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_13";
	
	currentComponent="tXMLMap_13_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tXMLMap_13_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_13_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_13_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tLogRow_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_23", false);
		start_Hash.put("tLogRow_23", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tLogRow_23 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_23 = "|";
		java.io.PrintStream consoleOut_tLogRow_23 = null;	

 		StringBuilder strBuffer_tLogRow_23 = null;
		int nb_line_tLogRow_23 = 0;
///////////////////////    			



 



/**
 * [tLogRow_23 begin ] stop
 */



	
	/**
	 * [tDBOutput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_23", false);
		start_Hash.put("tDBOutput_23", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"excipient_row");
					}
				
		int tos_count_tDBOutput_23 = 0;
		





String dbschema_tDBOutput_23 = null;
	dbschema_tDBOutput_23 = context.dmd_db_schema;
	

String tableName_tDBOutput_23 = null;
if(dbschema_tDBOutput_23 == null || dbschema_tDBOutput_23.trim().length() == 0) {
	tableName_tDBOutput_23 = ("dmd_amp_excipient");
} else {
	tableName_tDBOutput_23 = dbschema_tDBOutput_23 + "\".\"" + ("dmd_amp_excipient");
}

int nb_line_tDBOutput_23 = 0;
int nb_line_update_tDBOutput_23 = 0;
int nb_line_inserted_tDBOutput_23 = 0;
int nb_line_deleted_tDBOutput_23 = 0;
int nb_line_rejected_tDBOutput_23 = 0;

int deletedCount_tDBOutput_23=0;
int updatedCount_tDBOutput_23=0;
int insertedCount_tDBOutput_23=0;
int rejectedCount_tDBOutput_23=0;

boolean whetherReject_tDBOutput_23 = false;

java.sql.Connection conn_tDBOutput_23 = null;
String dbUser_tDBOutput_23 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_23 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_23 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_23 = context.dmd_db_password; 

    String dbPwd_tDBOutput_23 = decryptedPassword_tDBOutput_23;

    conn_tDBOutput_23 = java.sql.DriverManager.getConnection(url_tDBOutput_23,dbUser_tDBOutput_23,dbPwd_tDBOutput_23);
	
	resourceMap.put("conn_tDBOutput_23", conn_tDBOutput_23);
        conn_tDBOutput_23.setAutoCommit(false);
        int commitEvery_tDBOutput_23 = 10000;
        int commitCounter_tDBOutput_23 = 0;


   int batchSize_tDBOutput_23 = 10000;
   int batchSizeCounter_tDBOutput_23=0;

int count_tDBOutput_23=0;
            int rsTruncCountNumber_tDBOutput_23 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_23 = conn_tDBOutput_23.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_23 = stmtTruncCount_tDBOutput_23.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_23 + "\"")) {
                    if(rsTruncCount_tDBOutput_23.next()) {
                        rsTruncCountNumber_tDBOutput_23 = rsTruncCount_tDBOutput_23.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_23 = conn_tDBOutput_23.createStatement()) {
                stmtTrunc_tDBOutput_23.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_23 + "\"");
                deletedCount_tDBOutput_23 += rsTruncCountNumber_tDBOutput_23;
            }
	    String insert_tDBOutput_23 = "INSERT INTO \"" + tableName_tDBOutput_23 + "\" (\"apid\",\"isid\",\"strnth\",\"strnth_uomcd\",\"col_val_hash\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_23 = conn_tDBOutput_23.prepareStatement(insert_tDBOutput_23);
	    resourceMap.put("pstmt_tDBOutput_23", pstmt_tDBOutput_23);
	    

 



/**
 * [tDBOutput_23 begin ] stop
 */



	
	/**
	 * [tXMLMap_13_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_13_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_13_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_13";
	
	currentComponent="tXMLMap_13_TXMLMAP_IN";

	
		int tos_count_tXMLMap_13_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_13 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_13");
for(Object  row_out_tXMLMap_13_TXMLMAP_IN : outs_tXMLMap_13) {//TD512
 



/**
 * [tXMLMap_13_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_13_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_13";
	
	currentComponent="tXMLMap_13_TXMLMAP_IN";

	

	excipient_row = null;
	if(row_out_tXMLMap_13_TXMLMAP_IN!=null && row_out_tXMLMap_13_TXMLMAP_IN instanceof excipient_rowStruct) {
		excipient_row = (excipient_rowStruct)row_out_tXMLMap_13_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_13_TXMLMAP_IN++;

/**
 * [tXMLMap_13_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_13_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_13";
	
	currentComponent="tXMLMap_13_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_13_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "excipient_row"
if(excipient_row != null) { 



	
	/**
	 * [tDBOutput_23 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"excipient_row");
					}
					



            row35 = null;
        whetherReject_tDBOutput_23 = false;
                    if(excipient_row.apid == null) {
pstmt_tDBOutput_23.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_23.setString(1, excipient_row.apid);
}

                    if(excipient_row.isid == null) {
pstmt_tDBOutput_23.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_23.setString(2, excipient_row.isid);
}

                    pstmt_tDBOutput_23.setBigDecimal(3, excipient_row.strnth);

                    if(excipient_row.strnth_uomcd == null) {
pstmt_tDBOutput_23.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_23.setString(4, excipient_row.strnth_uomcd);
}

                    if(excipient_row.col_val_hash == null) {
pstmt_tDBOutput_23.setNull(5, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_23.setObject(5, excipient_row.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_23.addBatch();
    		nb_line_tDBOutput_23++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_23++;
    		  
            if(!whetherReject_tDBOutput_23) {
                            row35 = new row35Struct();
                                row35.apid = excipient_row.apid;
                                row35.isid = excipient_row.isid;
                                row35.strnth = excipient_row.strnth;
                                row35.strnth_uomcd = excipient_row.strnth_uomcd;
                                row35.col_val_hash = excipient_row.col_val_hash;
            }
    			if ((batchSize_tDBOutput_23 > 0) && (batchSize_tDBOutput_23 <= batchSizeCounter_tDBOutput_23)) {
                try {
						int countSum_tDBOutput_23 = 0;
						    
						for(int countEach_tDBOutput_23: pstmt_tDBOutput_23.executeBatch()) {
							countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
						}
				    	
				    		insertedCount_tDBOutput_23 += countSum_tDBOutput_23;
				    	
            	    	batchSizeCounter_tDBOutput_23 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_23){
				    	java.sql.SQLException ne_tDBOutput_23 = e_tDBOutput_23.getNextException(),sqle_tDBOutput_23=null;
				    	String errormessage_tDBOutput_23;
						if (ne_tDBOutput_23 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_23 = new java.sql.SQLException(e_tDBOutput_23.getMessage() + "\ncaused by: " + ne_tDBOutput_23.getMessage(), ne_tDBOutput_23.getSQLState(), ne_tDBOutput_23.getErrorCode(), ne_tDBOutput_23);
							errormessage_tDBOutput_23 = sqle_tDBOutput_23.getMessage();
						}else{
							errormessage_tDBOutput_23 = e_tDBOutput_23.getMessage();
						}
				    	
				    		if (ne_tDBOutput_23 != null) {
				    			throw(sqle_tDBOutput_23);
				    		}else{
				            	throw(e_tDBOutput_23);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_23++;
                if(commitEvery_tDBOutput_23 <= commitCounter_tDBOutput_23) {
                if ((batchSize_tDBOutput_23 > 0) && (batchSizeCounter_tDBOutput_23 > 0)) {
                try {
                		int countSum_tDBOutput_23 = 0;
                		    
						for(int countEach_tDBOutput_23: pstmt_tDBOutput_23.executeBatch()) {
							countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
						}
            	    	
            	    		insertedCount_tDBOutput_23 += countSum_tDBOutput_23;
            	    	
                batchSizeCounter_tDBOutput_23 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_23){
			    	java.sql.SQLException ne_tDBOutput_23 = e_tDBOutput_23.getNextException(),sqle_tDBOutput_23=null;
			    	String errormessage_tDBOutput_23;
					if (ne_tDBOutput_23 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_23 = new java.sql.SQLException(e_tDBOutput_23.getMessage() + "\ncaused by: " + ne_tDBOutput_23.getMessage(), ne_tDBOutput_23.getSQLState(), ne_tDBOutput_23.getErrorCode(), ne_tDBOutput_23);
						errormessage_tDBOutput_23 = sqle_tDBOutput_23.getMessage();
					}else{
						errormessage_tDBOutput_23 = e_tDBOutput_23.getMessage();
					}
			    	
			    		if (ne_tDBOutput_23 != null) {
			    			throw(sqle_tDBOutput_23);
			    		}else{
			            	throw(e_tDBOutput_23);
			            }
			    	
				}
            }
                	conn_tDBOutput_23.commit();
                	
                	commitCounter_tDBOutput_23=0;
                }

 


	tos_count_tDBOutput_23++;

/**
 * [tDBOutput_23 main ] stop
 */
	
	/**
	 * [tDBOutput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	

 



/**
 * [tDBOutput_23 process_data_begin ] stop
 */
// Start of branch "row35"
if(row35 != null) { 



	
	/**
	 * [tLogRow_23 main ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row35");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_23 = new StringBuilder();




   				
	    		if(row35.apid != null) { //              
                    							
       
				strBuffer_tLogRow_23.append(
				                String.valueOf(row35.apid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_23.append("|");
    			


   				
	    		if(row35.isid != null) { //              
                    							
       
				strBuffer_tLogRow_23.append(
				                String.valueOf(row35.isid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_23.append("|");
    			


   				
	    		if(row35.strnth != null) { //              
                    							
       
				strBuffer_tLogRow_23.append(
								row35.strnth.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_23.append("|");
    			


   				
	    		if(row35.strnth_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_23.append(
				                String.valueOf(row35.strnth_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_23.append("|");
    			


   				
	    		if(row35.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_23.append(
				                String.valueOf(row35.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_23 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_23 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_23);
                    }
                    consoleOut_tLogRow_23.println(strBuffer_tLogRow_23.toString());
                    consoleOut_tLogRow_23.flush();
                    nb_line_tLogRow_23++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_23++;

/**
 * [tLogRow_23 main ] stop
 */
	
	/**
	 * [tLogRow_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	

 



/**
 * [tLogRow_23 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	

 



/**
 * [tLogRow_23 process_data_end ] stop
 */

} // End of branch "row35"




	
	/**
	 * [tDBOutput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	

 



/**
 * [tDBOutput_23 process_data_end ] stop
 */

} // End of branch "excipient_row"




	
	/**
	 * [tXMLMap_13_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_13";
	
	currentComponent="tXMLMap_13_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_13_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_13_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_13";
	
	currentComponent="tXMLMap_13_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_13_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_13_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_13_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tDBOutput_23 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	



	    try {
				int countSum_tDBOutput_23 = 0;
				if (pstmt_tDBOutput_23 != null && batchSizeCounter_tDBOutput_23 > 0) {
						
					for(int countEach_tDBOutput_23: pstmt_tDBOutput_23.executeBatch()) {
						countSum_tDBOutput_23 += (countEach_tDBOutput_23 < 0 ? 0 : countEach_tDBOutput_23);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_23 += countSum_tDBOutput_23;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_23){
	    	java.sql.SQLException ne_tDBOutput_23 = e_tDBOutput_23.getNextException(),sqle_tDBOutput_23=null;
	    	String errormessage_tDBOutput_23;
			if (ne_tDBOutput_23 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_23 = new java.sql.SQLException(e_tDBOutput_23.getMessage() + "\ncaused by: " + ne_tDBOutput_23.getMessage(), ne_tDBOutput_23.getSQLState(), ne_tDBOutput_23.getErrorCode(), ne_tDBOutput_23);
				errormessage_tDBOutput_23 = sqle_tDBOutput_23.getMessage();
			}else{
				errormessage_tDBOutput_23 = e_tDBOutput_23.getMessage();
			}
	    	
	    		if (ne_tDBOutput_23 != null) {
	    			throw(sqle_tDBOutput_23);
	    		}else{
	            	throw(e_tDBOutput_23);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_23 != null) {
        		
            pstmt_tDBOutput_23.close();
            resourceMap.remove("pstmt_tDBOutput_23");
        }
    resourceMap.put("statementClosed_tDBOutput_23", true);
			
			conn_tDBOutput_23.commit();
			
		
    	conn_tDBOutput_23 .close();
    	
    	resourceMap.put("finish_tDBOutput_23", true);
    	

	nb_line_deleted_tDBOutput_23=nb_line_deleted_tDBOutput_23+ deletedCount_tDBOutput_23;
	nb_line_update_tDBOutput_23=nb_line_update_tDBOutput_23 + updatedCount_tDBOutput_23;
	nb_line_inserted_tDBOutput_23=nb_line_inserted_tDBOutput_23 + insertedCount_tDBOutput_23;
	nb_line_rejected_tDBOutput_23=nb_line_rejected_tDBOutput_23 + rejectedCount_tDBOutput_23;
	
        globalMap.put("tDBOutput_23_NB_LINE",nb_line_tDBOutput_23);
        globalMap.put("tDBOutput_23_NB_LINE_UPDATED",nb_line_update_tDBOutput_23);
        globalMap.put("tDBOutput_23_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_23);
        globalMap.put("tDBOutput_23_NB_LINE_DELETED",nb_line_deleted_tDBOutput_23);
        globalMap.put("tDBOutput_23_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_23);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"excipient_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_23", true);
end_Hash.put("tDBOutput_23", System.currentTimeMillis());




/**
 * [tDBOutput_23 end ] stop
 */

	
	/**
	 * [tLogRow_23 end ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	


//////
//////
globalMap.put("tLogRow_23_NB_LINE",nb_line_tLogRow_23);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tLogRow_23", true);
end_Hash.put("tLogRow_23", System.currentTimeMillis());




/**
 * [tLogRow_23 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate12", 2, "exec" + NB_ITERATE_tFileInputXML_12);
						}				
					




	
	/**
	 * [tFileList_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_12";

	

 



/**
 * [tFileList_12 process_data_end ] stop
 */
	
	/**
	 * [tFileList_12 end ] start
	 */

	

	
	
	currentComponent="tFileList_12";

	

  
    }
  globalMap.put("tFileList_12_NB_FILE", NB_FILEtFileList_12);
  

    if (NB_FILEtFileList_12 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_12);
  
 

 

ok_Hash.put("tFileList_12", true);
end_Hash.put("tFileList_12", System.currentTimeMillis());




/**
 * [tFileList_12 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileList_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_12 finally ] start
	 */

	

	
	
	currentComponent="tFileList_12";

	

 



/**
 * [tFileList_12 finally ] stop
 */

	
	/**
	 * [tFileInputXML_12 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_12";

	

 



/**
 * [tFileInputXML_12 finally ] stop
 */

	
	/**
	 * [tXMLMap_13_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_13";
	
	currentComponent="tXMLMap_13_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_13_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_13_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_13";
	
	currentComponent="tXMLMap_13_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_13_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tDBOutput_23 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_23";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_23") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_23 = null;
                if ((pstmtToClose_tDBOutput_23 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_23")) != null) {
                    pstmtToClose_tDBOutput_23.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_23") == null){
            java.sql.Connection ctn_tDBOutput_23 = null;
            if((ctn_tDBOutput_23 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_23")) != null){
                try {
                    ctn_tDBOutput_23.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_23) {
                    String errorMessage_tDBOutput_23 = "failed to close the connection in tDBOutput_23 :" + sqlEx_tDBOutput_23.getMessage();
                    System.err.println(errorMessage_tDBOutput_23);
                }
            }
        }
    }
 



/**
 * [tDBOutput_23 finally ] stop
 */

	
	/**
	 * [tLogRow_23 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	

 



/**
 * [tLogRow_23 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_12_SUBPROCESS_STATE", 1);
	}
	

public void tDie_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_6", false);
		start_Hash.put("tDie_6", System.currentTimeMillis());
		
	
	currentComponent="tDie_6";

	
		int tos_count_tDie_6 = 0;
		

 



/**
 * [tDie_6 begin ] stop
 */
	
	/**
	 * [tDie_6 main ] start
	 */

	

	
	
	currentComponent="tDie_6";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_6", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
				talendLogs_LOGS.addMessage("tDie", "tDie_6", 5, "the end is near", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_6_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_6_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_6_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_6) {
		logIgnoredError(String.format("tDie_6 - tDie failed to log message due to internal error: %s", e_tDie_6), e_tDie_6);
	}
	
	currentComponent = "tDie_6";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_6_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_6++;

/**
 * [tDie_6 main ] stop
 */
	
	/**
	 * [tDie_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_6";

	

 



/**
 * [tDie_6 process_data_begin ] stop
 */
	
	/**
	 * [tDie_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_6";

	

 



/**
 * [tDie_6 process_data_end ] stop
 */
	
	/**
	 * [tDie_6 end ] start
	 */

	

	
	
	currentComponent="tDie_6";

	

 

ok_Hash.put("tDie_6", true);
end_Hash.put("tDie_6", System.currentTimeMillis());




/**
 * [tDie_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_6 finally ] start
	 */

	

	
	
	currentComponent="tDie_6";

	

 



/**
 * [tDie_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_6_SUBPROCESS_STATE", 1);
	}
	


public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.vpid = readString(dis);
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.desc = readString(dis);
					
					this.nmdt = readDate(dis);
					
					this.nm_prev = readString(dis);
					
					this.suppcd = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
					this.lic_authchangedt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis);
					
						this.parallel_import = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.desc,dos);
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nm_prev,dos);
					
					// String
				
						writeString(this.suppcd,dos);
					
					// Long
				
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
					// Long
				
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
					// Long
				
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
					// java.util.Date
				
						writeDate(this.lic_authchangedt,dos);
					
					// Long
				
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
					// Long
				
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					// Integer
				
						writeInteger(this.ema,dos);
					
					// Integer
				
						writeInteger(this.parallel_import,dos);
					
					// Long
				
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class amp_rowStruct implements routines.system.IPersistableRow<amp_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String apid;

				public String getApid () {
					return this.apid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nm_prev;

				public String getNm_prev () {
					return this.nm_prev;
				}
				
			    public String suppcd;

				public String getSuppcd () {
					return this.suppcd;
				}
				
			    public Long lic_authcd;

				public Long getLic_authcd () {
					return this.lic_authcd;
				}
				
			    public Long lic_auth_prevcd;

				public Long getLic_auth_prevcd () {
					return this.lic_auth_prevcd;
				}
				
			    public Long lic_authchangecd;

				public Long getLic_authchangecd () {
					return this.lic_authchangecd;
				}
				
			    public java.util.Date lic_authchangedt;

				public java.util.Date getLic_authchangedt () {
					return this.lic_authchangedt;
				}
				
			    public Long combprodcd;

				public Long getCombprodcd () {
					return this.combprodcd;
				}
				
			    public Long flavourcd;

				public Long getFlavourcd () {
					return this.flavourcd;
				}
				
			    public Integer ema;

				public Integer getEma () {
					return this.ema;
				}
				
			    public Integer parallel_import;

				public Integer getParallel_import () {
					return this.parallel_import;
				}
				
			    public Long avail_restrictcd;

				public Long getAvail_restrictcd () {
					return this.avail_restrictcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.apid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.vpid = readString(dis);
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.desc = readString(dis);
					
					this.nmdt = readDate(dis);
					
					this.nm_prev = readString(dis);
					
					this.suppcd = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authcd = null;
           				} else {
           			    	this.lic_authcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_auth_prevcd = null;
           				} else {
           			    	this.lic_auth_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.lic_authchangecd = null;
           				} else {
           			    	this.lic_authchangecd = dis.readLong();
           				}
					
					this.lic_authchangedt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.combprodcd = null;
           				} else {
           			    	this.combprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flavourcd = null;
           				} else {
           			    	this.flavourcd = dis.readLong();
           				}
					
						this.ema = readInteger(dis);
					
						this.parallel_import = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avail_restrictcd = null;
           				} else {
           			    	this.avail_restrictcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.apid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.desc,dos);
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nm_prev,dos);
					
					// String
				
						writeString(this.suppcd,dos);
					
					// Long
				
						if(this.lic_authcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authcd);
		            	}
					
					// Long
				
						if(this.lic_auth_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_auth_prevcd);
		            	}
					
					// Long
				
						if(this.lic_authchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.lic_authchangecd);
		            	}
					
					// java.util.Date
				
						writeDate(this.lic_authchangedt,dos);
					
					// Long
				
						if(this.combprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.combprodcd);
		            	}
					
					// Long
				
						if(this.flavourcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flavourcd);
		            	}
					
					// Integer
				
						writeInteger(this.ema,dos);
					
					// Integer
				
						writeInteger(this.parallel_import,dos);
					
					// Long
				
						if(this.avail_restrictcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.avail_restrictcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("apid="+apid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",vpid="+vpid);
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",desc="+desc);
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nm_prev="+nm_prev);
		sb.append(",suppcd="+suppcd);
		sb.append(",lic_authcd="+String.valueOf(lic_authcd));
		sb.append(",lic_auth_prevcd="+String.valueOf(lic_auth_prevcd));
		sb.append(",lic_authchangecd="+String.valueOf(lic_authchangecd));
		sb.append(",lic_authchangedt="+String.valueOf(lic_authchangedt));
		sb.append(",combprodcd="+String.valueOf(combprodcd));
		sb.append(",flavourcd="+String.valueOf(flavourcd));
		sb.append(",ema="+String.valueOf(ema));
		sb.append(",parallel_import="+String.valueOf(parallel_import));
		sb.append(",avail_restrictcd="+String.valueOf(avail_restrictcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(amp_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public routines.system.Document amp;

				public routines.system.Document getAmp () {
					return this.amp;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
						this.amp = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.amp);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("amp="+String.valueOf(amp));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();
amp_rowStruct amp_row = new amp_rowStruct();
row33Struct row33 = new row33Struct();



	
	/**
	 * [tFileList_11 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_11 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_11", false);
		start_Hash.put("tFileList_11", System.currentTimeMillis());
		
	
	currentComponent="tFileList_11";

	
		int tos_count_tFileList_11 = 0;
		
	
 
     
    
  String directory_tFileList_11 = context.dmd_file_path;
  final java.util.List<String> maskList_tFileList_11 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_11 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_11.add("f_amp2_3*.xml");  
  for (final String filemask_tFileList_11 : maskList_tFileList_11) {
	String filemask_compile_tFileList_11 = filemask_tFileList_11;
	
		filemask_compile_tFileList_11 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_11.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_11 = java.util.regex.Pattern.compile(filemask_compile_tFileList_11, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_11.add(fileNamePattern_tFileList_11);
  }
  int NB_FILEtFileList_11 = 0;

  final boolean case_sensitive_tFileList_11 = false;
    final java.util.List<java.io.File> list_tFileList_11 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_11 = new java.util.HashSet<String>();
	java.io.File file_tFileList_11 = new java.io.File(directory_tFileList_11);
    
		file_tFileList_11.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_11 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_11 : patternList_tFileList_11) {
          	if (fileNamePattern_tFileList_11.matcher(fileName_tFileList_11).matches()){
					if(!filePath_tFileList_11.contains(file.getAbsolutePath())) {
			          list_tFileList_11.add(file);
			          filePath_tFileList_11.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_11);
    
    for (int i_tFileList_11 = 0; i_tFileList_11 < list_tFileList_11.size(); i_tFileList_11++){
      java.io.File files_tFileList_11 = list_tFileList_11.get(i_tFileList_11);
      String fileName_tFileList_11 = files_tFileList_11.getName();
      
      String currentFileName_tFileList_11 = files_tFileList_11.getName(); 
      String currentFilePath_tFileList_11 = files_tFileList_11.getAbsolutePath();
      String currentFileDirectory_tFileList_11 = files_tFileList_11.getParent();
      String currentFileExtension_tFileList_11 = null;
      
      if (files_tFileList_11.getName().contains(".") && files_tFileList_11.isFile()){
        currentFileExtension_tFileList_11 = files_tFileList_11.getName().substring(files_tFileList_11.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_11 = "";
      }
      
      NB_FILEtFileList_11 ++;
      globalMap.put("tFileList_11_CURRENT_FILE", currentFileName_tFileList_11);
      globalMap.put("tFileList_11_CURRENT_FILEPATH", currentFilePath_tFileList_11);
      globalMap.put("tFileList_11_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_11);
      globalMap.put("tFileList_11_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_11);
      globalMap.put("tFileList_11_NB_FILE", NB_FILEtFileList_11);
      
 



/**
 * [tFileList_11 begin ] stop
 */
	
	/**
	 * [tFileList_11 main ] start
	 */

	

	
	
	currentComponent="tFileList_11";

	

 


	tos_count_tFileList_11++;

/**
 * [tFileList_11 main ] stop
 */
	
	/**
	 * [tFileList_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_11";

	

 



/**
 * [tFileList_11 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_11++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row24", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("amp_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row33", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate11", 1, "exec" + NB_ITERATE_tFileInputXML_11);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tXMLMap_11_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_11_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_11_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tXMLMap_11_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_11_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_11_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_11_TXMLMAP_OUT__Struct Var__tXMLMap_11_TXMLMAP_OUT = new Var__tXMLMap_11_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
amp_rowStruct amp_row_tmp = new amp_rowStruct();
amp_rowStruct amp_row_save = null;
//the aggregate variable
amp_rowStruct amp_row_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_11 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_11",allOutsForAggregate_tXMLMap_11);
// ###############################
class TreeNode_API_tXMLMap_11_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	Short get_Short(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Short(content);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Long get_Long(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Long(content);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Float get_Float(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Float(content);
	}
}
			TreeNode_API_tXMLMap_11_TXMLMAP_OUT treeNodeAPI_tXMLMap_11_TXMLMAP_OUT = new TreeNode_API_tXMLMap_11_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_11_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_11_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_11_TXMLMAP_OUT xml_api_tXMLMap_11_TXMLMAP_OUT = new XML_API_tXMLMap_11_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_11_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_11_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_11", false);
		start_Hash.put("tFileInputXML_11", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_11";

	
		int tos_count_tFileInputXML_11 = 0;
		

	

int nb_line_tFileInputXML_11 = 0;

	String os_tFileInputXML_11 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_11=false;
	if(os_tFileInputXML_11.indexOf("windows") > -1 || os_tFileInputXML_11.indexOf("nt") > -1){
		isWindows_tFileInputXML_11=true;
	}
class NameSpaceTool_tFileInputXML_11 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_11{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_11 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_11 = null;
try {
	filename_tFileInputXML_11 = (String)globalMap.get("tFileList_11_CURRENT_FILEPATH");
} catch(java.lang.Exception e) {
	
	throw(e);
	
}
if(filename_tFileInputXML_11 != null && filename_tFileInputXML_11 instanceof String && filename_tFileInputXML_11.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_11){
		filename_tFileInputXML_11 = filename_tFileInputXML_11.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_11 = true;
org.dom4j.Document doc_tFileInputXML_11 = null;
java.io.Closeable toClose_tFileInputXML_11 = null;
try{
	if(filename_tFileInputXML_11 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_11 = (java.io.InputStream)filename_tFileInputXML_11;
		toClose_tFileInputXML_11 = inputStream_tFileInputXML_11;
		doc_tFileInputXML_11 = reader_tFileInputXML_11.read(inputStream_tFileInputXML_11);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_11 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_11)),"ISO-8859-15");
		toClose_tFileInputXML_11 = unicodeReader_tFileInputXML_11;
		org.xml.sax.InputSource in_tFileInputXML_11= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_11);
		doc_tFileInputXML_11 = reader_tFileInputXML_11.read(in_tFileInputXML_11);
	}
}catch(java.lang.Exception e){
	throw(e);
} finally {
	if(toClose_tFileInputXML_11!=null) {
		toClose_tFileInputXML_11.close();
	}
}
if(isValidFile_tFileInputXML_11){
NameSpaceTool_tFileInputXML_11 nsTool_tFileInputXML_11 = new NameSpaceTool_tFileInputXML_11();
nsTool_tFileInputXML_11.countNSMap(doc_tFileInputXML_11.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_11 = nsTool_tFileInputXML_11.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_11 = doc_tFileInputXML_11.createXPath(nsTool_tFileInputXML_11.addDefaultNSPrefix("/"));  
x_tFileInputXML_11.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_11); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_11 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_11.selectNodes(doc_tFileInputXML_11);	
XML_API_tFileInputXML_11 xml_api_tFileInputXML_11 = new XML_API_tFileInputXML_11();
String str_tFileInputXML_11 = "";
org.dom4j.Node node_tFileInputXML_11 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_11=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_11{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_11 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_11 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_11 xPathUtil_tFileInputXML_11 = new XPathUtil_tFileInputXML_11();
	xPathUtil_tFileInputXML_11.initXPaths(xpaths_tFileInputXML_11, nsTool_tFileInputXML_11, xmlNameSpaceMap_tFileInputXML_11);
for (org.dom4j.Node temp_tFileInputXML_11: nodeList_tFileInputXML_11) {
		nb_line_tFileInputXML_11++;
		
	row24 = null;			
	boolean whetherReject_tFileInputXML_11 = false;
	row24 = new row24Struct();
	try{
    Object obj0_tFileInputXML_11 = xpaths_tFileInputXML_11.get(0).evaluate(temp_tFileInputXML_11);
    if(obj0_tFileInputXML_11 == null) {
    	node_tFileInputXML_11 = null;
		str_tFileInputXML_11 = null;
    	
    } else if(obj0_tFileInputXML_11 instanceof org.dom4j.Node) {
    	node_tFileInputXML_11 = (org.dom4j.Node)obj0_tFileInputXML_11;
		str_tFileInputXML_11 = node_tFileInputXML_11.asXML();
    } else if(obj0_tFileInputXML_11 instanceof String || obj0_tFileInputXML_11 instanceof Number){
    	node_tFileInputXML_11 = temp_tFileInputXML_11;
    	str_tFileInputXML_11 = String.valueOf(obj0_tFileInputXML_11);
    } else if(obj0_tFileInputXML_11 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_11 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_11;
    	node_tFileInputXML_11 = nodes_tFileInputXML_11.size()>0 ? nodes_tFileInputXML_11.get(0) : null;
		str_tFileInputXML_11 = node_tFileInputXML_11==null?null:node_tFileInputXML_11.asXML();
	}
								row24.amp = ParserUtils.parseTo_Document(str_tFileInputXML_11,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_11 = true;
            throw(e);
    }
			
			

 



/**
 * [tFileInputXML_11 begin ] stop
 */
	
	/**
	 * [tFileInputXML_11 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_11";

	

 


	tos_count_tFileInputXML_11++;

/**
 * [tFileInputXML_11 main ] stop
 */
	
	/**
	 * [tFileInputXML_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_11";

	

 



/**
 * [tFileInputXML_11 process_data_begin ] stop
 */
// Start of branch "row24"
if(row24 != null) { 



	
	/**
	 * [tXMLMap_11_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row24");
					}
					

	boolean rejectedInnerJoin_tXMLMap_11_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_11_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_11_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_11_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_11_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_11_TXMLMAP_OUT.setOriginalLoop("/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP");
				docToFlat_tXMLMap_11_TXMLMAP_OUT.setIsOptional(true);
				if(row24.amp == null || row24.amp.getDocument() == null) {
					throw new RuntimeException("row24.amp can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_11_TXMLMAP_OUT = row24.amp.getDocument();
				docToFlat_tXMLMap_11_TXMLMAP_OUT.setDoc(doc_tXMLMap_11_TXMLMAP_OUT);
				docToFlat_tXMLMap_11_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_11_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_11_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_11_TXMLMAP_OUT.countNSMap(doc_tXMLMap_11_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_11_TXMLMAP_OUT = nsTool_tXMLMap_11_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_11_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_11_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_11_TXMLMAP_OUT = new String[18];
				String[] relativePathMappings_tXMLMap_11_TXMLMAP_OUT = new String[18];
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[0] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/APID";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[0] = "APID";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[1] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/NMDT";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[1] = "NMDT";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[2] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/NM_PREV";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[2] = "NM_PREV";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[3] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/NM";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[3] = "NM";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[4] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/SUPPCD";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[4] = "SUPPCD";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[5] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/COMBPRODCD";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[5] = "COMBPRODCD";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[6] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/LIC_AUTHCHANGECD";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[6] = "LIC_AUTHCHANGECD";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[7] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/ABBREVNM";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[7] = "ABBREVNM";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[8] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/FLAVOURCD";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[8] = "FLAVOURCD";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[9] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/LIC_AUTH_PREVCD";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[9] = "LIC_AUTH_PREVCD";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[10] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/AVAIL_RESTRICTCD";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[10] = "AVAIL_RESTRICTCD";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[11] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/VPID";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[11] = "VPID";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[12] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/PARALLEL_IMPORT";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[12] = "PARALLEL_IMPORT";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[13] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/LIC_AUTHCD";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[13] = "LIC_AUTHCD";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[14] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/EMA";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[14] = "EMA";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[15] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/INVALID";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[15] = "INVALID";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[16] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/LIC_AUTHCHANGEDT";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[16] = "LIC_AUTHCHANGEDT";
				
				absolutePathMappings_tXMLMap_11_TXMLMAP_OUT[17] = "row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/DESC";
				relativePathMappings_tXMLMap_11_TXMLMAP_OUT[17] = "DESC";
				
				docToFlat_tXMLMap_11_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_11_TXMLMAP_OUT);
				docToFlat_tXMLMap_11_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_11_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_11_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_11_TXMLMAP_OUT = docToFlat_tXMLMap_11_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_11_TXMLMAP_OUT: resultSet_tXMLMap_11_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_11_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_11_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_11_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_11_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_11_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_11_TXMLMAP_OUT : oneRow_tXMLMap_11_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.put(entry_tXMLMap_11_TXMLMAP_OUT.getKey(),entry_tXMLMap_11_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_11_TXMLMAP_OUT__Struct Var = Var__tXMLMap_11_TXMLMAP_OUT;
		// ###############################
		// # Output tables

amp_row = null;


// # Output table : 'amp_row'

amp_row_tmp = new amp_rowStruct();
amp_row_tmp.apid = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_String("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/APID");
amp_row_tmp.invalid = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_Short("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/INVALID");
amp_row_tmp.vpid = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_String("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/VPID");
amp_row_tmp.nm = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_String("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/NM");
amp_row_tmp.abbrevnm = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_String("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/ABBREVNM");
amp_row_tmp.desc = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_String("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/DESC");
amp_row_tmp.nmdt = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_Date("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/NMDT" , "yyyy-MM-dd");
amp_row_tmp.nm_prev = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_String("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/NM_PREV");
amp_row_tmp.suppcd = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_String("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/SUPPCD");
amp_row_tmp.lic_authcd = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_Long("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/LIC_AUTHCD");
amp_row_tmp.lic_auth_prevcd = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_Long("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/LIC_AUTH_PREVCD");
amp_row_tmp.lic_authchangecd = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_Long("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/LIC_AUTHCHANGECD");
amp_row_tmp.lic_authchangedt = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_Date("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/LIC_AUTHCHANGEDT" , "yyyy-MM-dd");
amp_row_tmp.combprodcd = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_Long("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/COMBPRODCD");
amp_row_tmp.flavourcd = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_Long("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/FLAVOURCD");
amp_row_tmp.ema = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_Integer("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/EMA");
amp_row_tmp.parallel_import = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_Integer("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/PARALLEL_IMPORT");
amp_row_tmp.avail_restrictcd = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_Long("row24.amp:/ACTUAL_MEDICINAL_PRODUCTS/AMPS/AMP/AVAIL_RESTRICTCD");
amp_row_tmp.col_val_hash = null;allOutsForAggregate_tXMLMap_11.add(amp_row_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_11_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_11_TXMLMAP_OUT++;

/**
 * [tXMLMap_11_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_11_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_11_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_11_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_11_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row24"




	
	/**
	 * [tFileInputXML_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_11";

	

 



/**
 * [tFileInputXML_11 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_11 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_11";

	


}
	}
	globalMap.put("tFileInputXML_11_NB_LINE",nb_line_tFileInputXML_11);

	
 

ok_Hash.put("tFileInputXML_11", true);
end_Hash.put("tFileInputXML_11", System.currentTimeMillis());




/**
 * [tFileInputXML_11 end ] stop
 */

	
	/**
	 * [tXMLMap_11_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tXMLMap_11_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_11_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_11_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tLogRow_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_20", false);
		start_Hash.put("tLogRow_20", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tLogRow_20 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_20 = "|";
		java.io.PrintStream consoleOut_tLogRow_20 = null;	

 		StringBuilder strBuffer_tLogRow_20 = null;
		int nb_line_tLogRow_20 = 0;
///////////////////////    			



 



/**
 * [tLogRow_20 begin ] stop
 */



	
	/**
	 * [tDBOutput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_20", false);
		start_Hash.put("tDBOutput_20", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"amp_row");
					}
				
		int tos_count_tDBOutput_20 = 0;
		





String dbschema_tDBOutput_20 = null;
	dbschema_tDBOutput_20 = context.dmd_db_schema;
	

String tableName_tDBOutput_20 = null;
if(dbschema_tDBOutput_20 == null || dbschema_tDBOutput_20.trim().length() == 0) {
	tableName_tDBOutput_20 = ("dmd_amp");
} else {
	tableName_tDBOutput_20 = dbschema_tDBOutput_20 + "\".\"" + ("dmd_amp");
}

int nb_line_tDBOutput_20 = 0;
int nb_line_update_tDBOutput_20 = 0;
int nb_line_inserted_tDBOutput_20 = 0;
int nb_line_deleted_tDBOutput_20 = 0;
int nb_line_rejected_tDBOutput_20 = 0;

int deletedCount_tDBOutput_20=0;
int updatedCount_tDBOutput_20=0;
int insertedCount_tDBOutput_20=0;
int rejectedCount_tDBOutput_20=0;

boolean whetherReject_tDBOutput_20 = false;

java.sql.Connection conn_tDBOutput_20 = null;
String dbUser_tDBOutput_20 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_20 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_20 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_20 = context.dmd_db_password; 

    String dbPwd_tDBOutput_20 = decryptedPassword_tDBOutput_20;

    conn_tDBOutput_20 = java.sql.DriverManager.getConnection(url_tDBOutput_20,dbUser_tDBOutput_20,dbPwd_tDBOutput_20);
	
	resourceMap.put("conn_tDBOutput_20", conn_tDBOutput_20);
        conn_tDBOutput_20.setAutoCommit(false);
        int commitEvery_tDBOutput_20 = 10000;
        int commitCounter_tDBOutput_20 = 0;


   int batchSize_tDBOutput_20 = 10000;
   int batchSizeCounter_tDBOutput_20=0;

int count_tDBOutput_20=0;
            int rsTruncCountNumber_tDBOutput_20 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_20 = conn_tDBOutput_20.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_20 = stmtTruncCount_tDBOutput_20.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_20 + "\"")) {
                    if(rsTruncCount_tDBOutput_20.next()) {
                        rsTruncCountNumber_tDBOutput_20 = rsTruncCount_tDBOutput_20.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_20 = conn_tDBOutput_20.createStatement()) {
                stmtTrunc_tDBOutput_20.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_20 + "\"");
                deletedCount_tDBOutput_20 += rsTruncCountNumber_tDBOutput_20;
            }
	    String insert_tDBOutput_20 = "INSERT INTO \"" + tableName_tDBOutput_20 + "\" (\"apid\",\"invalid\",\"vpid\",\"nm\",\"abbrevnm\",\"desc\",\"nmdt\",\"nm_prev\",\"suppcd\",\"lic_authcd\",\"lic_auth_prevcd\",\"lic_authchangecd\",\"lic_authchangedt\",\"combprodcd\",\"flavourcd\",\"ema\",\"parallel_import\",\"avail_restrictcd\",\"col_val_hash\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_20 = conn_tDBOutput_20.prepareStatement(insert_tDBOutput_20);
	    resourceMap.put("pstmt_tDBOutput_20", pstmt_tDBOutput_20);
	    

 



/**
 * [tDBOutput_20 begin ] stop
 */



	
	/**
	 * [tXMLMap_11_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_11_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_11_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_IN";

	
		int tos_count_tXMLMap_11_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_11 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_11");
for(Object  row_out_tXMLMap_11_TXMLMAP_IN : outs_tXMLMap_11) {//TD512
 



/**
 * [tXMLMap_11_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_11_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_IN";

	

	amp_row = null;
	if(row_out_tXMLMap_11_TXMLMAP_IN!=null && row_out_tXMLMap_11_TXMLMAP_IN instanceof amp_rowStruct) {
		amp_row = (amp_rowStruct)row_out_tXMLMap_11_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_11_TXMLMAP_IN++;

/**
 * [tXMLMap_11_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_11_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_11_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "amp_row"
if(amp_row != null) { 



	
	/**
	 * [tDBOutput_20 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"amp_row");
					}
					



            row33 = null;
        whetherReject_tDBOutput_20 = false;
                    if(amp_row.apid == null) {
pstmt_tDBOutput_20.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_20.setString(1, amp_row.apid);
}

                    if(amp_row.invalid == null) {
pstmt_tDBOutput_20.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_20.setShort(2, amp_row.invalid);
}

                    if(amp_row.vpid == null) {
pstmt_tDBOutput_20.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_20.setString(3, amp_row.vpid);
}

                    if(amp_row.nm == null) {
pstmt_tDBOutput_20.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_20.setString(4, amp_row.nm);
}

                    if(amp_row.abbrevnm == null) {
pstmt_tDBOutput_20.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_20.setString(5, amp_row.abbrevnm);
}

                    if(amp_row.desc == null) {
pstmt_tDBOutput_20.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_20.setString(6, amp_row.desc);
}

                    if(amp_row.nmdt != null) {
pstmt_tDBOutput_20.setTimestamp(7, new java.sql.Timestamp(amp_row.nmdt.getTime()));
} else {
pstmt_tDBOutput_20.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(amp_row.nm_prev == null) {
pstmt_tDBOutput_20.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_20.setString(8, amp_row.nm_prev);
}

                    if(amp_row.suppcd == null) {
pstmt_tDBOutput_20.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_20.setString(9, amp_row.suppcd);
}

                    if(amp_row.lic_authcd == null) {
pstmt_tDBOutput_20.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_20.setLong(10, amp_row.lic_authcd);
}

                    if(amp_row.lic_auth_prevcd == null) {
pstmt_tDBOutput_20.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_20.setLong(11, amp_row.lic_auth_prevcd);
}

                    if(amp_row.lic_authchangecd == null) {
pstmt_tDBOutput_20.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_20.setLong(12, amp_row.lic_authchangecd);
}

                    if(amp_row.lic_authchangedt != null) {
pstmt_tDBOutput_20.setTimestamp(13, new java.sql.Timestamp(amp_row.lic_authchangedt.getTime()));
} else {
pstmt_tDBOutput_20.setNull(13, java.sql.Types.TIMESTAMP);
}

                    if(amp_row.combprodcd == null) {
pstmt_tDBOutput_20.setNull(14, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_20.setLong(14, amp_row.combprodcd);
}

                    if(amp_row.flavourcd == null) {
pstmt_tDBOutput_20.setNull(15, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_20.setLong(15, amp_row.flavourcd);
}

                    if(amp_row.ema == null) {
pstmt_tDBOutput_20.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_20.setInt(16, amp_row.ema);
}

                    if(amp_row.parallel_import == null) {
pstmt_tDBOutput_20.setNull(17, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_20.setInt(17, amp_row.parallel_import);
}

                    if(amp_row.avail_restrictcd == null) {
pstmt_tDBOutput_20.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_20.setLong(18, amp_row.avail_restrictcd);
}

                    if(amp_row.col_val_hash == null) {
pstmt_tDBOutput_20.setNull(19, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_20.setObject(19, amp_row.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_20.addBatch();
    		nb_line_tDBOutput_20++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_20++;
    		  
            if(!whetherReject_tDBOutput_20) {
                            row33 = new row33Struct();
                                row33.apid = amp_row.apid;
                                row33.invalid = amp_row.invalid;
                                row33.vpid = amp_row.vpid;
                                row33.nm = amp_row.nm;
                                row33.abbrevnm = amp_row.abbrevnm;
                                row33.desc = amp_row.desc;
                                row33.nmdt = amp_row.nmdt;
                                row33.nm_prev = amp_row.nm_prev;
                                row33.suppcd = amp_row.suppcd;
                                row33.lic_authcd = amp_row.lic_authcd;
                                row33.lic_auth_prevcd = amp_row.lic_auth_prevcd;
                                row33.lic_authchangecd = amp_row.lic_authchangecd;
                                row33.lic_authchangedt = amp_row.lic_authchangedt;
                                row33.combprodcd = amp_row.combprodcd;
                                row33.flavourcd = amp_row.flavourcd;
                                row33.ema = amp_row.ema;
                                row33.parallel_import = amp_row.parallel_import;
                                row33.avail_restrictcd = amp_row.avail_restrictcd;
                                row33.col_val_hash = amp_row.col_val_hash;
            }
    			if ((batchSize_tDBOutput_20 > 0) && (batchSize_tDBOutput_20 <= batchSizeCounter_tDBOutput_20)) {
                try {
						int countSum_tDBOutput_20 = 0;
						    
						for(int countEach_tDBOutput_20: pstmt_tDBOutput_20.executeBatch()) {
							countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
						}
				    	
				    		insertedCount_tDBOutput_20 += countSum_tDBOutput_20;
				    	
            	    	batchSizeCounter_tDBOutput_20 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_20){
				    	java.sql.SQLException ne_tDBOutput_20 = e_tDBOutput_20.getNextException(),sqle_tDBOutput_20=null;
				    	String errormessage_tDBOutput_20;
						if (ne_tDBOutput_20 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_20 = new java.sql.SQLException(e_tDBOutput_20.getMessage() + "\ncaused by: " + ne_tDBOutput_20.getMessage(), ne_tDBOutput_20.getSQLState(), ne_tDBOutput_20.getErrorCode(), ne_tDBOutput_20);
							errormessage_tDBOutput_20 = sqle_tDBOutput_20.getMessage();
						}else{
							errormessage_tDBOutput_20 = e_tDBOutput_20.getMessage();
						}
				    	
				    		if (ne_tDBOutput_20 != null) {
				    			throw(sqle_tDBOutput_20);
				    		}else{
				            	throw(e_tDBOutput_20);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_20++;
                if(commitEvery_tDBOutput_20 <= commitCounter_tDBOutput_20) {
                if ((batchSize_tDBOutput_20 > 0) && (batchSizeCounter_tDBOutput_20 > 0)) {
                try {
                		int countSum_tDBOutput_20 = 0;
                		    
						for(int countEach_tDBOutput_20: pstmt_tDBOutput_20.executeBatch()) {
							countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
						}
            	    	
            	    		insertedCount_tDBOutput_20 += countSum_tDBOutput_20;
            	    	
                batchSizeCounter_tDBOutput_20 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_20){
			    	java.sql.SQLException ne_tDBOutput_20 = e_tDBOutput_20.getNextException(),sqle_tDBOutput_20=null;
			    	String errormessage_tDBOutput_20;
					if (ne_tDBOutput_20 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_20 = new java.sql.SQLException(e_tDBOutput_20.getMessage() + "\ncaused by: " + ne_tDBOutput_20.getMessage(), ne_tDBOutput_20.getSQLState(), ne_tDBOutput_20.getErrorCode(), ne_tDBOutput_20);
						errormessage_tDBOutput_20 = sqle_tDBOutput_20.getMessage();
					}else{
						errormessage_tDBOutput_20 = e_tDBOutput_20.getMessage();
					}
			    	
			    		if (ne_tDBOutput_20 != null) {
			    			throw(sqle_tDBOutput_20);
			    		}else{
			            	throw(e_tDBOutput_20);
			            }
			    	
				}
            }
                	conn_tDBOutput_20.commit();
                	
                	commitCounter_tDBOutput_20=0;
                }

 


	tos_count_tDBOutput_20++;

/**
 * [tDBOutput_20 main ] stop
 */
	
	/**
	 * [tDBOutput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	

 



/**
 * [tDBOutput_20 process_data_begin ] stop
 */
// Start of branch "row33"
if(row33 != null) { 



	
	/**
	 * [tLogRow_20 main ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row33");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_20 = new StringBuilder();




   				
	    		if(row33.apid != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.apid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.invalid != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.invalid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.nm != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.abbrevnm != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.abbrevnm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.desc != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.desc)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.nmdt != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
								FormatterUtils.format_Date(row33.nmdt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.nm_prev != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.nm_prev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.suppcd != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.suppcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.lic_authcd != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.lic_authcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.lic_auth_prevcd != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.lic_auth_prevcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.lic_authchangecd != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.lic_authchangecd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.lic_authchangedt != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
								FormatterUtils.format_Date(row33.lic_authchangedt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.combprodcd != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.combprodcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.flavourcd != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.flavourcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.ema != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.ema)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.parallel_import != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.parallel_import)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.avail_restrictcd != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.avail_restrictcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_20.append("|");
    			


   				
	    		if(row33.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_20.append(
				                String.valueOf(row33.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_20 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_20 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_20);
                    }
                    consoleOut_tLogRow_20.println(strBuffer_tLogRow_20.toString());
                    consoleOut_tLogRow_20.flush();
                    nb_line_tLogRow_20++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_20++;

/**
 * [tLogRow_20 main ] stop
 */
	
	/**
	 * [tLogRow_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	

 



/**
 * [tLogRow_20 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	

 



/**
 * [tLogRow_20 process_data_end ] stop
 */

} // End of branch "row33"




	
	/**
	 * [tDBOutput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	

 



/**
 * [tDBOutput_20 process_data_end ] stop
 */

} // End of branch "amp_row"




	
	/**
	 * [tXMLMap_11_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_11_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_11_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_11_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_11_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_11_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tDBOutput_20 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	



	    try {
				int countSum_tDBOutput_20 = 0;
				if (pstmt_tDBOutput_20 != null && batchSizeCounter_tDBOutput_20 > 0) {
						
					for(int countEach_tDBOutput_20: pstmt_tDBOutput_20.executeBatch()) {
						countSum_tDBOutput_20 += (countEach_tDBOutput_20 < 0 ? 0 : countEach_tDBOutput_20);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_20 += countSum_tDBOutput_20;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_20){
	    	java.sql.SQLException ne_tDBOutput_20 = e_tDBOutput_20.getNextException(),sqle_tDBOutput_20=null;
	    	String errormessage_tDBOutput_20;
			if (ne_tDBOutput_20 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_20 = new java.sql.SQLException(e_tDBOutput_20.getMessage() + "\ncaused by: " + ne_tDBOutput_20.getMessage(), ne_tDBOutput_20.getSQLState(), ne_tDBOutput_20.getErrorCode(), ne_tDBOutput_20);
				errormessage_tDBOutput_20 = sqle_tDBOutput_20.getMessage();
			}else{
				errormessage_tDBOutput_20 = e_tDBOutput_20.getMessage();
			}
	    	
	    		if (ne_tDBOutput_20 != null) {
	    			throw(sqle_tDBOutput_20);
	    		}else{
	            	throw(e_tDBOutput_20);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_20 != null) {
        		
            pstmt_tDBOutput_20.close();
            resourceMap.remove("pstmt_tDBOutput_20");
        }
    resourceMap.put("statementClosed_tDBOutput_20", true);
			
			conn_tDBOutput_20.commit();
			
		
    	conn_tDBOutput_20 .close();
    	
    	resourceMap.put("finish_tDBOutput_20", true);
    	

	nb_line_deleted_tDBOutput_20=nb_line_deleted_tDBOutput_20+ deletedCount_tDBOutput_20;
	nb_line_update_tDBOutput_20=nb_line_update_tDBOutput_20 + updatedCount_tDBOutput_20;
	nb_line_inserted_tDBOutput_20=nb_line_inserted_tDBOutput_20 + insertedCount_tDBOutput_20;
	nb_line_rejected_tDBOutput_20=nb_line_rejected_tDBOutput_20 + rejectedCount_tDBOutput_20;
	
        globalMap.put("tDBOutput_20_NB_LINE",nb_line_tDBOutput_20);
        globalMap.put("tDBOutput_20_NB_LINE_UPDATED",nb_line_update_tDBOutput_20);
        globalMap.put("tDBOutput_20_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_20);
        globalMap.put("tDBOutput_20_NB_LINE_DELETED",nb_line_deleted_tDBOutput_20);
        globalMap.put("tDBOutput_20_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_20);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"amp_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_20", true);
end_Hash.put("tDBOutput_20", System.currentTimeMillis());




/**
 * [tDBOutput_20 end ] stop
 */

	
	/**
	 * [tLogRow_20 end ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	


//////
//////
globalMap.put("tLogRow_20_NB_LINE",nb_line_tLogRow_20);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tLogRow_20", true);
end_Hash.put("tLogRow_20", System.currentTimeMillis());




/**
 * [tLogRow_20 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate11", 2, "exec" + NB_ITERATE_tFileInputXML_11);
						}				
					




	
	/**
	 * [tFileList_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_11";

	

 



/**
 * [tFileList_11 process_data_end ] stop
 */
	
	/**
	 * [tFileList_11 end ] start
	 */

	

	
	
	currentComponent="tFileList_11";

	

  
    }
  globalMap.put("tFileList_11_NB_FILE", NB_FILEtFileList_11);
  

  
 

 

ok_Hash.put("tFileList_11", true);
end_Hash.put("tFileList_11", System.currentTimeMillis());




/**
 * [tFileList_11 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFileList_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_11 finally ] start
	 */

	

	
	
	currentComponent="tFileList_11";

	

 



/**
 * [tFileList_11 finally ] stop
 */

	
	/**
	 * [tFileInputXML_11 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_11";

	

 



/**
 * [tFileInputXML_11 finally ] stop
 */

	
	/**
	 * [tXMLMap_11_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_11_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_11_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_11_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tDBOutput_20 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_20";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_20") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_20 = null;
                if ((pstmtToClose_tDBOutput_20 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_20")) != null) {
                    pstmtToClose_tDBOutput_20.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_20") == null){
            java.sql.Connection ctn_tDBOutput_20 = null;
            if((ctn_tDBOutput_20 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_20")) != null){
                try {
                    ctn_tDBOutput_20.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_20) {
                    String errorMessage_tDBOutput_20 = "failed to close the connection in tDBOutput_20 :" + sqlEx_tDBOutput_20.getMessage();
                    System.err.println(errorMessage_tDBOutput_20);
                }
            }
        }
    }
 



/**
 * [tDBOutput_20 finally ] stop
 */

	
	/**
	 * [tLogRow_20 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	

 



/**
 * [tLogRow_20 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_11_SUBPROCESS_STATE", 1);
	}
	

public void tDie_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_7", false);
		start_Hash.put("tDie_7", System.currentTimeMillis());
		
	
	currentComponent="tDie_7";

	
		int tos_count_tDie_7 = 0;
		

 



/**
 * [tDie_7 begin ] stop
 */
	
	/**
	 * [tDie_7 main ] start
	 */

	

	
	
	currentComponent="tDie_7";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_7", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
				talendLogs_LOGS.addMessage("tDie", "tDie_7", 5, "the end is near", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_7_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_7_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_7_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_7) {
		logIgnoredError(String.format("tDie_7 - tDie failed to log message due to internal error: %s", e_tDie_7), e_tDie_7);
	}
	
	currentComponent = "tDie_7";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_7_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_7++;

/**
 * [tDie_7 main ] stop
 */
	
	/**
	 * [tDie_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_7";

	

 



/**
 * [tDie_7 process_data_begin ] stop
 */
	
	/**
	 * [tDie_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_7";

	

 



/**
 * [tDie_7 process_data_end ] stop
 */
	
	/**
	 * [tDie_7 end ] start
	 */

	

	
	
	currentComponent="tDie_7";

	

 

ok_Hash.put("tDie_7", true);
end_Hash.put("tDie_7", System.currentTimeMillis());




/**
 * [tDie_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_7 finally ] start
	 */

	

	
	
	currentComponent="tDie_7";

	

 



/**
 * [tDie_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_7_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.vpiddt = readDate(dis);
					
					this.vpidprev = readString(dis);
					
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
					this.nmdt = readDate(dis);
					
					this.nmprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis);
					
						this.glu_f = readInteger(dis);
					
						this.pres_f = readInteger(dis);
					
						this.cfc_f = readInteger(dis);
					
						this.non_availcd = readInteger(dis);
					
					this.non_availdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
						this.udfs = (BigDecimal) dis.readObject();
					
					this.udfs_uomcd = readString(dis);
					
					this.unit_dose_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// java.util.Date
				
						writeDate(this.vpiddt,dos);
					
					// String
				
						writeString(this.vpidprev,dos);
					
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// Long
				
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nmprev,dos);
					
					// Long
				
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
					// Long
				
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
					// Long
				
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
					// Long
				
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					// Integer
				
						writeInteger(this.sug_f,dos);
					
					// Integer
				
						writeInteger(this.glu_f,dos);
					
					// Integer
				
						writeInteger(this.pres_f,dos);
					
					// Integer
				
						writeInteger(this.cfc_f,dos);
					
					// Integer
				
						writeInteger(this.non_availcd,dos);
					
					// java.util.Date
				
						writeDate(this.non_availdt,dos);
					
					// Long
				
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.udfs);
					
					// String
				
						writeString(this.udfs_uomcd,dos);
					
					// String
				
						writeString(this.unit_dose_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class vmpStruct implements routines.system.IPersistableRow<vmpStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public java.util.Date vpiddt;

				public java.util.Date getVpiddt () {
					return this.vpiddt;
				}
				
			    public String vpidprev;

				public String getVpidprev () {
					return this.vpidprev;
				}
				
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public Long basiscd;

				public Long getBasiscd () {
					return this.basiscd;
				}
				
			    public java.util.Date nmdt;

				public java.util.Date getNmdt () {
					return this.nmdt;
				}
				
			    public String nmprev;

				public String getNmprev () {
					return this.nmprev;
				}
				
			    public Long basis_prevcd;

				public Long getBasis_prevcd () {
					return this.basis_prevcd;
				}
				
			    public Long nmchangecd;

				public Long getNmchangecd () {
					return this.nmchangecd;
				}
				
			    public Long comprodcd;

				public Long getComprodcd () {
					return this.comprodcd;
				}
				
			    public Long pres_statcd;

				public Long getPres_statcd () {
					return this.pres_statcd;
				}
				
			    public Integer sug_f;

				public Integer getSug_f () {
					return this.sug_f;
				}
				
			    public Integer glu_f;

				public Integer getGlu_f () {
					return this.glu_f;
				}
				
			    public Integer pres_f;

				public Integer getPres_f () {
					return this.pres_f;
				}
				
			    public Integer cfc_f;

				public Integer getCfc_f () {
					return this.cfc_f;
				}
				
			    public Integer non_availcd;

				public Integer getNon_availcd () {
					return this.non_availcd;
				}
				
			    public java.util.Date non_availdt;

				public java.util.Date getNon_availdt () {
					return this.non_availdt;
				}
				
			    public Long df_indcd;

				public Long getDf_indcd () {
					return this.df_indcd;
				}
				
			    public BigDecimal udfs;

				public BigDecimal getUdfs () {
					return this.udfs;
				}
				
			    public String udfs_uomcd;

				public String getUdfs_uomcd () {
					return this.udfs_uomcd;
				}
				
			    public String unit_dose_uomcd;

				public String getUnit_dose_uomcd () {
					return this.unit_dose_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.vpiddt = readDate(dis);
					
					this.vpidprev = readString(dis);
					
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basiscd = null;
           				} else {
           			    	this.basiscd = dis.readLong();
           				}
					
					this.nmdt = readDate(dis);
					
					this.nmprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_prevcd = null;
           				} else {
           			    	this.basis_prevcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nmchangecd = null;
           				} else {
           			    	this.nmchangecd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.comprodcd = null;
           				} else {
           			    	this.comprodcd = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres_statcd = null;
           				} else {
           			    	this.pres_statcd = dis.readLong();
           				}
					
						this.sug_f = readInteger(dis);
					
						this.glu_f = readInteger(dis);
					
						this.pres_f = readInteger(dis);
					
						this.cfc_f = readInteger(dis);
					
						this.non_availcd = readInteger(dis);
					
					this.non_availdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.df_indcd = null;
           				} else {
           			    	this.df_indcd = dis.readLong();
           				}
					
						this.udfs = (BigDecimal) dis.readObject();
					
					this.udfs_uomcd = readString(dis);
					
					this.unit_dose_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// java.util.Date
				
						writeDate(this.vpiddt,dos);
					
					// String
				
						writeString(this.vpidprev,dos);
					
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// Long
				
						if(this.basiscd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basiscd);
		            	}
					
					// java.util.Date
				
						writeDate(this.nmdt,dos);
					
					// String
				
						writeString(this.nmprev,dos);
					
					// Long
				
						if(this.basis_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_prevcd);
		            	}
					
					// Long
				
						if(this.nmchangecd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.nmchangecd);
		            	}
					
					// Long
				
						if(this.comprodcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.comprodcd);
		            	}
					
					// Long
				
						if(this.pres_statcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pres_statcd);
		            	}
					
					// Integer
				
						writeInteger(this.sug_f,dos);
					
					// Integer
				
						writeInteger(this.glu_f,dos);
					
					// Integer
				
						writeInteger(this.pres_f,dos);
					
					// Integer
				
						writeInteger(this.cfc_f,dos);
					
					// Integer
				
						writeInteger(this.non_availcd,dos);
					
					// java.util.Date
				
						writeDate(this.non_availdt,dos);
					
					// Long
				
						if(this.df_indcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.df_indcd);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.udfs);
					
					// String
				
						writeString(this.udfs_uomcd,dos);
					
					// String
				
						writeString(this.unit_dose_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",vpiddt="+String.valueOf(vpiddt));
		sb.append(",vpidprev="+vpidprev);
		sb.append(",vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",basiscd="+String.valueOf(basiscd));
		sb.append(",nmdt="+String.valueOf(nmdt));
		sb.append(",nmprev="+nmprev);
		sb.append(",basis_prevcd="+String.valueOf(basis_prevcd));
		sb.append(",nmchangecd="+String.valueOf(nmchangecd));
		sb.append(",comprodcd="+String.valueOf(comprodcd));
		sb.append(",pres_statcd="+String.valueOf(pres_statcd));
		sb.append(",sug_f="+String.valueOf(sug_f));
		sb.append(",glu_f="+String.valueOf(glu_f));
		sb.append(",pres_f="+String.valueOf(pres_f));
		sb.append(",cfc_f="+String.valueOf(cfc_f));
		sb.append(",non_availcd="+String.valueOf(non_availcd));
		sb.append(",non_availdt="+String.valueOf(non_availdt));
		sb.append(",df_indcd="+String.valueOf(df_indcd));
		sb.append(",udfs="+String.valueOf(udfs));
		sb.append(",udfs_uomcd="+udfs_uomcd);
		sb.append(",unit_dose_uomcd="+unit_dose_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(vmpStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public routines.system.Document vmp_doc;

				public routines.system.Document getVmp_doc () {
					return this.vmp_doc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
						this.vmp_doc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.vmp_doc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vmp_doc="+String.valueOf(vmp_doc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();
vmpStruct vmp = new vmpStruct();
row19Struct row19 = new row19Struct();



	
	/**
	 * [tFileList_4 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_4 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_4", false);
		start_Hash.put("tFileList_4", System.currentTimeMillis());
		
	
	currentComponent="tFileList_4";

	
		int tos_count_tFileList_4 = 0;
		
	
 
     
    
  String directory_tFileList_4 = context.dmd_file_path;
  final java.util.List<String> maskList_tFileList_4 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_4 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_4.add("f_vmp2_3*.xml");  
  for (final String filemask_tFileList_4 : maskList_tFileList_4) {
	String filemask_compile_tFileList_4 = filemask_tFileList_4;
	
		filemask_compile_tFileList_4 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_4.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_4 = java.util.regex.Pattern.compile(filemask_compile_tFileList_4, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_4.add(fileNamePattern_tFileList_4);
  }
  int NB_FILEtFileList_4 = 0;

  final boolean case_sensitive_tFileList_4 = false;
    final java.util.List<java.io.File> list_tFileList_4 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_4 = new java.util.HashSet<String>();
	java.io.File file_tFileList_4 = new java.io.File(directory_tFileList_4);
    
		file_tFileList_4.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_4 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_4 : patternList_tFileList_4) {
          	if (fileNamePattern_tFileList_4.matcher(fileName_tFileList_4).matches()){
					if(!filePath_tFileList_4.contains(file.getAbsolutePath())) {
			          list_tFileList_4.add(file);
			          filePath_tFileList_4.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_4);
    
    for (int i_tFileList_4 = 0; i_tFileList_4 < list_tFileList_4.size(); i_tFileList_4++){
      java.io.File files_tFileList_4 = list_tFileList_4.get(i_tFileList_4);
      String fileName_tFileList_4 = files_tFileList_4.getName();
      
      String currentFileName_tFileList_4 = files_tFileList_4.getName(); 
      String currentFilePath_tFileList_4 = files_tFileList_4.getAbsolutePath();
      String currentFileDirectory_tFileList_4 = files_tFileList_4.getParent();
      String currentFileExtension_tFileList_4 = null;
      
      if (files_tFileList_4.getName().contains(".") && files_tFileList_4.isFile()){
        currentFileExtension_tFileList_4 = files_tFileList_4.getName().substring(files_tFileList_4.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_4 = "";
      }
      
      NB_FILEtFileList_4 ++;
      globalMap.put("tFileList_4_CURRENT_FILE", currentFileName_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEPATH", currentFilePath_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_4);
      globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);
      
 



/**
 * [tFileList_4 begin ] stop
 */
	
	/**
	 * [tFileList_4 main ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 


	tos_count_tFileList_4++;

/**
 * [tFileList_4 main ] stop
 */
	
	/**
	 * [tFileList_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_4++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("vmp", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row19", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate4", 1, "exec" + NB_ITERATE_tFileInputXML_4);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_4_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tXMLMap_4_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_4_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_4_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_4_TXMLMAP_OUT__Struct Var__tXMLMap_4_TXMLMAP_OUT = new Var__tXMLMap_4_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
vmpStruct vmp_tmp = new vmpStruct();
vmpStruct vmp_save = null;
//the aggregate variable
vmpStruct vmp_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_4 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_4",allOutsForAggregate_tXMLMap_4);
// ###############################
class TreeNode_API_tXMLMap_4_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Short get_Short(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Short(content);
	}
	Long get_Long(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Long(content);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	BigDecimal get_BigDecimal(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_BigDecimal(content);
	}
}
			TreeNode_API_tXMLMap_4_TXMLMAP_OUT treeNodeAPI_tXMLMap_4_TXMLMAP_OUT = new TreeNode_API_tXMLMap_4_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_4_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_4_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_4_TXMLMAP_OUT xml_api_tXMLMap_4_TXMLMAP_OUT = new XML_API_tXMLMap_4_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_4_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_4_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_4", false);
		start_Hash.put("tFileInputXML_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_4";

	
		int tos_count_tFileInputXML_4 = 0;
		

	

int nb_line_tFileInputXML_4 = 0;

	String os_tFileInputXML_4 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_4=false;
	if(os_tFileInputXML_4.indexOf("windows") > -1 || os_tFileInputXML_4.indexOf("nt") > -1){
		isWindows_tFileInputXML_4=true;
	}
class NameSpaceTool_tFileInputXML_4 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_4{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_4 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_4 = null;
try {
	filename_tFileInputXML_4 = (String)globalMap.get("tFileList_4_CURRENT_FILEPATH");
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_4 != null && filename_tFileInputXML_4 instanceof String && filename_tFileInputXML_4.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_4){
		filename_tFileInputXML_4 = filename_tFileInputXML_4.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_4 = true;
org.dom4j.Document doc_tFileInputXML_4 = null;
java.io.Closeable toClose_tFileInputXML_4 = null;
try{
	if(filename_tFileInputXML_4 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_4 = (java.io.InputStream)filename_tFileInputXML_4;
		toClose_tFileInputXML_4 = inputStream_tFileInputXML_4;
		doc_tFileInputXML_4 = reader_tFileInputXML_4.read(inputStream_tFileInputXML_4);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_4 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_4)),"ISO-8859-15");
		toClose_tFileInputXML_4 = unicodeReader_tFileInputXML_4;
		org.xml.sax.InputSource in_tFileInputXML_4= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_4);
		doc_tFileInputXML_4 = reader_tFileInputXML_4.read(in_tFileInputXML_4);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_4 = false;
} finally {
	if(toClose_tFileInputXML_4!=null) {
		toClose_tFileInputXML_4.close();
	}
}
if(isValidFile_tFileInputXML_4){
NameSpaceTool_tFileInputXML_4 nsTool_tFileInputXML_4 = new NameSpaceTool_tFileInputXML_4();
nsTool_tFileInputXML_4.countNSMap(doc_tFileInputXML_4.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_4 = nsTool_tFileInputXML_4.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_4 = doc_tFileInputXML_4.createXPath(nsTool_tFileInputXML_4.addDefaultNSPrefix("/"));  
x_tFileInputXML_4.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_4); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_4 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_4.selectNodes(doc_tFileInputXML_4);	
XML_API_tFileInputXML_4 xml_api_tFileInputXML_4 = new XML_API_tFileInputXML_4();
String str_tFileInputXML_4 = "";
org.dom4j.Node node_tFileInputXML_4 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_4=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_4{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_4 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_4 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_4 xPathUtil_tFileInputXML_4 = new XPathUtil_tFileInputXML_4();
	xPathUtil_tFileInputXML_4.initXPaths(xpaths_tFileInputXML_4, nsTool_tFileInputXML_4, xmlNameSpaceMap_tFileInputXML_4);
for (org.dom4j.Node temp_tFileInputXML_4: nodeList_tFileInputXML_4) {
		nb_line_tFileInputXML_4++;
		
	row18 = null;			
	boolean whetherReject_tFileInputXML_4 = false;
	row18 = new row18Struct();
	try{
    Object obj0_tFileInputXML_4 = xpaths_tFileInputXML_4.get(0).evaluate(temp_tFileInputXML_4);
    if(obj0_tFileInputXML_4 == null) {
    	node_tFileInputXML_4 = null;
		str_tFileInputXML_4 = null;
    	
    } else if(obj0_tFileInputXML_4 instanceof org.dom4j.Node) {
    	node_tFileInputXML_4 = (org.dom4j.Node)obj0_tFileInputXML_4;
		str_tFileInputXML_4 = node_tFileInputXML_4.asXML();
    } else if(obj0_tFileInputXML_4 instanceof String || obj0_tFileInputXML_4 instanceof Number){
    	node_tFileInputXML_4 = temp_tFileInputXML_4;
    	str_tFileInputXML_4 = String.valueOf(obj0_tFileInputXML_4);
    } else if(obj0_tFileInputXML_4 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_4 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_4;
    	node_tFileInputXML_4 = nodes_tFileInputXML_4.size()>0 ? nodes_tFileInputXML_4.get(0) : null;
		str_tFileInputXML_4 = node_tFileInputXML_4==null?null:node_tFileInputXML_4.asXML();
	}
								row18.vmp_doc = ParserUtils.parseTo_Document(str_tFileInputXML_4,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_4 = true;
                System.err.println(e.getMessage());
                row18 = null;
    }
			
			

 



/**
 * [tFileInputXML_4 begin ] stop
 */
	
	/**
	 * [tFileInputXML_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	

 


	tos_count_tFileInputXML_4++;

/**
 * [tFileInputXML_4 main ] stop
 */
	
	/**
	 * [tFileInputXML_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	

 



/**
 * [tFileInputXML_4 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					

	boolean rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_4_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_4_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_4_TXMLMAP_OUT_0.setOriginalLoop("/VIRTUAL_MED_PRODUCTS/VMPS/VMP");
					docToFlat_tXMLMap_4_TXMLMAP_OUT_0.setIsOptional(true);
					if(row18.vmp_doc == null 
						|| row18.vmp_doc.getDocument() == null) {
						throw new RuntimeException("row18.vmp_doc can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_4_TXMLMAP_OUT_0 = row18.vmp_doc.getDocument();
					docToFlat_tXMLMap_4_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_4_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_4_TXMLMAP_OUT_0.setDefineNS(false);
					docToFlat_tXMLMap_4_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_4_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_4_TXMLMAP_OUT.countNSMap(doc_tXMLMap_4_TXMLMAP_OUT_0.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT_0 = nsTool_tXMLMap_4_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_4_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/ABBREVNM");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("ABBREVNM");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/BASIS_PREVCD");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("BASIS_PREVCD");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/INVALID");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("INVALID");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/NON_AVAILDT");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("NON_AVAILDT");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/VPIDPREV");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("VPIDPREV");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/NMDT");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("NMDT");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/SUG_F");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("SUG_F");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/PRES_F");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("PRES_F");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/BASISCD");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("BASISCD");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/GLU_F");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("GLU_F");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/UDFS_UOMCD");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("UDFS_UOMCD");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/NON_AVAILCD");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("NON_AVAILCD");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/VPID");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("VPID");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/NMCHANGECD");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("NMCHANGECD");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/VTMID");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("VTMID");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/NMPREV");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("NMPREV");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/COMBPRODCD");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("COMBPRODCD");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/NM");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("NM");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/DF_INDCD");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("DF_INDCD");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/UNIT_DOSE_UOMCD");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("UNIT_DOSE_UOMCD");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/CFC_F");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("CFC_F");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/PRES_STATCD");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("PRES_STATCD");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/UDFS");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("UDFS");
					
					absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/VPIDDT");
					relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.add("VPIDDT");
					
					String[] absolutePathMappings_tXMLMap_4_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_4_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_4_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_4_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_4_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_4_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_4_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_4_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_4_TXMLMAP_OUT_0 = docToFlat_tXMLMap_4_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_4_TXMLMAP_OUT_0: resultSet_tXMLMap_4_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_4_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_4_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_4_TXMLMAP_OUT_0 : oneRow_tXMLMap_4_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.put(entry_tXMLMap_4_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_4_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_4_TXMLMAP_OUT__Struct Var = Var__tXMLMap_4_TXMLMAP_OUT;
		// ###############################
		// # Output table

vmp = null;


// # Output table : 'vmp'

vmp_tmp = new vmpStruct();
vmp_tmp.vpid = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/VPID");
vmp_tmp.vpiddt = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Date("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/VPIDDT" , "yyyy-MM-dd");
vmp_tmp.vpidprev = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/VPIDPREV");
vmp_tmp.vtmid = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/VTMID");
vmp_tmp.invalid = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Short("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/INVALID");
vmp_tmp.nm = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/NM");
vmp_tmp.abbrevnm = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/ABBREVNM");
vmp_tmp.basiscd = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Long("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/BASISCD");
vmp_tmp.nmdt = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Date("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/NMDT" , "yyyy-MM-dd");
vmp_tmp.nmprev = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/NMPREV");
vmp_tmp.basis_prevcd = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Long("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/BASIS_PREVCD");
vmp_tmp.nmchangecd = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Long("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/NMCHANGECD");
vmp_tmp.comprodcd = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Long("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/COMBPRODCD");
vmp_tmp.pres_statcd = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Long("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/PRES_STATCD");
vmp_tmp.sug_f = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Integer("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/SUG_F");
vmp_tmp.glu_f = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Integer("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/GLU_F");
vmp_tmp.pres_f = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Integer("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/PRES_F");
vmp_tmp.cfc_f = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Integer("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/CFC_F");
vmp_tmp.non_availcd = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Integer("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/NON_AVAILCD");
vmp_tmp.non_availdt = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Date("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/NON_AVAILDT" , "yyyy-MM-dd");
vmp_tmp.df_indcd = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_Long("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/DF_INDCD");
vmp_tmp.udfs = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_BigDecimal("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/UDFS");
vmp_tmp.udfs_uomcd = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/UDFS_UOMCD");
vmp_tmp.unit_dose_uomcd = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row18.vmp_doc:/VIRTUAL_MED_PRODUCTS/VMPS/VMP/UNIT_DOSE_UOMCD");
vmp_tmp.col_val_hash = null;allOutsForAggregate_tXMLMap_4.add(vmp_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_4_TXMLMAP_OUT++;

/**
 * [tXMLMap_4_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tFileInputXML_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	

 



/**
 * [tFileInputXML_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	


}
	}
	globalMap.put("tFileInputXML_4_NB_LINE",nb_line_tFileInputXML_4);

	
 

ok_Hash.put("tFileInputXML_4", true);
end_Hash.put("tFileInputXML_4", System.currentTimeMillis());




/**
 * [tFileInputXML_4 end ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_4_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_4_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tLogRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_15", false);
		start_Hash.put("tLogRow_15", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tLogRow_15 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_15 = "|";
		java.io.PrintStream consoleOut_tLogRow_15 = null;	

 		StringBuilder strBuffer_tLogRow_15 = null;
		int nb_line_tLogRow_15 = 0;
///////////////////////    			



 



/**
 * [tLogRow_15 begin ] stop
 */



	
	/**
	 * [tDBOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_15", false);
		start_Hash.put("tDBOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"vmp");
					}
				
		int tos_count_tDBOutput_15 = 0;
		





String dbschema_tDBOutput_15 = null;
	dbschema_tDBOutput_15 = context.dmd_db_schema;
	

String tableName_tDBOutput_15 = null;
if(dbschema_tDBOutput_15 == null || dbschema_tDBOutput_15.trim().length() == 0) {
	tableName_tDBOutput_15 = ("dmd_vmp");
} else {
	tableName_tDBOutput_15 = dbschema_tDBOutput_15 + "\".\"" + ("dmd_vmp");
}

int nb_line_tDBOutput_15 = 0;
int nb_line_update_tDBOutput_15 = 0;
int nb_line_inserted_tDBOutput_15 = 0;
int nb_line_deleted_tDBOutput_15 = 0;
int nb_line_rejected_tDBOutput_15 = 0;

int deletedCount_tDBOutput_15=0;
int updatedCount_tDBOutput_15=0;
int insertedCount_tDBOutput_15=0;
int rejectedCount_tDBOutput_15=0;

boolean whetherReject_tDBOutput_15 = false;

java.sql.Connection conn_tDBOutput_15 = null;
String dbUser_tDBOutput_15 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_15 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_15 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_15 = context.dmd_db_password; 

    String dbPwd_tDBOutput_15 = decryptedPassword_tDBOutput_15;

    conn_tDBOutput_15 = java.sql.DriverManager.getConnection(url_tDBOutput_15,dbUser_tDBOutput_15,dbPwd_tDBOutput_15);
	
	resourceMap.put("conn_tDBOutput_15", conn_tDBOutput_15);
        conn_tDBOutput_15.setAutoCommit(false);
        int commitEvery_tDBOutput_15 = 10000;
        int commitCounter_tDBOutput_15 = 0;


   int batchSize_tDBOutput_15 = 10000;
   int batchSizeCounter_tDBOutput_15=0;

int count_tDBOutput_15=0;
            int rsTruncCountNumber_tDBOutput_15 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_15 = conn_tDBOutput_15.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_15 = stmtTruncCount_tDBOutput_15.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_15 + "\"")) {
                    if(rsTruncCount_tDBOutput_15.next()) {
                        rsTruncCountNumber_tDBOutput_15 = rsTruncCount_tDBOutput_15.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_15 = conn_tDBOutput_15.createStatement()) {
                stmtTrunc_tDBOutput_15.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_15 + "\"");
                deletedCount_tDBOutput_15 += rsTruncCountNumber_tDBOutput_15;
            }
	    String insert_tDBOutput_15 = "INSERT INTO \"" + tableName_tDBOutput_15 + "\" (\"vpid\",\"vpiddt\",\"vpidprev\",\"vtmid\",\"invalid\",\"nm\",\"abbrevnm\",\"basiscd\",\"nmdt\",\"nmprev\",\"basis_prevcd\",\"nmchangecd\",\"comprodcd\",\"pres_statcd\",\"sug_f\",\"glu_f\",\"pres_f\",\"cfc_f\",\"non_availcd\",\"non_availdt\",\"df_indcd\",\"udfs\",\"udfs_uomcd\",\"unit_dose_uomcd\",\"col_val_hash\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_15 = conn_tDBOutput_15.prepareStatement(insert_tDBOutput_15);
	    resourceMap.put("pstmt_tDBOutput_15", pstmt_tDBOutput_15);
	    

 



/**
 * [tDBOutput_15 begin ] stop
 */



	
	/**
	 * [tXMLMap_4_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_4_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	
		int tos_count_tXMLMap_4_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_4 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_4");
for(Object  row_out_tXMLMap_4_TXMLMAP_IN : outs_tXMLMap_4) {//TD512
 



/**
 * [tXMLMap_4_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

	vmp = null;
	if(row_out_tXMLMap_4_TXMLMAP_IN!=null && row_out_tXMLMap_4_TXMLMAP_IN instanceof vmpStruct) {
		vmp = (vmpStruct)row_out_tXMLMap_4_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_4_TXMLMAP_IN++;

/**
 * [tXMLMap_4_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_4_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "vmp"
if(vmp != null) { 



	
	/**
	 * [tDBOutput_15 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"vmp");
					}
					



            row19 = null;
        whetherReject_tDBOutput_15 = false;
                    if(vmp.vpid == null) {
pstmt_tDBOutput_15.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(1, vmp.vpid);
}

                    if(vmp.vpiddt != null) {
pstmt_tDBOutput_15.setTimestamp(2, new java.sql.Timestamp(vmp.vpiddt.getTime()));
} else {
pstmt_tDBOutput_15.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(vmp.vpidprev == null) {
pstmt_tDBOutput_15.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(3, vmp.vpidprev);
}

                    if(vmp.vtmid == null) {
pstmt_tDBOutput_15.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(4, vmp.vtmid);
}

                    if(vmp.invalid == null) {
pstmt_tDBOutput_15.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setShort(5, vmp.invalid);
}

                    if(vmp.nm == null) {
pstmt_tDBOutput_15.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(6, vmp.nm);
}

                    if(vmp.abbrevnm == null) {
pstmt_tDBOutput_15.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(7, vmp.abbrevnm);
}

                    if(vmp.basiscd == null) {
pstmt_tDBOutput_15.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setLong(8, vmp.basiscd);
}

                    if(vmp.nmdt != null) {
pstmt_tDBOutput_15.setTimestamp(9, new java.sql.Timestamp(vmp.nmdt.getTime()));
} else {
pstmt_tDBOutput_15.setNull(9, java.sql.Types.TIMESTAMP);
}

                    if(vmp.nmprev == null) {
pstmt_tDBOutput_15.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(10, vmp.nmprev);
}

                    if(vmp.basis_prevcd == null) {
pstmt_tDBOutput_15.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setLong(11, vmp.basis_prevcd);
}

                    if(vmp.nmchangecd == null) {
pstmt_tDBOutput_15.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setLong(12, vmp.nmchangecd);
}

                    if(vmp.comprodcd == null) {
pstmt_tDBOutput_15.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setLong(13, vmp.comprodcd);
}

                    if(vmp.pres_statcd == null) {
pstmt_tDBOutput_15.setNull(14, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setLong(14, vmp.pres_statcd);
}

                    if(vmp.sug_f == null) {
pstmt_tDBOutput_15.setNull(15, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setInt(15, vmp.sug_f);
}

                    if(vmp.glu_f == null) {
pstmt_tDBOutput_15.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setInt(16, vmp.glu_f);
}

                    if(vmp.pres_f == null) {
pstmt_tDBOutput_15.setNull(17, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setInt(17, vmp.pres_f);
}

                    if(vmp.cfc_f == null) {
pstmt_tDBOutput_15.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setInt(18, vmp.cfc_f);
}

                    if(vmp.non_availcd == null) {
pstmt_tDBOutput_15.setNull(19, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setInt(19, vmp.non_availcd);
}

                    if(vmp.non_availdt != null) {
pstmt_tDBOutput_15.setTimestamp(20, new java.sql.Timestamp(vmp.non_availdt.getTime()));
} else {
pstmt_tDBOutput_15.setNull(20, java.sql.Types.TIMESTAMP);
}

                    if(vmp.df_indcd == null) {
pstmt_tDBOutput_15.setNull(21, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_15.setLong(21, vmp.df_indcd);
}

                    pstmt_tDBOutput_15.setBigDecimal(22, vmp.udfs);

                    if(vmp.udfs_uomcd == null) {
pstmt_tDBOutput_15.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(23, vmp.udfs_uomcd);
}

                    if(vmp.unit_dose_uomcd == null) {
pstmt_tDBOutput_15.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_15.setString(24, vmp.unit_dose_uomcd);
}

                    if(vmp.col_val_hash == null) {
pstmt_tDBOutput_15.setNull(25, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_15.setObject(25, vmp.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_15.addBatch();
    		nb_line_tDBOutput_15++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_15++;
    		  
            if(!whetherReject_tDBOutput_15) {
                            row19 = new row19Struct();
                                row19.vpid = vmp.vpid;
                                row19.vpiddt = vmp.vpiddt;
                                row19.vpidprev = vmp.vpidprev;
                                row19.vtmid = vmp.vtmid;
                                row19.invalid = vmp.invalid;
                                row19.nm = vmp.nm;
                                row19.abbrevnm = vmp.abbrevnm;
                                row19.basiscd = vmp.basiscd;
                                row19.nmdt = vmp.nmdt;
                                row19.nmprev = vmp.nmprev;
                                row19.basis_prevcd = vmp.basis_prevcd;
                                row19.nmchangecd = vmp.nmchangecd;
                                row19.comprodcd = vmp.comprodcd;
                                row19.pres_statcd = vmp.pres_statcd;
                                row19.sug_f = vmp.sug_f;
                                row19.glu_f = vmp.glu_f;
                                row19.pres_f = vmp.pres_f;
                                row19.cfc_f = vmp.cfc_f;
                                row19.non_availcd = vmp.non_availcd;
                                row19.non_availdt = vmp.non_availdt;
                                row19.df_indcd = vmp.df_indcd;
                                row19.udfs = vmp.udfs;
                                row19.udfs_uomcd = vmp.udfs_uomcd;
                                row19.unit_dose_uomcd = vmp.unit_dose_uomcd;
                                row19.col_val_hash = vmp.col_val_hash;
            }
    			if ((batchSize_tDBOutput_15 > 0) && (batchSize_tDBOutput_15 <= batchSizeCounter_tDBOutput_15)) {
                try {
						int countSum_tDBOutput_15 = 0;
						    
						for(int countEach_tDBOutput_15: pstmt_tDBOutput_15.executeBatch()) {
							countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
						}
				    	
				    		insertedCount_tDBOutput_15 += countSum_tDBOutput_15;
				    	
            	    	batchSizeCounter_tDBOutput_15 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_15){
				    	java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(),sqle_tDBOutput_15=null;
				    	String errormessage_tDBOutput_15;
						if (ne_tDBOutput_15 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_15 = new java.sql.SQLException(e_tDBOutput_15.getMessage() + "\ncaused by: " + ne_tDBOutput_15.getMessage(), ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
							errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
						}else{
							errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
						}
				    	
				    		if (ne_tDBOutput_15 != null) {
				    			throw(sqle_tDBOutput_15);
				    		}else{
				            	throw(e_tDBOutput_15);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_15++;
                if(commitEvery_tDBOutput_15 <= commitCounter_tDBOutput_15) {
                if ((batchSize_tDBOutput_15 > 0) && (batchSizeCounter_tDBOutput_15 > 0)) {
                try {
                		int countSum_tDBOutput_15 = 0;
                		    
						for(int countEach_tDBOutput_15: pstmt_tDBOutput_15.executeBatch()) {
							countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
						}
            	    	
            	    		insertedCount_tDBOutput_15 += countSum_tDBOutput_15;
            	    	
                batchSizeCounter_tDBOutput_15 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_15){
			    	java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(),sqle_tDBOutput_15=null;
			    	String errormessage_tDBOutput_15;
					if (ne_tDBOutput_15 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_15 = new java.sql.SQLException(e_tDBOutput_15.getMessage() + "\ncaused by: " + ne_tDBOutput_15.getMessage(), ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
						errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
					}else{
						errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
					}
			    	
			    		if (ne_tDBOutput_15 != null) {
			    			throw(sqle_tDBOutput_15);
			    		}else{
			            	throw(e_tDBOutput_15);
			            }
			    	
				}
            }
                	conn_tDBOutput_15.commit();
                	
                	commitCounter_tDBOutput_15=0;
                }

 


	tos_count_tDBOutput_15++;

/**
 * [tDBOutput_15 main ] stop
 */
	
	/**
	 * [tDBOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	

 



/**
 * [tDBOutput_15 process_data_begin ] stop
 */
// Start of branch "row19"
if(row19 != null) { 



	
	/**
	 * [tLogRow_15 main ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row19");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_15 = new StringBuilder();




   				
	    		if(row19.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.vpiddt != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
								FormatterUtils.format_Date(row19.vpiddt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.vpidprev != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.vpidprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.vtmid != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.vtmid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.invalid != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.invalid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.nm != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.abbrevnm != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.abbrevnm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.basiscd != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.basiscd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.nmdt != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
								FormatterUtils.format_Date(row19.nmdt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.nmprev != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.nmprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.basis_prevcd != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.basis_prevcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.nmchangecd != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.nmchangecd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.comprodcd != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.comprodcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.pres_statcd != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.pres_statcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.sug_f != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.sug_f)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.glu_f != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.glu_f)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.pres_f != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.pres_f)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.cfc_f != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.cfc_f)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.non_availcd != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.non_availcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.non_availdt != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
								FormatterUtils.format_Date(row19.non_availdt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.df_indcd != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.df_indcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.udfs != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
								row19.udfs.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.udfs_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.udfs_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.unit_dose_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.unit_dose_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_15.append("|");
    			


   				
	    		if(row19.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_15.append(
				                String.valueOf(row19.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_15 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_15 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_15);
                    }
                    consoleOut_tLogRow_15.println(strBuffer_tLogRow_15.toString());
                    consoleOut_tLogRow_15.flush();
                    nb_line_tLogRow_15++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_15++;

/**
 * [tLogRow_15 main ] stop
 */
	
	/**
	 * [tLogRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 process_data_end ] stop
 */

} // End of branch "row19"




	
	/**
	 * [tDBOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	

 



/**
 * [tDBOutput_15 process_data_end ] stop
 */

} // End of branch "vmp"




	
	/**
	 * [tXMLMap_4_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_4_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_4_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_4_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tDBOutput_15 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	



	    try {
				int countSum_tDBOutput_15 = 0;
				if (pstmt_tDBOutput_15 != null && batchSizeCounter_tDBOutput_15 > 0) {
						
					for(int countEach_tDBOutput_15: pstmt_tDBOutput_15.executeBatch()) {
						countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0 : countEach_tDBOutput_15);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_15 += countSum_tDBOutput_15;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_15){
	    	java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15.getNextException(),sqle_tDBOutput_15=null;
	    	String errormessage_tDBOutput_15;
			if (ne_tDBOutput_15 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_15 = new java.sql.SQLException(e_tDBOutput_15.getMessage() + "\ncaused by: " + ne_tDBOutput_15.getMessage(), ne_tDBOutput_15.getSQLState(), ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
				errormessage_tDBOutput_15 = sqle_tDBOutput_15.getMessage();
			}else{
				errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
			}
	    	
	    		if (ne_tDBOutput_15 != null) {
	    			throw(sqle_tDBOutput_15);
	    		}else{
	            	throw(e_tDBOutput_15);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_15 != null) {
        		
            pstmt_tDBOutput_15.close();
            resourceMap.remove("pstmt_tDBOutput_15");
        }
    resourceMap.put("statementClosed_tDBOutput_15", true);
			
			conn_tDBOutput_15.commit();
			
		
    	conn_tDBOutput_15 .close();
    	
    	resourceMap.put("finish_tDBOutput_15", true);
    	

	nb_line_deleted_tDBOutput_15=nb_line_deleted_tDBOutput_15+ deletedCount_tDBOutput_15;
	nb_line_update_tDBOutput_15=nb_line_update_tDBOutput_15 + updatedCount_tDBOutput_15;
	nb_line_inserted_tDBOutput_15=nb_line_inserted_tDBOutput_15 + insertedCount_tDBOutput_15;
	nb_line_rejected_tDBOutput_15=nb_line_rejected_tDBOutput_15 + rejectedCount_tDBOutput_15;
	
        globalMap.put("tDBOutput_15_NB_LINE",nb_line_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_UPDATED",nb_line_update_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_DELETED",nb_line_deleted_tDBOutput_15);
        globalMap.put("tDBOutput_15_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_15);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"vmp");
			  	}
			  	
 

ok_Hash.put("tDBOutput_15", true);
end_Hash.put("tDBOutput_15", System.currentTimeMillis());




/**
 * [tDBOutput_15 end ] stop
 */

	
	/**
	 * [tLogRow_15 end ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	


//////
//////
globalMap.put("tLogRow_15_NB_LINE",nb_line_tLogRow_15);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tLogRow_15", true);
end_Hash.put("tLogRow_15", System.currentTimeMillis());




/**
 * [tLogRow_15 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate4", 2, "exec" + NB_ITERATE_tFileInputXML_4);
						}				
					




	
	/**
	 * [tFileList_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 process_data_end ] stop
 */
	
	/**
	 * [tFileList_4 end ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

  
    }
  globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);
  

    if (NB_FILEtFileList_4 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_4);
  
 

 

ok_Hash.put("tFileList_4", true);
end_Hash.put("tFileList_4", System.currentTimeMillis());




/**
 * [tFileList_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFileList_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_4 finally ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 finally ] stop
 */

	
	/**
	 * [tFileInputXML_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	

 



/**
 * [tFileInputXML_4 finally ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_4_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tDBOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_15";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_15") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_15 = null;
                if ((pstmtToClose_tDBOutput_15 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_15")) != null) {
                    pstmtToClose_tDBOutput_15.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_15") == null){
            java.sql.Connection ctn_tDBOutput_15 = null;
            if((ctn_tDBOutput_15 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_15")) != null){
                try {
                    ctn_tDBOutput_15.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_15) {
                    String errorMessage_tDBOutput_15 = "failed to close the connection in tDBOutput_15 :" + sqlEx_tDBOutput_15.getMessage();
                    System.err.println(errorMessage_tDBOutput_15);
                }
            }
        }
    }
 



/**
 * [tDBOutput_15 finally ] stop
 */

	
	/**
	 * [tLogRow_15 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_4_SUBPROCESS_STATE", 1);
	}
	

public void tDie_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_9", false);
		start_Hash.put("tDie_9", System.currentTimeMillis());
		
	
	currentComponent="tDie_9";

	
		int tos_count_tDie_9 = 0;
		

 



/**
 * [tDie_9 begin ] stop
 */
	
	/**
	 * [tDie_9 main ] start
	 */

	

	
	
	currentComponent="tDie_9";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_9", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
				talendLogs_LOGS.addMessage("tDie", "tDie_9", 5, "the end is near", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_9_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_9_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_9_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_9) {
		logIgnoredError(String.format("tDie_9 - tDie failed to log message due to internal error: %s", e_tDie_9), e_tDie_9);
	}
	
	currentComponent = "tDie_9";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_9_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_9++;

/**
 * [tDie_9 main ] stop
 */
	
	/**
	 * [tDie_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_9";

	

 



/**
 * [tDie_9 process_data_begin ] stop
 */
	
	/**
	 * [tDie_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_9";

	

 



/**
 * [tDie_9 process_data_end ] stop
 */
	
	/**
	 * [tDie_9 end ] start
	 */

	

	
	
	currentComponent="tDie_9";

	

 

ok_Hash.put("tDie_9", true);
end_Hash.put("tDie_9", System.currentTimeMillis());




/**
 * [tDie_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_9 finally ] start
	 */

	

	
	
	currentComponent="tDie_9";

	

 



/**
 * [tDie_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_9_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long formcd;

				public Long getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.formcd = null;
           				} else {
           			    	this.formcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Long
				
						if(this.formcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.formcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+String.valueOf(formcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfont_drug_form_3Struct implements routines.system.IPersistableRow<copyOfont_drug_form_3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long formcd;

				public Long getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.formcd = null;
           				} else {
           			    	this.formcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Long
				
						if(this.formcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.formcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+String.valueOf(formcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfont_drug_form_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public routines.system.Document vmp_doc;

				public routines.system.Document getVmp_doc () {
					return this.vmp_doc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
						this.vmp_doc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.vmp_doc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vmp_doc="+String.valueOf(vmp_doc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();
copyOfont_drug_form_3Struct copyOfont_drug_form_3 = new copyOfont_drug_form_3Struct();
row32Struct row32 = new row32Struct();



	
	/**
	 * [tFileList_5 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_10 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_5", false);
		start_Hash.put("tFileList_5", System.currentTimeMillis());
		
	
	currentComponent="tFileList_5";

	
		int tos_count_tFileList_5 = 0;
		
	
 
     
    
  String directory_tFileList_5 = context.dmd_file_path;
  final java.util.List<String> maskList_tFileList_5 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_5 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_5.add("f_vmp2_3*.xml");  
  for (final String filemask_tFileList_5 : maskList_tFileList_5) {
	String filemask_compile_tFileList_5 = filemask_tFileList_5;
	
		filemask_compile_tFileList_5 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_5.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_5 = java.util.regex.Pattern.compile(filemask_compile_tFileList_5, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_5.add(fileNamePattern_tFileList_5);
  }
  int NB_FILEtFileList_5 = 0;

  final boolean case_sensitive_tFileList_5 = false;
    final java.util.List<java.io.File> list_tFileList_5 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_5 = new java.util.HashSet<String>();
	java.io.File file_tFileList_5 = new java.io.File(directory_tFileList_5);
    
		file_tFileList_5.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_5 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_5 : patternList_tFileList_5) {
          	if (fileNamePattern_tFileList_5.matcher(fileName_tFileList_5).matches()){
					if(!filePath_tFileList_5.contains(file.getAbsolutePath())) {
			          list_tFileList_5.add(file);
			          filePath_tFileList_5.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_5);
    
    for (int i_tFileList_5 = 0; i_tFileList_5 < list_tFileList_5.size(); i_tFileList_5++){
      java.io.File files_tFileList_5 = list_tFileList_5.get(i_tFileList_5);
      String fileName_tFileList_5 = files_tFileList_5.getName();
      
      String currentFileName_tFileList_5 = files_tFileList_5.getName(); 
      String currentFilePath_tFileList_5 = files_tFileList_5.getAbsolutePath();
      String currentFileDirectory_tFileList_5 = files_tFileList_5.getParent();
      String currentFileExtension_tFileList_5 = null;
      
      if (files_tFileList_5.getName().contains(".") && files_tFileList_5.isFile()){
        currentFileExtension_tFileList_5 = files_tFileList_5.getName().substring(files_tFileList_5.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_5 = "";
      }
      
      NB_FILEtFileList_5 ++;
      globalMap.put("tFileList_5_CURRENT_FILE", currentFileName_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEPATH", currentFilePath_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_5);
      globalMap.put("tFileList_5_NB_FILE", NB_FILEtFileList_5);
      
 



/**
 * [tFileList_5 begin ] stop
 */
	
	/**
	 * [tFileList_5 main ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 


	tos_count_tFileList_5++;

/**
 * [tFileList_5 main ] stop
 */
	
	/**
	 * [tFileList_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_10++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row23", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfont_drug_form_3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row32", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate5", 1, "exec" + NB_ITERATE_tFileInputXML_10);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tXMLMap_10_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_10_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_10_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tXMLMap_10_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_10_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_10_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_10_TXMLMAP_OUT__Struct Var__tXMLMap_10_TXMLMAP_OUT = new Var__tXMLMap_10_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfont_drug_form_3Struct copyOfont_drug_form_3_tmp = new copyOfont_drug_form_3Struct();
copyOfont_drug_form_3Struct copyOfont_drug_form_3_save = null;
//the aggregate variable
copyOfont_drug_form_3Struct copyOfont_drug_form_3_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_10 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_10",allOutsForAggregate_tXMLMap_10);
// ###############################
class TreeNode_API_tXMLMap_10_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Short get_Short(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Short(content);
	}
	Long get_Long(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Long(content);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	BigDecimal get_BigDecimal(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_BigDecimal(content);
	}
}
			TreeNode_API_tXMLMap_10_TXMLMAP_OUT treeNodeAPI_tXMLMap_10_TXMLMAP_OUT = new TreeNode_API_tXMLMap_10_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_10_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_10_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_10_TXMLMAP_OUT xml_api_tXMLMap_10_TXMLMAP_OUT = new XML_API_tXMLMap_10_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_10_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_10_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_10", false);
		start_Hash.put("tFileInputXML_10", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_10";

	
		int tos_count_tFileInputXML_10 = 0;
		

	

int nb_line_tFileInputXML_10 = 0;

	String os_tFileInputXML_10 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_10=false;
	if(os_tFileInputXML_10.indexOf("windows") > -1 || os_tFileInputXML_10.indexOf("nt") > -1){
		isWindows_tFileInputXML_10=true;
	}
class NameSpaceTool_tFileInputXML_10 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_10{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_10 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_10 = null;
try {
	filename_tFileInputXML_10 = (String)globalMap.get("tFileList_5_CURRENT_FILEPATH");
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_10 != null && filename_tFileInputXML_10 instanceof String && filename_tFileInputXML_10.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_10){
		filename_tFileInputXML_10 = filename_tFileInputXML_10.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_10 = true;
org.dom4j.Document doc_tFileInputXML_10 = null;
java.io.Closeable toClose_tFileInputXML_10 = null;
try{
	if(filename_tFileInputXML_10 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_10 = (java.io.InputStream)filename_tFileInputXML_10;
		toClose_tFileInputXML_10 = inputStream_tFileInputXML_10;
		doc_tFileInputXML_10 = reader_tFileInputXML_10.read(inputStream_tFileInputXML_10);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_10 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_10)),"ISO-8859-15");
		toClose_tFileInputXML_10 = unicodeReader_tFileInputXML_10;
		org.xml.sax.InputSource in_tFileInputXML_10= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_10);
		doc_tFileInputXML_10 = reader_tFileInputXML_10.read(in_tFileInputXML_10);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_10 = false;
} finally {
	if(toClose_tFileInputXML_10!=null) {
		toClose_tFileInputXML_10.close();
	}
}
if(isValidFile_tFileInputXML_10){
NameSpaceTool_tFileInputXML_10 nsTool_tFileInputXML_10 = new NameSpaceTool_tFileInputXML_10();
nsTool_tFileInputXML_10.countNSMap(doc_tFileInputXML_10.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_10 = nsTool_tFileInputXML_10.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_10 = doc_tFileInputXML_10.createXPath(nsTool_tFileInputXML_10.addDefaultNSPrefix("/"));  
x_tFileInputXML_10.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_10); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_10 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_10.selectNodes(doc_tFileInputXML_10);	
XML_API_tFileInputXML_10 xml_api_tFileInputXML_10 = new XML_API_tFileInputXML_10();
String str_tFileInputXML_10 = "";
org.dom4j.Node node_tFileInputXML_10 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_10=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_10{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_10 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_10 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_10 xPathUtil_tFileInputXML_10 = new XPathUtil_tFileInputXML_10();
	xPathUtil_tFileInputXML_10.initXPaths(xpaths_tFileInputXML_10, nsTool_tFileInputXML_10, xmlNameSpaceMap_tFileInputXML_10);
for (org.dom4j.Node temp_tFileInputXML_10: nodeList_tFileInputXML_10) {
		nb_line_tFileInputXML_10++;
		
	row23 = null;			
	boolean whetherReject_tFileInputXML_10 = false;
	row23 = new row23Struct();
	try{
    Object obj0_tFileInputXML_10 = xpaths_tFileInputXML_10.get(0).evaluate(temp_tFileInputXML_10);
    if(obj0_tFileInputXML_10 == null) {
    	node_tFileInputXML_10 = null;
		str_tFileInputXML_10 = null;
    	
    } else if(obj0_tFileInputXML_10 instanceof org.dom4j.Node) {
    	node_tFileInputXML_10 = (org.dom4j.Node)obj0_tFileInputXML_10;
		str_tFileInputXML_10 = node_tFileInputXML_10.asXML();
    } else if(obj0_tFileInputXML_10 instanceof String || obj0_tFileInputXML_10 instanceof Number){
    	node_tFileInputXML_10 = temp_tFileInputXML_10;
    	str_tFileInputXML_10 = String.valueOf(obj0_tFileInputXML_10);
    } else if(obj0_tFileInputXML_10 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_10 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_10;
    	node_tFileInputXML_10 = nodes_tFileInputXML_10.size()>0 ? nodes_tFileInputXML_10.get(0) : null;
		str_tFileInputXML_10 = node_tFileInputXML_10==null?null:node_tFileInputXML_10.asXML();
	}
								row23.vmp_doc = ParserUtils.parseTo_Document(str_tFileInputXML_10,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_10 = true;
                System.err.println(e.getMessage());
                row23 = null;
    }
			
			

 



/**
 * [tFileInputXML_10 begin ] stop
 */
	
	/**
	 * [tFileInputXML_10 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_10";

	

 


	tos_count_tFileInputXML_10++;

/**
 * [tFileInputXML_10 main ] stop
 */
	
	/**
	 * [tFileInputXML_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_10";

	

 



/**
 * [tFileInputXML_10 process_data_begin ] stop
 */
// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tXMLMap_10_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row23");
					}
					

	boolean rejectedInnerJoin_tXMLMap_10_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_10_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_10_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_10_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_10_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_10_TXMLMAP_OUT_0.setOriginalLoop("/VIRTUAL_MED_PRODUCTS/ONT_DRUG_FORM/ONT");
					docToFlat_tXMLMap_10_TXMLMAP_OUT_0.setIsOptional(true);
					if(row23.vmp_doc == null 
						|| row23.vmp_doc.getDocument() == null) {
						throw new RuntimeException("row23.vmp_doc can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_10_TXMLMAP_OUT_0 = row23.vmp_doc.getDocument();
					docToFlat_tXMLMap_10_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_10_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_10_TXMLMAP_OUT_0.setDefineNS(false);
					docToFlat_tXMLMap_10_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_10_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_10_TXMLMAP_OUT.countNSMap(doc_tXMLMap_10_TXMLMAP_OUT_0.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_10_TXMLMAP_OUT_0 = nsTool_tXMLMap_10_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_10_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_10_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_10_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_10_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_10_TXMLMAP_OUT_0.add("row23.vmp_doc:/VIRTUAL_MED_PRODUCTS/ONT_DRUG_FORM/ONT/VPID");
					relativePathMappingsList_tXMLMap_10_TXMLMAP_OUT_0.add("VPID");
					
					absolutePathMappingsList_tXMLMap_10_TXMLMAP_OUT_0.add("row23.vmp_doc:/VIRTUAL_MED_PRODUCTS/ONT_DRUG_FORM/ONT/FORMCD");
					relativePathMappingsList_tXMLMap_10_TXMLMAP_OUT_0.add("FORMCD");
					
					String[] absolutePathMappings_tXMLMap_10_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_10_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_10_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_10_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_10_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_10_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_10_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_10_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_10_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_10_TXMLMAP_OUT_0 = docToFlat_tXMLMap_10_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_10_TXMLMAP_OUT_0: resultSet_tXMLMap_10_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_10_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_10_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_10_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_10_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_10_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_10_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_10_TXMLMAP_OUT_0 : oneRow_tXMLMap_10_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_10_TXMLMAP_OUT.put(entry_tXMLMap_10_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_10_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_10_TXMLMAP_OUT__Struct Var = Var__tXMLMap_10_TXMLMAP_OUT;
		// ###############################
		// # Output table

copyOfont_drug_form_3 = null;


// # Output table : 'copyOfont_drug_form_3'

copyOfont_drug_form_3_tmp = new copyOfont_drug_form_3Struct();
copyOfont_drug_form_3_tmp.vpid = treeNodeAPI_tXMLMap_10_TXMLMAP_OUT.get_String("row23.vmp_doc:/VIRTUAL_MED_PRODUCTS/ONT_DRUG_FORM/ONT/VPID");
copyOfont_drug_form_3_tmp.formcd = treeNodeAPI_tXMLMap_10_TXMLMAP_OUT.get_Long("row23.vmp_doc:/VIRTUAL_MED_PRODUCTS/ONT_DRUG_FORM/ONT/FORMCD");
copyOfont_drug_form_3_tmp.col_val_hash = null;allOutsForAggregate_tXMLMap_10.add(copyOfont_drug_form_3_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_10_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_10_TXMLMAP_OUT++;

/**
 * [tXMLMap_10_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_10_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_10_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_10_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_10_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row23"




	
	/**
	 * [tFileInputXML_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_10";

	

 



/**
 * [tFileInputXML_10 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_10 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_10";

	


}
	}
	globalMap.put("tFileInputXML_10_NB_LINE",nb_line_tFileInputXML_10);

	
 

ok_Hash.put("tFileInputXML_10", true);
end_Hash.put("tFileInputXML_10", System.currentTimeMillis());




/**
 * [tFileInputXML_10 end ] stop
 */

	
	/**
	 * [tXMLMap_10_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tXMLMap_10_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_10_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_10_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tLogRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_19", false);
		start_Hash.put("tLogRow_19", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tLogRow_19 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_19 = "|";
		java.io.PrintStream consoleOut_tLogRow_19 = null;	

 		StringBuilder strBuffer_tLogRow_19 = null;
		int nb_line_tLogRow_19 = 0;
///////////////////////    			



 



/**
 * [tLogRow_19 begin ] stop
 */



	
	/**
	 * [tDBOutput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_19", false);
		start_Hash.put("tDBOutput_19", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfont_drug_form_3");
					}
				
		int tos_count_tDBOutput_19 = 0;
		





String dbschema_tDBOutput_19 = null;
	dbschema_tDBOutput_19 = context.dmd_db_schema;
	

String tableName_tDBOutput_19 = null;
if(dbschema_tDBOutput_19 == null || dbschema_tDBOutput_19.trim().length() == 0) {
	tableName_tDBOutput_19 = ("dmd_vmp_ontdrugform");
} else {
	tableName_tDBOutput_19 = dbschema_tDBOutput_19 + "\".\"" + ("dmd_vmp_ontdrugform");
}

int nb_line_tDBOutput_19 = 0;
int nb_line_update_tDBOutput_19 = 0;
int nb_line_inserted_tDBOutput_19 = 0;
int nb_line_deleted_tDBOutput_19 = 0;
int nb_line_rejected_tDBOutput_19 = 0;

int deletedCount_tDBOutput_19=0;
int updatedCount_tDBOutput_19=0;
int insertedCount_tDBOutput_19=0;
int rejectedCount_tDBOutput_19=0;

boolean whetherReject_tDBOutput_19 = false;

java.sql.Connection conn_tDBOutput_19 = null;
String dbUser_tDBOutput_19 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_19 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_19 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_19 = context.dmd_db_password; 

    String dbPwd_tDBOutput_19 = decryptedPassword_tDBOutput_19;

    conn_tDBOutput_19 = java.sql.DriverManager.getConnection(url_tDBOutput_19,dbUser_tDBOutput_19,dbPwd_tDBOutput_19);
	
	resourceMap.put("conn_tDBOutput_19", conn_tDBOutput_19);
        conn_tDBOutput_19.setAutoCommit(false);
        int commitEvery_tDBOutput_19 = 10000;
        int commitCounter_tDBOutput_19 = 0;


   int batchSize_tDBOutput_19 = 10000;
   int batchSizeCounter_tDBOutput_19=0;

int count_tDBOutput_19=0;
            int rsTruncCountNumber_tDBOutput_19 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_19 = conn_tDBOutput_19.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_19 = stmtTruncCount_tDBOutput_19.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_19 + "\"")) {
                    if(rsTruncCount_tDBOutput_19.next()) {
                        rsTruncCountNumber_tDBOutput_19 = rsTruncCount_tDBOutput_19.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_19 = conn_tDBOutput_19.createStatement()) {
                stmtTrunc_tDBOutput_19.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_19 + "\"");
                deletedCount_tDBOutput_19 += rsTruncCountNumber_tDBOutput_19;
            }
	    String insert_tDBOutput_19 = "INSERT INTO \"" + tableName_tDBOutput_19 + "\" (\"vpid\",\"formcd\",\"col_val_hash\") VALUES (?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_19 = conn_tDBOutput_19.prepareStatement(insert_tDBOutput_19);
	    resourceMap.put("pstmt_tDBOutput_19", pstmt_tDBOutput_19);
	    

 



/**
 * [tDBOutput_19 begin ] stop
 */



	
	/**
	 * [tXMLMap_10_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_10_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_10_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_IN";

	
		int tos_count_tXMLMap_10_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_10 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_10");
for(Object  row_out_tXMLMap_10_TXMLMAP_IN : outs_tXMLMap_10) {//TD512
 



/**
 * [tXMLMap_10_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_10_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_IN";

	

	copyOfont_drug_form_3 = null;
	if(row_out_tXMLMap_10_TXMLMAP_IN!=null && row_out_tXMLMap_10_TXMLMAP_IN instanceof copyOfont_drug_form_3Struct) {
		copyOfont_drug_form_3 = (copyOfont_drug_form_3Struct)row_out_tXMLMap_10_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_10_TXMLMAP_IN++;

/**
 * [tXMLMap_10_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_10_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_10_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfont_drug_form_3"
if(copyOfont_drug_form_3 != null) { 



	
	/**
	 * [tDBOutput_19 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfont_drug_form_3");
					}
					



            row32 = null;
        whetherReject_tDBOutput_19 = false;
                    if(copyOfont_drug_form_3.vpid == null) {
pstmt_tDBOutput_19.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_19.setString(1, copyOfont_drug_form_3.vpid);
}

                    if(copyOfont_drug_form_3.formcd == null) {
pstmt_tDBOutput_19.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_19.setLong(2, copyOfont_drug_form_3.formcd);
}

                    if(copyOfont_drug_form_3.col_val_hash == null) {
pstmt_tDBOutput_19.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_19.setObject(3, copyOfont_drug_form_3.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_19.addBatch();
    		nb_line_tDBOutput_19++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_19++;
    		  
            if(!whetherReject_tDBOutput_19) {
                            row32 = new row32Struct();
                                row32.vpid = copyOfont_drug_form_3.vpid;
                                row32.formcd = copyOfont_drug_form_3.formcd;
                                row32.col_val_hash = copyOfont_drug_form_3.col_val_hash;
            }
    			if ((batchSize_tDBOutput_19 > 0) && (batchSize_tDBOutput_19 <= batchSizeCounter_tDBOutput_19)) {
                try {
						int countSum_tDBOutput_19 = 0;
						    
						for(int countEach_tDBOutput_19: pstmt_tDBOutput_19.executeBatch()) {
							countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
						}
				    	
				    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
				    	
            	    	batchSizeCounter_tDBOutput_19 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_19){
				    	java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(),sqle_tDBOutput_19=null;
				    	String errormessage_tDBOutput_19;
						if (ne_tDBOutput_19 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_19 = new java.sql.SQLException(e_tDBOutput_19.getMessage() + "\ncaused by: " + ne_tDBOutput_19.getMessage(), ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(), ne_tDBOutput_19);
							errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
						}else{
							errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
						}
				    	
				    		if (ne_tDBOutput_19 != null) {
				    			throw(sqle_tDBOutput_19);
				    		}else{
				            	throw(e_tDBOutput_19);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_19++;
                if(commitEvery_tDBOutput_19 <= commitCounter_tDBOutput_19) {
                if ((batchSize_tDBOutput_19 > 0) && (batchSizeCounter_tDBOutput_19 > 0)) {
                try {
                		int countSum_tDBOutput_19 = 0;
                		    
						for(int countEach_tDBOutput_19: pstmt_tDBOutput_19.executeBatch()) {
							countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
						}
            	    	
            	    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
            	    	
                batchSizeCounter_tDBOutput_19 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_19){
			    	java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(),sqle_tDBOutput_19=null;
			    	String errormessage_tDBOutput_19;
					if (ne_tDBOutput_19 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_19 = new java.sql.SQLException(e_tDBOutput_19.getMessage() + "\ncaused by: " + ne_tDBOutput_19.getMessage(), ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(), ne_tDBOutput_19);
						errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
					}else{
						errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
					}
			    	
			    		if (ne_tDBOutput_19 != null) {
			    			throw(sqle_tDBOutput_19);
			    		}else{
			            	throw(e_tDBOutput_19);
			            }
			    	
				}
            }
                	conn_tDBOutput_19.commit();
                	
                	commitCounter_tDBOutput_19=0;
                }

 


	tos_count_tDBOutput_19++;

/**
 * [tDBOutput_19 main ] stop
 */
	
	/**
	 * [tDBOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	

 



/**
 * [tDBOutput_19 process_data_begin ] stop
 */
// Start of branch "row32"
if(row32 != null) { 



	
	/**
	 * [tLogRow_19 main ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row32");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_19 = new StringBuilder();




   				
	    		if(row32.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row32.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row32.formcd != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row32.formcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row32.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row32.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_19 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_19 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_19);
                    }
                    consoleOut_tLogRow_19.println(strBuffer_tLogRow_19.toString());
                    consoleOut_tLogRow_19.flush();
                    nb_line_tLogRow_19++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_19++;

/**
 * [tLogRow_19 main ] stop
 */
	
	/**
	 * [tLogRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 process_data_end ] stop
 */

} // End of branch "row32"




	
	/**
	 * [tDBOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	

 



/**
 * [tDBOutput_19 process_data_end ] stop
 */

} // End of branch "copyOfont_drug_form_3"




	
	/**
	 * [tXMLMap_10_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_10_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_10_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_10_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_10_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_10_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tDBOutput_19 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	



	    try {
				int countSum_tDBOutput_19 = 0;
				if (pstmt_tDBOutput_19 != null && batchSizeCounter_tDBOutput_19 > 0) {
						
					for(int countEach_tDBOutput_19: pstmt_tDBOutput_19.executeBatch()) {
						countSum_tDBOutput_19 += (countEach_tDBOutput_19 < 0 ? 0 : countEach_tDBOutput_19);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_19 += countSum_tDBOutput_19;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_19){
	    	java.sql.SQLException ne_tDBOutput_19 = e_tDBOutput_19.getNextException(),sqle_tDBOutput_19=null;
	    	String errormessage_tDBOutput_19;
			if (ne_tDBOutput_19 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_19 = new java.sql.SQLException(e_tDBOutput_19.getMessage() + "\ncaused by: " + ne_tDBOutput_19.getMessage(), ne_tDBOutput_19.getSQLState(), ne_tDBOutput_19.getErrorCode(), ne_tDBOutput_19);
				errormessage_tDBOutput_19 = sqle_tDBOutput_19.getMessage();
			}else{
				errormessage_tDBOutput_19 = e_tDBOutput_19.getMessage();
			}
	    	
	    		if (ne_tDBOutput_19 != null) {
	    			throw(sqle_tDBOutput_19);
	    		}else{
	            	throw(e_tDBOutput_19);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_19 != null) {
        		
            pstmt_tDBOutput_19.close();
            resourceMap.remove("pstmt_tDBOutput_19");
        }
    resourceMap.put("statementClosed_tDBOutput_19", true);
			
			conn_tDBOutput_19.commit();
			
		
    	conn_tDBOutput_19 .close();
    	
    	resourceMap.put("finish_tDBOutput_19", true);
    	

	nb_line_deleted_tDBOutput_19=nb_line_deleted_tDBOutput_19+ deletedCount_tDBOutput_19;
	nb_line_update_tDBOutput_19=nb_line_update_tDBOutput_19 + updatedCount_tDBOutput_19;
	nb_line_inserted_tDBOutput_19=nb_line_inserted_tDBOutput_19 + insertedCount_tDBOutput_19;
	nb_line_rejected_tDBOutput_19=nb_line_rejected_tDBOutput_19 + rejectedCount_tDBOutput_19;
	
        globalMap.put("tDBOutput_19_NB_LINE",nb_line_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_UPDATED",nb_line_update_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_DELETED",nb_line_deleted_tDBOutput_19);
        globalMap.put("tDBOutput_19_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_19);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfont_drug_form_3");
			  	}
			  	
 

ok_Hash.put("tDBOutput_19", true);
end_Hash.put("tDBOutput_19", System.currentTimeMillis());




/**
 * [tDBOutput_19 end ] stop
 */

	
	/**
	 * [tLogRow_19 end ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	


//////
//////
globalMap.put("tLogRow_19_NB_LINE",nb_line_tLogRow_19);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tLogRow_19", true);
end_Hash.put("tLogRow_19", System.currentTimeMillis());




/**
 * [tLogRow_19 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate5", 2, "exec" + NB_ITERATE_tFileInputXML_10);
						}				
					




	
	/**
	 * [tFileList_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 process_data_end ] stop
 */
	
	/**
	 * [tFileList_5 end ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

  
    }
  globalMap.put("tFileList_5_NB_FILE", NB_FILEtFileList_5);
  

    if (NB_FILEtFileList_5 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_5);
  
 

 

ok_Hash.put("tFileList_5", true);
end_Hash.put("tFileList_5", System.currentTimeMillis());




/**
 * [tFileList_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFileList_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_5 finally ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 finally ] stop
 */

	
	/**
	 * [tFileInputXML_10 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_10";

	

 



/**
 * [tFileInputXML_10 finally ] stop
 */

	
	/**
	 * [tXMLMap_10_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_10_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_10_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_10_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tDBOutput_19 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_19";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_19") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_19 = null;
                if ((pstmtToClose_tDBOutput_19 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_19")) != null) {
                    pstmtToClose_tDBOutput_19.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_19") == null){
            java.sql.Connection ctn_tDBOutput_19 = null;
            if((ctn_tDBOutput_19 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_19")) != null){
                try {
                    ctn_tDBOutput_19.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_19) {
                    String errorMessage_tDBOutput_19 = "failed to close the connection in tDBOutput_19 :" + sqlEx_tDBOutput_19.getMessage();
                    System.err.println(errorMessage_tDBOutput_19);
                }
            }
        }
    }
 



/**
 * [tDBOutput_19 finally ] stop
 */

	
	/**
	 * [tLogRow_19 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_5_SUBPROCESS_STATE", 1);
	}
	

public void tDie_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_11", false);
		start_Hash.put("tDie_11", System.currentTimeMillis());
		
	
	currentComponent="tDie_11";

	
		int tos_count_tDie_11 = 0;
		

 



/**
 * [tDie_11 begin ] stop
 */
	
	/**
	 * [tDie_11 main ] start
	 */

	

	
	
	currentComponent="tDie_11";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_11", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
				talendLogs_LOGS.addMessage("tDie", "tDie_11", 5, "the end is near", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_11_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_11_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_11_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_11) {
		logIgnoredError(String.format("tDie_11 - tDie failed to log message due to internal error: %s", e_tDie_11), e_tDie_11);
	}
	
	currentComponent = "tDie_11";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_11_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_11++;

/**
 * [tDie_11 main ] stop
 */
	
	/**
	 * [tDie_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_11";

	

 



/**
 * [tDie_11 process_data_begin ] stop
 */
	
	/**
	 * [tDie_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_11";

	

 



/**
 * [tDie_11 process_data_end ] stop
 */
	
	/**
	 * [tDie_11 end ] start
	 */

	

	
	
	currentComponent="tDie_11";

	

 

ok_Hash.put("tDie_11", true);
end_Hash.put("tDie_11", System.currentTimeMillis());




/**
 * [tDie_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_11 finally ] start
	 */

	

	
	
	currentComponent="tDie_11";

	

 



/**
 * [tDie_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_11_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.formcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.formcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfdrug_form_2Struct implements routines.system.IPersistableRow<copyOfdrug_form_2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String formcd;

				public String getFormcd () {
					return this.formcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.formcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.formcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",formcd="+formcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfdrug_form_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public routines.system.Document vmp_doc;

				public routines.system.Document getVmp_doc () {
					return this.vmp_doc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
						this.vmp_doc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.vmp_doc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vmp_doc="+String.valueOf(vmp_doc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();
copyOfdrug_form_2Struct copyOfdrug_form_2 = new copyOfdrug_form_2Struct();
row31Struct row31 = new row31Struct();



	
	/**
	 * [tFileList_7 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_9 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_7", false);
		start_Hash.put("tFileList_7", System.currentTimeMillis());
		
	
	currentComponent="tFileList_7";

	
		int tos_count_tFileList_7 = 0;
		
	
 
     
    
  String directory_tFileList_7 = context.dmd_file_path;
  final java.util.List<String> maskList_tFileList_7 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_7 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_7.add("f_vmp2_3*.xml");  
  for (final String filemask_tFileList_7 : maskList_tFileList_7) {
	String filemask_compile_tFileList_7 = filemask_tFileList_7;
	
		filemask_compile_tFileList_7 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_7.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_7 = java.util.regex.Pattern.compile(filemask_compile_tFileList_7, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_7.add(fileNamePattern_tFileList_7);
  }
  int NB_FILEtFileList_7 = 0;

  final boolean case_sensitive_tFileList_7 = false;
    final java.util.List<java.io.File> list_tFileList_7 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_7 = new java.util.HashSet<String>();
	java.io.File file_tFileList_7 = new java.io.File(directory_tFileList_7);
    
		file_tFileList_7.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_7 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_7 : patternList_tFileList_7) {
          	if (fileNamePattern_tFileList_7.matcher(fileName_tFileList_7).matches()){
					if(!filePath_tFileList_7.contains(file.getAbsolutePath())) {
			          list_tFileList_7.add(file);
			          filePath_tFileList_7.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_7);
    
    for (int i_tFileList_7 = 0; i_tFileList_7 < list_tFileList_7.size(); i_tFileList_7++){
      java.io.File files_tFileList_7 = list_tFileList_7.get(i_tFileList_7);
      String fileName_tFileList_7 = files_tFileList_7.getName();
      
      String currentFileName_tFileList_7 = files_tFileList_7.getName(); 
      String currentFilePath_tFileList_7 = files_tFileList_7.getAbsolutePath();
      String currentFileDirectory_tFileList_7 = files_tFileList_7.getParent();
      String currentFileExtension_tFileList_7 = null;
      
      if (files_tFileList_7.getName().contains(".") && files_tFileList_7.isFile()){
        currentFileExtension_tFileList_7 = files_tFileList_7.getName().substring(files_tFileList_7.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_7 = "";
      }
      
      NB_FILEtFileList_7 ++;
      globalMap.put("tFileList_7_CURRENT_FILE", currentFileName_tFileList_7);
      globalMap.put("tFileList_7_CURRENT_FILEPATH", currentFilePath_tFileList_7);
      globalMap.put("tFileList_7_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_7);
      globalMap.put("tFileList_7_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_7);
      globalMap.put("tFileList_7_NB_FILE", NB_FILEtFileList_7);
      
 



/**
 * [tFileList_7 begin ] stop
 */
	
	/**
	 * [tFileList_7 main ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

 


	tos_count_tFileList_7++;

/**
 * [tFileList_7 main ] stop
 */
	
	/**
	 * [tFileList_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

 



/**
 * [tFileList_7 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_9++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfdrug_form_2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row22", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row31", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate7", 1, "exec" + NB_ITERATE_tFileInputXML_9);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tXMLMap_9_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_9_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_9_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_9";
	
	currentComponent="tXMLMap_9_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tXMLMap_9_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_9_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_9_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_9_TXMLMAP_OUT__Struct Var__tXMLMap_9_TXMLMAP_OUT = new Var__tXMLMap_9_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfdrug_form_2Struct copyOfdrug_form_2_tmp = new copyOfdrug_form_2Struct();
copyOfdrug_form_2Struct copyOfdrug_form_2_save = null;
//the aggregate variable
copyOfdrug_form_2Struct copyOfdrug_form_2_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_9 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_9",allOutsForAggregate_tXMLMap_9);
// ###############################
class TreeNode_API_tXMLMap_9_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Short get_Short(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Short(content);
	}
	Long get_Long(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Long(content);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	BigDecimal get_BigDecimal(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_BigDecimal(content);
	}
}
			TreeNode_API_tXMLMap_9_TXMLMAP_OUT treeNodeAPI_tXMLMap_9_TXMLMAP_OUT = new TreeNode_API_tXMLMap_9_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_9_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_9_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_9_TXMLMAP_OUT xml_api_tXMLMap_9_TXMLMAP_OUT = new XML_API_tXMLMap_9_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_9_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_9_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_9", false);
		start_Hash.put("tFileInputXML_9", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_9";

	
		int tos_count_tFileInputXML_9 = 0;
		

	

int nb_line_tFileInputXML_9 = 0;

	String os_tFileInputXML_9 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_9=false;
	if(os_tFileInputXML_9.indexOf("windows") > -1 || os_tFileInputXML_9.indexOf("nt") > -1){
		isWindows_tFileInputXML_9=true;
	}
class NameSpaceTool_tFileInputXML_9 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_9{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_9 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_9 = null;
try {
	filename_tFileInputXML_9 = (String)globalMap.get("tFileList_7_CURRENT_FILEPATH");
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_9 != null && filename_tFileInputXML_9 instanceof String && filename_tFileInputXML_9.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_9){
		filename_tFileInputXML_9 = filename_tFileInputXML_9.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_9 = true;
org.dom4j.Document doc_tFileInputXML_9 = null;
java.io.Closeable toClose_tFileInputXML_9 = null;
try{
	if(filename_tFileInputXML_9 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_9 = (java.io.InputStream)filename_tFileInputXML_9;
		toClose_tFileInputXML_9 = inputStream_tFileInputXML_9;
		doc_tFileInputXML_9 = reader_tFileInputXML_9.read(inputStream_tFileInputXML_9);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_9 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_9)),"ISO-8859-15");
		toClose_tFileInputXML_9 = unicodeReader_tFileInputXML_9;
		org.xml.sax.InputSource in_tFileInputXML_9= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_9);
		doc_tFileInputXML_9 = reader_tFileInputXML_9.read(in_tFileInputXML_9);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_9 = false;
} finally {
	if(toClose_tFileInputXML_9!=null) {
		toClose_tFileInputXML_9.close();
	}
}
if(isValidFile_tFileInputXML_9){
NameSpaceTool_tFileInputXML_9 nsTool_tFileInputXML_9 = new NameSpaceTool_tFileInputXML_9();
nsTool_tFileInputXML_9.countNSMap(doc_tFileInputXML_9.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_9 = nsTool_tFileInputXML_9.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_9 = doc_tFileInputXML_9.createXPath(nsTool_tFileInputXML_9.addDefaultNSPrefix("/"));  
x_tFileInputXML_9.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_9); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_9 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_9.selectNodes(doc_tFileInputXML_9);	
XML_API_tFileInputXML_9 xml_api_tFileInputXML_9 = new XML_API_tFileInputXML_9();
String str_tFileInputXML_9 = "";
org.dom4j.Node node_tFileInputXML_9 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_9=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_9{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_9 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_9 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_9 xPathUtil_tFileInputXML_9 = new XPathUtil_tFileInputXML_9();
	xPathUtil_tFileInputXML_9.initXPaths(xpaths_tFileInputXML_9, nsTool_tFileInputXML_9, xmlNameSpaceMap_tFileInputXML_9);
for (org.dom4j.Node temp_tFileInputXML_9: nodeList_tFileInputXML_9) {
		nb_line_tFileInputXML_9++;
		
	row22 = null;			
	boolean whetherReject_tFileInputXML_9 = false;
	row22 = new row22Struct();
	try{
    Object obj0_tFileInputXML_9 = xpaths_tFileInputXML_9.get(0).evaluate(temp_tFileInputXML_9);
    if(obj0_tFileInputXML_9 == null) {
    	node_tFileInputXML_9 = null;
		str_tFileInputXML_9 = null;
    	
    } else if(obj0_tFileInputXML_9 instanceof org.dom4j.Node) {
    	node_tFileInputXML_9 = (org.dom4j.Node)obj0_tFileInputXML_9;
		str_tFileInputXML_9 = node_tFileInputXML_9.asXML();
    } else if(obj0_tFileInputXML_9 instanceof String || obj0_tFileInputXML_9 instanceof Number){
    	node_tFileInputXML_9 = temp_tFileInputXML_9;
    	str_tFileInputXML_9 = String.valueOf(obj0_tFileInputXML_9);
    } else if(obj0_tFileInputXML_9 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_9 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_9;
    	node_tFileInputXML_9 = nodes_tFileInputXML_9.size()>0 ? nodes_tFileInputXML_9.get(0) : null;
		str_tFileInputXML_9 = node_tFileInputXML_9==null?null:node_tFileInputXML_9.asXML();
	}
								row22.vmp_doc = ParserUtils.parseTo_Document(str_tFileInputXML_9,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_9 = true;
                System.err.println(e.getMessage());
                row22 = null;
    }
			
			

 



/**
 * [tFileInputXML_9 begin ] stop
 */
	
	/**
	 * [tFileInputXML_9 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_9";

	

 


	tos_count_tFileInputXML_9++;

/**
 * [tFileInputXML_9 main ] stop
 */
	
	/**
	 * [tFileInputXML_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_9";

	

 



/**
 * [tFileInputXML_9 process_data_begin ] stop
 */
// Start of branch "row22"
if(row22 != null) { 



	
	/**
	 * [tXMLMap_9_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_9";
	
	currentComponent="tXMLMap_9_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row22");
					}
					

	boolean rejectedInnerJoin_tXMLMap_9_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_9_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_9_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_9_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_9_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_9_TXMLMAP_OUT_0.setOriginalLoop("/VIRTUAL_MED_PRODUCTS/DRUG_FORM/DFORM");
					docToFlat_tXMLMap_9_TXMLMAP_OUT_0.setIsOptional(true);
					if(row22.vmp_doc == null 
						|| row22.vmp_doc.getDocument() == null) {
						throw new RuntimeException("row22.vmp_doc can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_9_TXMLMAP_OUT_0 = row22.vmp_doc.getDocument();
					docToFlat_tXMLMap_9_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_9_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_9_TXMLMAP_OUT_0.setDefineNS(false);
					docToFlat_tXMLMap_9_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_9_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_9_TXMLMAP_OUT.countNSMap(doc_tXMLMap_9_TXMLMAP_OUT_0.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_9_TXMLMAP_OUT_0 = nsTool_tXMLMap_9_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_9_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_9_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_9_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_9_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_9_TXMLMAP_OUT_0.add("row22.vmp_doc:/VIRTUAL_MED_PRODUCTS/DRUG_FORM/DFORM/VPID");
					relativePathMappingsList_tXMLMap_9_TXMLMAP_OUT_0.add("VPID");
					
					absolutePathMappingsList_tXMLMap_9_TXMLMAP_OUT_0.add("row22.vmp_doc:/VIRTUAL_MED_PRODUCTS/DRUG_FORM/DFORM/FORMCD");
					relativePathMappingsList_tXMLMap_9_TXMLMAP_OUT_0.add("FORMCD");
					
					String[] absolutePathMappings_tXMLMap_9_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_9_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_9_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_9_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_9_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_9_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_9_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_9_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_9_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_9_TXMLMAP_OUT_0 = docToFlat_tXMLMap_9_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_9_TXMLMAP_OUT_0: resultSet_tXMLMap_9_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_9_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_9_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_9_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_9_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_9_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_9_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_9_TXMLMAP_OUT_0 : oneRow_tXMLMap_9_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_9_TXMLMAP_OUT.put(entry_tXMLMap_9_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_9_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_9_TXMLMAP_OUT__Struct Var = Var__tXMLMap_9_TXMLMAP_OUT;
		// ###############################
		// # Output table

copyOfdrug_form_2 = null;


// # Output table : 'copyOfdrug_form_2'

copyOfdrug_form_2_tmp = new copyOfdrug_form_2Struct();
copyOfdrug_form_2_tmp.vpid =   treeNodeAPI_tXMLMap_9_TXMLMAP_OUT.get_String("row22.vmp_doc:/VIRTUAL_MED_PRODUCTS/DRUG_FORM/DFORM/VPID");
copyOfdrug_form_2_tmp.formcd =   treeNodeAPI_tXMLMap_9_TXMLMAP_OUT.get_String("row22.vmp_doc:/VIRTUAL_MED_PRODUCTS/DRUG_FORM/DFORM/FORMCD");
copyOfdrug_form_2_tmp.col_val_hash = null;allOutsForAggregate_tXMLMap_9.add(copyOfdrug_form_2_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_9_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_9_TXMLMAP_OUT++;

/**
 * [tXMLMap_9_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_9_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_9";
	
	currentComponent="tXMLMap_9_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_9_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_9_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_9";
	
	currentComponent="tXMLMap_9_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_9_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row22"




	
	/**
	 * [tFileInputXML_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_9";

	

 



/**
 * [tFileInputXML_9 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_9 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_9";

	


}
	}
	globalMap.put("tFileInputXML_9_NB_LINE",nb_line_tFileInputXML_9);

	
 

ok_Hash.put("tFileInputXML_9", true);
end_Hash.put("tFileInputXML_9", System.currentTimeMillis());




/**
 * [tFileInputXML_9 end ] stop
 */

	
	/**
	 * [tXMLMap_9_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_9";
	
	currentComponent="tXMLMap_9_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tXMLMap_9_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_9_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_9_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tLogRow_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_18", false);
		start_Hash.put("tLogRow_18", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tLogRow_18 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_18 = "|";
		java.io.PrintStream consoleOut_tLogRow_18 = null;	

 		StringBuilder strBuffer_tLogRow_18 = null;
		int nb_line_tLogRow_18 = 0;
///////////////////////    			



 



/**
 * [tLogRow_18 begin ] stop
 */



	
	/**
	 * [tDBOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_18", false);
		start_Hash.put("tDBOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfdrug_form_2");
					}
				
		int tos_count_tDBOutput_18 = 0;
		





String dbschema_tDBOutput_18 = null;
	dbschema_tDBOutput_18 = context.dmd_db_schema;
	

String tableName_tDBOutput_18 = null;
if(dbschema_tDBOutput_18 == null || dbschema_tDBOutput_18.trim().length() == 0) {
	tableName_tDBOutput_18 = ("dmd_vmp_drugform");
} else {
	tableName_tDBOutput_18 = dbschema_tDBOutput_18 + "\".\"" + ("dmd_vmp_drugform");
}

int nb_line_tDBOutput_18 = 0;
int nb_line_update_tDBOutput_18 = 0;
int nb_line_inserted_tDBOutput_18 = 0;
int nb_line_deleted_tDBOutput_18 = 0;
int nb_line_rejected_tDBOutput_18 = 0;

int deletedCount_tDBOutput_18=0;
int updatedCount_tDBOutput_18=0;
int insertedCount_tDBOutput_18=0;
int rejectedCount_tDBOutput_18=0;

boolean whetherReject_tDBOutput_18 = false;

java.sql.Connection conn_tDBOutput_18 = null;
String dbUser_tDBOutput_18 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_18 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_18 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_18 = context.dmd_db_password; 

    String dbPwd_tDBOutput_18 = decryptedPassword_tDBOutput_18;

    conn_tDBOutput_18 = java.sql.DriverManager.getConnection(url_tDBOutput_18,dbUser_tDBOutput_18,dbPwd_tDBOutput_18);
	
	resourceMap.put("conn_tDBOutput_18", conn_tDBOutput_18);
        conn_tDBOutput_18.setAutoCommit(false);
        int commitEvery_tDBOutput_18 = 10000;
        int commitCounter_tDBOutput_18 = 0;


   int batchSize_tDBOutput_18 = 10000;
   int batchSizeCounter_tDBOutput_18=0;

int count_tDBOutput_18=0;
            int rsTruncCountNumber_tDBOutput_18 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_18 = conn_tDBOutput_18.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_18 = stmtTruncCount_tDBOutput_18.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_18 + "\"")) {
                    if(rsTruncCount_tDBOutput_18.next()) {
                        rsTruncCountNumber_tDBOutput_18 = rsTruncCount_tDBOutput_18.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_18 = conn_tDBOutput_18.createStatement()) {
                stmtTrunc_tDBOutput_18.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_18 + "\"");
                deletedCount_tDBOutput_18 += rsTruncCountNumber_tDBOutput_18;
            }
	    String insert_tDBOutput_18 = "INSERT INTO \"" + tableName_tDBOutput_18 + "\" (\"vpid\",\"formcd\",\"col_val_hash\") VALUES (?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_18 = conn_tDBOutput_18.prepareStatement(insert_tDBOutput_18);
	    resourceMap.put("pstmt_tDBOutput_18", pstmt_tDBOutput_18);
	    

 



/**
 * [tDBOutput_18 begin ] stop
 */



	
	/**
	 * [tXMLMap_9_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_9_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_9_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_9";
	
	currentComponent="tXMLMap_9_TXMLMAP_IN";

	
		int tos_count_tXMLMap_9_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_9 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_9");
for(Object  row_out_tXMLMap_9_TXMLMAP_IN : outs_tXMLMap_9) {//TD512
 



/**
 * [tXMLMap_9_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_9_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_9";
	
	currentComponent="tXMLMap_9_TXMLMAP_IN";

	

	copyOfdrug_form_2 = null;
	if(row_out_tXMLMap_9_TXMLMAP_IN!=null && row_out_tXMLMap_9_TXMLMAP_IN instanceof copyOfdrug_form_2Struct) {
		copyOfdrug_form_2 = (copyOfdrug_form_2Struct)row_out_tXMLMap_9_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_9_TXMLMAP_IN++;

/**
 * [tXMLMap_9_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_9_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_9";
	
	currentComponent="tXMLMap_9_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_9_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfdrug_form_2"
if(copyOfdrug_form_2 != null) { 



	
	/**
	 * [tDBOutput_18 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfdrug_form_2");
					}
					



            row31 = null;
        whetherReject_tDBOutput_18 = false;
                    if(copyOfdrug_form_2.vpid == null) {
pstmt_tDBOutput_18.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_18.setString(1, copyOfdrug_form_2.vpid);
}

                    if(copyOfdrug_form_2.formcd == null) {
pstmt_tDBOutput_18.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_18.setString(2, copyOfdrug_form_2.formcd);
}

                    if(copyOfdrug_form_2.col_val_hash == null) {
pstmt_tDBOutput_18.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_18.setObject(3, copyOfdrug_form_2.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_18.addBatch();
    		nb_line_tDBOutput_18++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_18++;
    		  
            if(!whetherReject_tDBOutput_18) {
                            row31 = new row31Struct();
                                row31.vpid = copyOfdrug_form_2.vpid;
                                row31.formcd = copyOfdrug_form_2.formcd;
                                row31.col_val_hash = copyOfdrug_form_2.col_val_hash;
            }
    			if ((batchSize_tDBOutput_18 > 0) && (batchSize_tDBOutput_18 <= batchSizeCounter_tDBOutput_18)) {
                try {
						int countSum_tDBOutput_18 = 0;
						    
						for(int countEach_tDBOutput_18: pstmt_tDBOutput_18.executeBatch()) {
							countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
						}
				    	
				    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
				    	
            	    	batchSizeCounter_tDBOutput_18 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_18){
				    	java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(),sqle_tDBOutput_18=null;
				    	String errormessage_tDBOutput_18;
						if (ne_tDBOutput_18 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_18 = new java.sql.SQLException(e_tDBOutput_18.getMessage() + "\ncaused by: " + ne_tDBOutput_18.getMessage(), ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(), ne_tDBOutput_18);
							errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
						}else{
							errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
						}
				    	
				    		if (ne_tDBOutput_18 != null) {
				    			throw(sqle_tDBOutput_18);
				    		}else{
				            	throw(e_tDBOutput_18);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_18++;
                if(commitEvery_tDBOutput_18 <= commitCounter_tDBOutput_18) {
                if ((batchSize_tDBOutput_18 > 0) && (batchSizeCounter_tDBOutput_18 > 0)) {
                try {
                		int countSum_tDBOutput_18 = 0;
                		    
						for(int countEach_tDBOutput_18: pstmt_tDBOutput_18.executeBatch()) {
							countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
						}
            	    	
            	    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
            	    	
                batchSizeCounter_tDBOutput_18 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_18){
			    	java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(),sqle_tDBOutput_18=null;
			    	String errormessage_tDBOutput_18;
					if (ne_tDBOutput_18 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_18 = new java.sql.SQLException(e_tDBOutput_18.getMessage() + "\ncaused by: " + ne_tDBOutput_18.getMessage(), ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(), ne_tDBOutput_18);
						errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
					}else{
						errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
					}
			    	
			    		if (ne_tDBOutput_18 != null) {
			    			throw(sqle_tDBOutput_18);
			    		}else{
			            	throw(e_tDBOutput_18);
			            }
			    	
				}
            }
                	conn_tDBOutput_18.commit();
                	
                	commitCounter_tDBOutput_18=0;
                }

 


	tos_count_tDBOutput_18++;

/**
 * [tDBOutput_18 main ] stop
 */
	
	/**
	 * [tDBOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	

 



/**
 * [tDBOutput_18 process_data_begin ] stop
 */
// Start of branch "row31"
if(row31 != null) { 



	
	/**
	 * [tLogRow_18 main ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row31");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_18 = new StringBuilder();




   				
	    		if(row31.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row31.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row31.formcd != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row31.formcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row31.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row31.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_18 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_18 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_18);
                    }
                    consoleOut_tLogRow_18.println(strBuffer_tLogRow_18.toString());
                    consoleOut_tLogRow_18.flush();
                    nb_line_tLogRow_18++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_18++;

/**
 * [tLogRow_18 main ] stop
 */
	
	/**
	 * [tLogRow_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

 



/**
 * [tLogRow_18 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

 



/**
 * [tLogRow_18 process_data_end ] stop
 */

} // End of branch "row31"




	
	/**
	 * [tDBOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	

 



/**
 * [tDBOutput_18 process_data_end ] stop
 */

} // End of branch "copyOfdrug_form_2"




	
	/**
	 * [tXMLMap_9_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_9";
	
	currentComponent="tXMLMap_9_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_9_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_9_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_9";
	
	currentComponent="tXMLMap_9_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_9_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_9_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_9_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tDBOutput_18 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	



	    try {
				int countSum_tDBOutput_18 = 0;
				if (pstmt_tDBOutput_18 != null && batchSizeCounter_tDBOutput_18 > 0) {
						
					for(int countEach_tDBOutput_18: pstmt_tDBOutput_18.executeBatch()) {
						countSum_tDBOutput_18 += (countEach_tDBOutput_18 < 0 ? 0 : countEach_tDBOutput_18);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_18 += countSum_tDBOutput_18;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_18){
	    	java.sql.SQLException ne_tDBOutput_18 = e_tDBOutput_18.getNextException(),sqle_tDBOutput_18=null;
	    	String errormessage_tDBOutput_18;
			if (ne_tDBOutput_18 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_18 = new java.sql.SQLException(e_tDBOutput_18.getMessage() + "\ncaused by: " + ne_tDBOutput_18.getMessage(), ne_tDBOutput_18.getSQLState(), ne_tDBOutput_18.getErrorCode(), ne_tDBOutput_18);
				errormessage_tDBOutput_18 = sqle_tDBOutput_18.getMessage();
			}else{
				errormessage_tDBOutput_18 = e_tDBOutput_18.getMessage();
			}
	    	
	    		if (ne_tDBOutput_18 != null) {
	    			throw(sqle_tDBOutput_18);
	    		}else{
	            	throw(e_tDBOutput_18);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_18 != null) {
        		
            pstmt_tDBOutput_18.close();
            resourceMap.remove("pstmt_tDBOutput_18");
        }
    resourceMap.put("statementClosed_tDBOutput_18", true);
			
			conn_tDBOutput_18.commit();
			
		
    	conn_tDBOutput_18 .close();
    	
    	resourceMap.put("finish_tDBOutput_18", true);
    	

	nb_line_deleted_tDBOutput_18=nb_line_deleted_tDBOutput_18+ deletedCount_tDBOutput_18;
	nb_line_update_tDBOutput_18=nb_line_update_tDBOutput_18 + updatedCount_tDBOutput_18;
	nb_line_inserted_tDBOutput_18=nb_line_inserted_tDBOutput_18 + insertedCount_tDBOutput_18;
	nb_line_rejected_tDBOutput_18=nb_line_rejected_tDBOutput_18 + rejectedCount_tDBOutput_18;
	
        globalMap.put("tDBOutput_18_NB_LINE",nb_line_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_UPDATED",nb_line_update_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_DELETED",nb_line_deleted_tDBOutput_18);
        globalMap.put("tDBOutput_18_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_18);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfdrug_form_2");
			  	}
			  	
 

ok_Hash.put("tDBOutput_18", true);
end_Hash.put("tDBOutput_18", System.currentTimeMillis());




/**
 * [tDBOutput_18 end ] stop
 */

	
	/**
	 * [tLogRow_18 end ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	


//////
//////
globalMap.put("tLogRow_18_NB_LINE",nb_line_tLogRow_18);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tLogRow_18", true);
end_Hash.put("tLogRow_18", System.currentTimeMillis());




/**
 * [tLogRow_18 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate7", 2, "exec" + NB_ITERATE_tFileInputXML_9);
						}				
					




	
	/**
	 * [tFileList_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

 



/**
 * [tFileList_7 process_data_end ] stop
 */
	
	/**
	 * [tFileList_7 end ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

  
    }
  globalMap.put("tFileList_7_NB_FILE", NB_FILEtFileList_7);
  

    if (NB_FILEtFileList_7 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_7);
  
 

 

ok_Hash.put("tFileList_7", true);
end_Hash.put("tFileList_7", System.currentTimeMillis());




/**
 * [tFileList_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tFileList_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_7 finally ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

 



/**
 * [tFileList_7 finally ] stop
 */

	
	/**
	 * [tFileInputXML_9 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_9";

	

 



/**
 * [tFileInputXML_9 finally ] stop
 */

	
	/**
	 * [tXMLMap_9_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_9";
	
	currentComponent="tXMLMap_9_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_9_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_9_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_9";
	
	currentComponent="tXMLMap_9_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_9_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tDBOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_18";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_18") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_18 = null;
                if ((pstmtToClose_tDBOutput_18 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_18")) != null) {
                    pstmtToClose_tDBOutput_18.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_18") == null){
            java.sql.Connection ctn_tDBOutput_18 = null;
            if((ctn_tDBOutput_18 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_18")) != null){
                try {
                    ctn_tDBOutput_18.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_18) {
                    String errorMessage_tDBOutput_18 = "failed to close the connection in tDBOutput_18 :" + sqlEx_tDBOutput_18.getMessage();
                    System.err.println(errorMessage_tDBOutput_18);
                }
            }
        }
    }
 



/**
 * [tDBOutput_18 finally ] stop
 */

	
	/**
	 * [tLogRow_18 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

 



/**
 * [tLogRow_18 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_7_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
				talendLogs_LOGS.addMessage("tDie", "tDie_1", 5, "the end is near", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.vtmidprev = readString(dis);
					
					this.vtmiddt = readDate(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.vtmidprev,dos);
					
					// java.util.Date
				
						writeDate(this.vtmiddt,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class vtmStruct implements routines.system.IPersistableRow<vtmStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vtmid;

				public String getVtmid () {
					return this.vtmid;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				
			    public String abbrevnm;

				public String getAbbrevnm () {
					return this.abbrevnm;
				}
				
			    public String vtmidprev;

				public String getVtmidprev () {
					return this.vtmidprev;
				}
				
			    public java.util.Date vtmiddt;

				public java.util.Date getVtmiddt () {
					return this.vtmiddt;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vtmid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
					this.abbrevnm = readString(dis);
					
					this.vtmidprev = readString(dis);
					
					this.vtmiddt = readDate(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vtmid,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
					// String
				
						writeString(this.abbrevnm,dos);
					
					// String
				
						writeString(this.vtmidprev,dos);
					
					// java.util.Date
				
						writeDate(this.vtmiddt,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtmid="+vtmid);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
		sb.append(",abbrevnm="+abbrevnm);
		sb.append(",vtmidprev="+vtmidprev);
		sb.append(",vtmiddt="+String.valueOf(vtmiddt));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(vtmStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public routines.system.Document vtm_doc;

				public routines.system.Document getVtm_doc () {
					return this.vtm_doc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
						this.vtm_doc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.vtm_doc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vtm_doc="+String.valueOf(vtm_doc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();
vtmStruct vtm = new vtmStruct();
row26Struct row26 = new row26Struct();



	
	/**
	 * [tFileList_9 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_5 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_9", false);
		start_Hash.put("tFileList_9", System.currentTimeMillis());
		
	
	currentComponent="tFileList_9";

	
		int tos_count_tFileList_9 = 0;
		
	
 
     
    
  String directory_tFileList_9 = context.dmd_file_path;
  final java.util.List<String> maskList_tFileList_9 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_9 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_9.add("f_vtm2_3*.xml");  
  for (final String filemask_tFileList_9 : maskList_tFileList_9) {
	String filemask_compile_tFileList_9 = filemask_tFileList_9;
	
		filemask_compile_tFileList_9 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_9.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_9 = java.util.regex.Pattern.compile(filemask_compile_tFileList_9, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_9.add(fileNamePattern_tFileList_9);
  }
  int NB_FILEtFileList_9 = 0;

  final boolean case_sensitive_tFileList_9 = false;
    final java.util.List<java.io.File> list_tFileList_9 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_9 = new java.util.HashSet<String>();
	java.io.File file_tFileList_9 = new java.io.File(directory_tFileList_9);
    
		file_tFileList_9.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_9 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_9 : patternList_tFileList_9) {
          	if (fileNamePattern_tFileList_9.matcher(fileName_tFileList_9).matches()){
					if(!filePath_tFileList_9.contains(file.getAbsolutePath())) {
			          list_tFileList_9.add(file);
			          filePath_tFileList_9.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_9);
    
    for (int i_tFileList_9 = 0; i_tFileList_9 < list_tFileList_9.size(); i_tFileList_9++){
      java.io.File files_tFileList_9 = list_tFileList_9.get(i_tFileList_9);
      String fileName_tFileList_9 = files_tFileList_9.getName();
      
      String currentFileName_tFileList_9 = files_tFileList_9.getName(); 
      String currentFilePath_tFileList_9 = files_tFileList_9.getAbsolutePath();
      String currentFileDirectory_tFileList_9 = files_tFileList_9.getParent();
      String currentFileExtension_tFileList_9 = null;
      
      if (files_tFileList_9.getName().contains(".") && files_tFileList_9.isFile()){
        currentFileExtension_tFileList_9 = files_tFileList_9.getName().substring(files_tFileList_9.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_9 = "";
      }
      
      NB_FILEtFileList_9 ++;
      globalMap.put("tFileList_9_CURRENT_FILE", currentFileName_tFileList_9);
      globalMap.put("tFileList_9_CURRENT_FILEPATH", currentFilePath_tFileList_9);
      globalMap.put("tFileList_9_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_9);
      globalMap.put("tFileList_9_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_9);
      globalMap.put("tFileList_9_NB_FILE", NB_FILEtFileList_9);
      
 



/**
 * [tFileList_9 begin ] stop
 */
	
	/**
	 * [tFileList_9 main ] start
	 */

	

	
	
	currentComponent="tFileList_9";

	

 


	tos_count_tFileList_9++;

/**
 * [tFileList_9 main ] stop
 */
	
	/**
	 * [tFileList_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_9";

	

 



/**
 * [tFileList_9 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_5++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row25", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row26", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("vtm", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate9", 1, "exec" + NB_ITERATE_tFileInputXML_5);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_5_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_5_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tXMLMap_5_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_5_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_5_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_5_TXMLMAP_OUT__Struct Var__tXMLMap_5_TXMLMAP_OUT = new Var__tXMLMap_5_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
vtmStruct vtm_tmp = new vtmStruct();
vtmStruct vtm_save = null;
//the aggregate variable
vtmStruct vtm_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_5 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_5",allOutsForAggregate_tXMLMap_5);
// ###############################
class TreeNode_API_tXMLMap_5_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	Short get_Short(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Short(content);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
}
			TreeNode_API_tXMLMap_5_TXMLMAP_OUT treeNodeAPI_tXMLMap_5_TXMLMAP_OUT = new TreeNode_API_tXMLMap_5_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_5_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_5_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_5_TXMLMAP_OUT xml_api_tXMLMap_5_TXMLMAP_OUT = new XML_API_tXMLMap_5_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_5_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_5_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_5", false);
		start_Hash.put("tFileInputXML_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_5";

	
		int tos_count_tFileInputXML_5 = 0;
		

	

int nb_line_tFileInputXML_5 = 0;

	String os_tFileInputXML_5 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_5=false;
	if(os_tFileInputXML_5.indexOf("windows") > -1 || os_tFileInputXML_5.indexOf("nt") > -1){
		isWindows_tFileInputXML_5=true;
	}
class NameSpaceTool_tFileInputXML_5 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_5{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_5 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_5 = null;
try {
	filename_tFileInputXML_5 = (String)globalMap.get("tFileList_9_CURRENT_FILEPATH");
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_5 != null && filename_tFileInputXML_5 instanceof String && filename_tFileInputXML_5.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_5){
		filename_tFileInputXML_5 = filename_tFileInputXML_5.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_5 = true;
org.dom4j.Document doc_tFileInputXML_5 = null;
java.io.Closeable toClose_tFileInputXML_5 = null;
try{
	if(filename_tFileInputXML_5 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_5 = (java.io.InputStream)filename_tFileInputXML_5;
		toClose_tFileInputXML_5 = inputStream_tFileInputXML_5;
		doc_tFileInputXML_5 = reader_tFileInputXML_5.read(inputStream_tFileInputXML_5);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_5 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_5)),"ISO-8859-15");
		toClose_tFileInputXML_5 = unicodeReader_tFileInputXML_5;
		org.xml.sax.InputSource in_tFileInputXML_5= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_5);
		doc_tFileInputXML_5 = reader_tFileInputXML_5.read(in_tFileInputXML_5);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_5 = false;
} finally {
	if(toClose_tFileInputXML_5!=null) {
		toClose_tFileInputXML_5.close();
	}
}
if(isValidFile_tFileInputXML_5){
NameSpaceTool_tFileInputXML_5 nsTool_tFileInputXML_5 = new NameSpaceTool_tFileInputXML_5();
nsTool_tFileInputXML_5.countNSMap(doc_tFileInputXML_5.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_5 = nsTool_tFileInputXML_5.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_5 = doc_tFileInputXML_5.createXPath(nsTool_tFileInputXML_5.addDefaultNSPrefix("/"));  
x_tFileInputXML_5.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_5); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_5.selectNodes(doc_tFileInputXML_5);	
XML_API_tFileInputXML_5 xml_api_tFileInputXML_5 = new XML_API_tFileInputXML_5();
String str_tFileInputXML_5 = "";
org.dom4j.Node node_tFileInputXML_5 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_5=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_5{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_5 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_5 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_5 xPathUtil_tFileInputXML_5 = new XPathUtil_tFileInputXML_5();
	xPathUtil_tFileInputXML_5.initXPaths(xpaths_tFileInputXML_5, nsTool_tFileInputXML_5, xmlNameSpaceMap_tFileInputXML_5);
for (org.dom4j.Node temp_tFileInputXML_5: nodeList_tFileInputXML_5) {
		nb_line_tFileInputXML_5++;
		
	row25 = null;			
	boolean whetherReject_tFileInputXML_5 = false;
	row25 = new row25Struct();
	try{
    Object obj0_tFileInputXML_5 = xpaths_tFileInputXML_5.get(0).evaluate(temp_tFileInputXML_5);
    if(obj0_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
		str_tFileInputXML_5 = null;
    	
    } else if(obj0_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj0_tFileInputXML_5;
		str_tFileInputXML_5 = node_tFileInputXML_5.asXML();
    } else if(obj0_tFileInputXML_5 instanceof String || obj0_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj0_tFileInputXML_5);
    } else if(obj0_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
		str_tFileInputXML_5 = node_tFileInputXML_5==null?null:node_tFileInputXML_5.asXML();
	}
								row25.vtm_doc = ParserUtils.parseTo_Document(str_tFileInputXML_5,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_5 = true;
                System.err.println(e.getMessage());
                row25 = null;
    }
			
			

 



/**
 * [tFileInputXML_5 begin ] stop
 */
	
	/**
	 * [tFileInputXML_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	

 


	tos_count_tFileInputXML_5++;

/**
 * [tFileInputXML_5 main ] stop
 */
	
	/**
	 * [tFileInputXML_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	

 



/**
 * [tFileInputXML_5 process_data_begin ] stop
 */
// Start of branch "row25"
if(row25 != null) { 



	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row25");
					}
					

	boolean rejectedInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_5_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_5_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_5_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setOriginalLoop("/VIRTUAL_THERAPEUTIC_MOIETIES/VTM");
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setIsOptional(true);
				if(row25.vtm_doc == null || row25.vtm_doc.getDocument() == null) {
					throw new RuntimeException("row25.vtm_doc can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_5_TXMLMAP_OUT = row25.vtm_doc.getDocument();
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setDoc(doc_tXMLMap_5_TXMLMAP_OUT);
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_5_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_5_TXMLMAP_OUT.countNSMap(doc_tXMLMap_5_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT = nsTool_tXMLMap_5_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_5_TXMLMAP_OUT = new String[6];
				String[] relativePathMappings_tXMLMap_5_TXMLMAP_OUT = new String[6];
				
				absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[0] = "row25.vtm_doc:/VIRTUAL_THERAPEUTIC_MOIETIES/VTM/NM";
				relativePathMappings_tXMLMap_5_TXMLMAP_OUT[0] = "NM";
				
				absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[1] = "row25.vtm_doc:/VIRTUAL_THERAPEUTIC_MOIETIES/VTM/INVALID";
				relativePathMappings_tXMLMap_5_TXMLMAP_OUT[1] = "INVALID";
				
				absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[2] = "row25.vtm_doc:/VIRTUAL_THERAPEUTIC_MOIETIES/VTM/ABBREVNM";
				relativePathMappings_tXMLMap_5_TXMLMAP_OUT[2] = "ABBREVNM";
				
				absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[3] = "row25.vtm_doc:/VIRTUAL_THERAPEUTIC_MOIETIES/VTM/VTMIDPREV";
				relativePathMappings_tXMLMap_5_TXMLMAP_OUT[3] = "VTMIDPREV";
				
				absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[4] = "row25.vtm_doc:/VIRTUAL_THERAPEUTIC_MOIETIES/VTM/VTMID";
				relativePathMappings_tXMLMap_5_TXMLMAP_OUT[4] = "VTMID";
				
				absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[5] = "row25.vtm_doc:/VIRTUAL_THERAPEUTIC_MOIETIES/VTM/VTMIDDT";
				relativePathMappings_tXMLMap_5_TXMLMAP_OUT[5] = "VTMIDDT";
				
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_5_TXMLMAP_OUT);
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_5_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_5_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_5_TXMLMAP_OUT = docToFlat_tXMLMap_5_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_5_TXMLMAP_OUT: resultSet_tXMLMap_5_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_5_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_5_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_5_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_5_TXMLMAP_OUT : oneRow_tXMLMap_5_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.put(entry_tXMLMap_5_TXMLMAP_OUT.getKey(),entry_tXMLMap_5_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_5_TXMLMAP_OUT__Struct Var = Var__tXMLMap_5_TXMLMAP_OUT;
		// ###############################
		// # Output tables

vtm = null;


// # Output table : 'vtm'

vtm_tmp = new vtmStruct();
vtm_tmp.vtmid = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.get_String("row25.vtm_doc:/VIRTUAL_THERAPEUTIC_MOIETIES/VTM/VTMID");
vtm_tmp.invalid = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.get_Short("row25.vtm_doc:/VIRTUAL_THERAPEUTIC_MOIETIES/VTM/INVALID");
vtm_tmp.nm = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.get_String("row25.vtm_doc:/VIRTUAL_THERAPEUTIC_MOIETIES/VTM/NM");
vtm_tmp.abbrevnm = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.get_String("row25.vtm_doc:/VIRTUAL_THERAPEUTIC_MOIETIES/VTM/ABBREVNM");
vtm_tmp.vtmidprev = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.get_String("row25.vtm_doc:/VIRTUAL_THERAPEUTIC_MOIETIES/VTM/VTMIDPREV");
vtm_tmp.vtmiddt = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.get_Date("row25.vtm_doc:/VIRTUAL_THERAPEUTIC_MOIETIES/VTM/VTMIDDT" , "yyyy-MM-dd");
vtm_tmp.col_val_hash = null;allOutsForAggregate_tXMLMap_5.add(vtm_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_5_TXMLMAP_OUT++;

/**
 * [tXMLMap_5_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_5_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_5_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row25"




	
	/**
	 * [tFileInputXML_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	

 



/**
 * [tFileInputXML_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	


}
	}
	globalMap.put("tFileInputXML_5_NB_LINE",nb_line_tFileInputXML_5);

	
 

ok_Hash.put("tFileInputXML_5", true);
end_Hash.put("tFileInputXML_5", System.currentTimeMillis());




/**
 * [tFileInputXML_5 end ] stop
 */

	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tXMLMap_5_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_5_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_5_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tLogRow_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_21", false);
		start_Hash.put("tLogRow_21", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tLogRow_21 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_21 = "|";
		java.io.PrintStream consoleOut_tLogRow_21 = null;	

 		StringBuilder strBuffer_tLogRow_21 = null;
		int nb_line_tLogRow_21 = 0;
///////////////////////    			



 



/**
 * [tLogRow_21 begin ] stop
 */



	
	/**
	 * [tDBOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_21", false);
		start_Hash.put("tDBOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"vtm");
					}
				
		int tos_count_tDBOutput_21 = 0;
		





String dbschema_tDBOutput_21 = null;
	dbschema_tDBOutput_21 = context.dmd_db_schema;
	

String tableName_tDBOutput_21 = null;
if(dbschema_tDBOutput_21 == null || dbschema_tDBOutput_21.trim().length() == 0) {
	tableName_tDBOutput_21 = ("dmd_vtm");
} else {
	tableName_tDBOutput_21 = dbschema_tDBOutput_21 + "\".\"" + ("dmd_vtm");
}

int nb_line_tDBOutput_21 = 0;
int nb_line_update_tDBOutput_21 = 0;
int nb_line_inserted_tDBOutput_21 = 0;
int nb_line_deleted_tDBOutput_21 = 0;
int nb_line_rejected_tDBOutput_21 = 0;

int deletedCount_tDBOutput_21=0;
int updatedCount_tDBOutput_21=0;
int insertedCount_tDBOutput_21=0;
int rejectedCount_tDBOutput_21=0;

boolean whetherReject_tDBOutput_21 = false;

java.sql.Connection conn_tDBOutput_21 = null;
String dbUser_tDBOutput_21 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_21 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_21 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_21 = context.dmd_db_password; 

    String dbPwd_tDBOutput_21 = decryptedPassword_tDBOutput_21;

    conn_tDBOutput_21 = java.sql.DriverManager.getConnection(url_tDBOutput_21,dbUser_tDBOutput_21,dbPwd_tDBOutput_21);
	
	resourceMap.put("conn_tDBOutput_21", conn_tDBOutput_21);
        conn_tDBOutput_21.setAutoCommit(false);
        int commitEvery_tDBOutput_21 = 10000;
        int commitCounter_tDBOutput_21 = 0;


   int batchSize_tDBOutput_21 = 10000;
   int batchSizeCounter_tDBOutput_21=0;

int count_tDBOutput_21=0;
            int rsTruncCountNumber_tDBOutput_21 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_21 = conn_tDBOutput_21.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_21 = stmtTruncCount_tDBOutput_21.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_21 + "\"")) {
                    if(rsTruncCount_tDBOutput_21.next()) {
                        rsTruncCountNumber_tDBOutput_21 = rsTruncCount_tDBOutput_21.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_21 = conn_tDBOutput_21.createStatement()) {
                stmtTrunc_tDBOutput_21.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_21 + "\"");
                deletedCount_tDBOutput_21 += rsTruncCountNumber_tDBOutput_21;
            }
	    String insert_tDBOutput_21 = "INSERT INTO \"" + tableName_tDBOutput_21 + "\" (\"vtmid\",\"invalid\",\"nm\",\"abbrevnm\",\"vtmidprev\",\"vtmiddt\",\"col_val_hash\") VALUES (?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_21 = conn_tDBOutput_21.prepareStatement(insert_tDBOutput_21);
	    resourceMap.put("pstmt_tDBOutput_21", pstmt_tDBOutput_21);
	    

 



/**
 * [tDBOutput_21 begin ] stop
 */



	
	/**
	 * [tXMLMap_5_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_5_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_5_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";

	
		int tos_count_tXMLMap_5_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_5 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_5");
for(Object  row_out_tXMLMap_5_TXMLMAP_IN : outs_tXMLMap_5) {//TD512
 



/**
 * [tXMLMap_5_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";

	

	vtm = null;
	if(row_out_tXMLMap_5_TXMLMAP_IN!=null && row_out_tXMLMap_5_TXMLMAP_IN instanceof vtmStruct) {
		vtm = (vtmStruct)row_out_tXMLMap_5_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_5_TXMLMAP_IN++;

/**
 * [tXMLMap_5_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_5_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "vtm"
if(vtm != null) { 



	
	/**
	 * [tDBOutput_21 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"vtm");
					}
					



            row26 = null;
        whetherReject_tDBOutput_21 = false;
                    if(vtm.vtmid == null) {
pstmt_tDBOutput_21.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(1, vtm.vtmid);
}

                    if(vtm.invalid == null) {
pstmt_tDBOutput_21.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_21.setShort(2, vtm.invalid);
}

                    if(vtm.nm == null) {
pstmt_tDBOutput_21.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(3, vtm.nm);
}

                    if(vtm.abbrevnm == null) {
pstmt_tDBOutput_21.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(4, vtm.abbrevnm);
}

                    if(vtm.vtmidprev == null) {
pstmt_tDBOutput_21.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_21.setString(5, vtm.vtmidprev);
}

                    if(vtm.vtmiddt != null) {
pstmt_tDBOutput_21.setTimestamp(6, new java.sql.Timestamp(vtm.vtmiddt.getTime()));
} else {
pstmt_tDBOutput_21.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(vtm.col_val_hash == null) {
pstmt_tDBOutput_21.setNull(7, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_21.setObject(7, vtm.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_21.addBatch();
    		nb_line_tDBOutput_21++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_21++;
    		  
            if(!whetherReject_tDBOutput_21) {
                            row26 = new row26Struct();
                                row26.vtmid = vtm.vtmid;
                                row26.invalid = vtm.invalid;
                                row26.nm = vtm.nm;
                                row26.abbrevnm = vtm.abbrevnm;
                                row26.vtmidprev = vtm.vtmidprev;
                                row26.vtmiddt = vtm.vtmiddt;
                                row26.col_val_hash = vtm.col_val_hash;
            }
    			if ((batchSize_tDBOutput_21 > 0) && (batchSize_tDBOutput_21 <= batchSizeCounter_tDBOutput_21)) {
                try {
						int countSum_tDBOutput_21 = 0;
						    
						for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
							countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
						}
				    	
				    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
				    	
            	    	batchSizeCounter_tDBOutput_21 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_21){
				    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
				    	String errormessage_tDBOutput_21;
						if (ne_tDBOutput_21 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
							errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
						}else{
							errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
						}
				    	
				    		if (ne_tDBOutput_21 != null) {
				    			throw(sqle_tDBOutput_21);
				    		}else{
				            	throw(e_tDBOutput_21);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_21++;
                if(commitEvery_tDBOutput_21 <= commitCounter_tDBOutput_21) {
                if ((batchSize_tDBOutput_21 > 0) && (batchSizeCounter_tDBOutput_21 > 0)) {
                try {
                		int countSum_tDBOutput_21 = 0;
                		    
						for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
							countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
						}
            	    	
            	    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
            	    	
                batchSizeCounter_tDBOutput_21 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_21){
			    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
			    	String errormessage_tDBOutput_21;
					if (ne_tDBOutput_21 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
						errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
					}else{
						errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
					}
			    	
			    		if (ne_tDBOutput_21 != null) {
			    			throw(sqle_tDBOutput_21);
			    		}else{
			            	throw(e_tDBOutput_21);
			            }
			    	
				}
            }
                	conn_tDBOutput_21.commit();
                	
                	commitCounter_tDBOutput_21=0;
                }

 


	tos_count_tDBOutput_21++;

/**
 * [tDBOutput_21 main ] stop
 */
	
	/**
	 * [tDBOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	

 



/**
 * [tDBOutput_21 process_data_begin ] stop
 */
// Start of branch "row26"
if(row26 != null) { 



	
	/**
	 * [tLogRow_21 main ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row26");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_21 = new StringBuilder();




   				
	    		if(row26.vtmid != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
				                String.valueOf(row26.vtmid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_21.append("|");
    			


   				
	    		if(row26.invalid != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
				                String.valueOf(row26.invalid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_21.append("|");
    			


   				
	    		if(row26.nm != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
				                String.valueOf(row26.nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_21.append("|");
    			


   				
	    		if(row26.abbrevnm != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
				                String.valueOf(row26.abbrevnm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_21.append("|");
    			


   				
	    		if(row26.vtmidprev != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
				                String.valueOf(row26.vtmidprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_21.append("|");
    			


   				
	    		if(row26.vtmiddt != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
								FormatterUtils.format_Date(row26.vtmiddt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_21.append("|");
    			


   				
	    		if(row26.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_21.append(
				                String.valueOf(row26.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_21 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_21 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_21);
                    }
                    consoleOut_tLogRow_21.println(strBuffer_tLogRow_21.toString());
                    consoleOut_tLogRow_21.flush();
                    nb_line_tLogRow_21++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_21++;

/**
 * [tLogRow_21 main ] stop
 */
	
	/**
	 * [tLogRow_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	

 



/**
 * [tLogRow_21 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	

 



/**
 * [tLogRow_21 process_data_end ] stop
 */

} // End of branch "row26"




	
	/**
	 * [tDBOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	

 



/**
 * [tDBOutput_21 process_data_end ] stop
 */

} // End of branch "vtm"




	
	/**
	 * [tXMLMap_5_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_5_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_5_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_5_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_5_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tDBOutput_21 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	



	    try {
				int countSum_tDBOutput_21 = 0;
				if (pstmt_tDBOutput_21 != null && batchSizeCounter_tDBOutput_21 > 0) {
						
					for(int countEach_tDBOutput_21: pstmt_tDBOutput_21.executeBatch()) {
						countSum_tDBOutput_21 += (countEach_tDBOutput_21 < 0 ? 0 : countEach_tDBOutput_21);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_21 += countSum_tDBOutput_21;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_21){
	    	java.sql.SQLException ne_tDBOutput_21 = e_tDBOutput_21.getNextException(),sqle_tDBOutput_21=null;
	    	String errormessage_tDBOutput_21;
			if (ne_tDBOutput_21 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_21 = new java.sql.SQLException(e_tDBOutput_21.getMessage() + "\ncaused by: " + ne_tDBOutput_21.getMessage(), ne_tDBOutput_21.getSQLState(), ne_tDBOutput_21.getErrorCode(), ne_tDBOutput_21);
				errormessage_tDBOutput_21 = sqle_tDBOutput_21.getMessage();
			}else{
				errormessage_tDBOutput_21 = e_tDBOutput_21.getMessage();
			}
	    	
	    		if (ne_tDBOutput_21 != null) {
	    			throw(sqle_tDBOutput_21);
	    		}else{
	            	throw(e_tDBOutput_21);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_21 != null) {
        		
            pstmt_tDBOutput_21.close();
            resourceMap.remove("pstmt_tDBOutput_21");
        }
    resourceMap.put("statementClosed_tDBOutput_21", true);
			
			conn_tDBOutput_21.commit();
			
		
    	conn_tDBOutput_21 .close();
    	
    	resourceMap.put("finish_tDBOutput_21", true);
    	

	nb_line_deleted_tDBOutput_21=nb_line_deleted_tDBOutput_21+ deletedCount_tDBOutput_21;
	nb_line_update_tDBOutput_21=nb_line_update_tDBOutput_21 + updatedCount_tDBOutput_21;
	nb_line_inserted_tDBOutput_21=nb_line_inserted_tDBOutput_21 + insertedCount_tDBOutput_21;
	nb_line_rejected_tDBOutput_21=nb_line_rejected_tDBOutput_21 + rejectedCount_tDBOutput_21;
	
        globalMap.put("tDBOutput_21_NB_LINE",nb_line_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_UPDATED",nb_line_update_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_DELETED",nb_line_deleted_tDBOutput_21);
        globalMap.put("tDBOutput_21_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_21);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"vtm");
			  	}
			  	
 

ok_Hash.put("tDBOutput_21", true);
end_Hash.put("tDBOutput_21", System.currentTimeMillis());




/**
 * [tDBOutput_21 end ] stop
 */

	
	/**
	 * [tLogRow_21 end ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	


//////
//////
globalMap.put("tLogRow_21_NB_LINE",nb_line_tLogRow_21);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tLogRow_21", true);
end_Hash.put("tLogRow_21", System.currentTimeMillis());




/**
 * [tLogRow_21 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate9", 2, "exec" + NB_ITERATE_tFileInputXML_5);
						}				
					




	
	/**
	 * [tFileList_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_9";

	

 



/**
 * [tFileList_9 process_data_end ] stop
 */
	
	/**
	 * [tFileList_9 end ] start
	 */

	

	
	
	currentComponent="tFileList_9";

	

  
    }
  globalMap.put("tFileList_9_NB_FILE", NB_FILEtFileList_9);
  

    if (NB_FILEtFileList_9 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_9);
  
 

 

ok_Hash.put("tFileList_9", true);
end_Hash.put("tFileList_9", System.currentTimeMillis());




/**
 * [tFileList_9 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tFileList_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_9 finally ] start
	 */

	

	
	
	currentComponent="tFileList_9";

	

 



/**
 * [tFileList_9 finally ] stop
 */

	
	/**
	 * [tFileInputXML_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	

 



/**
 * [tFileInputXML_5 finally ] stop
 */

	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_5_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_5_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_5_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tDBOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_21";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_21") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_21 = null;
                if ((pstmtToClose_tDBOutput_21 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_21")) != null) {
                    pstmtToClose_tDBOutput_21.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_21") == null){
            java.sql.Connection ctn_tDBOutput_21 = null;
            if((ctn_tDBOutput_21 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_21")) != null){
                try {
                    ctn_tDBOutput_21.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_21) {
                    String errorMessage_tDBOutput_21 = "failed to close the connection in tDBOutput_21 :" + sqlEx_tDBOutput_21.getMessage();
                    System.err.println(errorMessage_tDBOutput_21);
                }
            }
        }
    }
 



/**
 * [tDBOutput_21 finally ] stop
 */

	
	/**
	 * [tLogRow_21 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_21";

	

 



/**
 * [tLogRow_21 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_9_SUBPROCESS_STATE", 1);
	}
	

public void tDie_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_4", false);
		start_Hash.put("tDie_4", System.currentTimeMillis());
		
	
	currentComponent="tDie_4";

	
		int tos_count_tDie_4 = 0;
		

 



/**
 * [tDie_4 begin ] stop
 */
	
	/**
	 * [tDie_4 main ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_4", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
				talendLogs_LOGS.addMessage("tDie", "tDie_4", 5, "the end is near", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_4_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_4_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_4_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_4) {
		logIgnoredError(String.format("tDie_4 - tDie failed to log message due to internal error: %s", e_tDie_4), e_tDie_4);
	}
	
	currentComponent = "tDie_4";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_4_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_4++;

/**
 * [tDie_4 main ] stop
 */
	
	/**
	 * [tDie_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 



/**
 * [tDie_4 process_data_begin ] stop
 */
	
	/**
	 * [tDie_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 



/**
 * [tDie_4 process_data_end ] stop
 */
	
	/**
	 * [tDie_4 end ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 

ok_Hash.put("tDie_4", true);
end_Hash.put("tDie_4", System.currentTimeMillis());




/**
 * [tDie_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_4 finally ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 



/**
 * [tDie_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_4_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.isid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
					this.bs_subid = readString(dis);
					
						this.strnt_nmrtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_nmrtr_uomcd = readString(dis);
					
						this.strnt_dnmtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_dnmtr_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// Long
				
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
					// String
				
						writeString(this.bs_subid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_nmrtr_val);
					
					// String
				
						writeString(this.strnt_nmrtr_uomcd,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_dnmtr_val);
					
					// String
				
						writeString(this.strnt_dnmtr_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfdrug_ingredient_1Struct implements routines.system.IPersistableRow<copyOfdrug_ingredient_1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public Long basis_strntcd;

				public Long getBasis_strntcd () {
					return this.basis_strntcd;
				}
				
			    public String bs_subid;

				public String getBs_subid () {
					return this.bs_subid;
				}
				
			    public BigDecimal strnt_nmrtr_val;

				public BigDecimal getStrnt_nmrtr_val () {
					return this.strnt_nmrtr_val;
				}
				
			    public String strnt_nmrtr_uomcd;

				public String getStrnt_nmrtr_uomcd () {
					return this.strnt_nmrtr_uomcd;
				}
				
			    public BigDecimal strnt_dnmtr_val;

				public BigDecimal getStrnt_dnmtr_val () {
					return this.strnt_dnmtr_val;
				}
				
			    public String strnt_dnmtr_uomcd;

				public String getStrnt_dnmtr_uomcd () {
					return this.strnt_dnmtr_uomcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.isid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.basis_strntcd = null;
           				} else {
           			    	this.basis_strntcd = dis.readLong();
           				}
					
					this.bs_subid = readString(dis);
					
						this.strnt_nmrtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_nmrtr_uomcd = readString(dis);
					
						this.strnt_dnmtr_val = (BigDecimal) dis.readObject();
					
					this.strnt_dnmtr_uomcd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.isid,dos);
					
					// Long
				
						if(this.basis_strntcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.basis_strntcd);
		            	}
					
					// String
				
						writeString(this.bs_subid,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_nmrtr_val);
					
					// String
				
						writeString(this.strnt_nmrtr_uomcd,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.strnt_dnmtr_val);
					
					// String
				
						writeString(this.strnt_dnmtr_uomcd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",isid="+isid);
		sb.append(",basis_strntcd="+String.valueOf(basis_strntcd));
		sb.append(",bs_subid="+bs_subid);
		sb.append(",strnt_nmrtr_val="+String.valueOf(strnt_nmrtr_val));
		sb.append(",strnt_nmrtr_uomcd="+strnt_nmrtr_uomcd);
		sb.append(",strnt_dnmtr_val="+String.valueOf(strnt_dnmtr_val));
		sb.append(",strnt_dnmtr_uomcd="+strnt_dnmtr_uomcd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfdrug_ingredient_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public routines.system.Document vmp_doc;

				public routines.system.Document getVmp_doc () {
					return this.vmp_doc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
						this.vmp_doc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.vmp_doc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vmp_doc="+String.valueOf(vmp_doc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();
copyOfdrug_ingredient_1Struct copyOfdrug_ingredient_1 = new copyOfdrug_ingredient_1Struct();
row30Struct row30 = new row30Struct();



	
	/**
	 * [tFileList_10 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_8 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_10", false);
		start_Hash.put("tFileList_10", System.currentTimeMillis());
		
	
	currentComponent="tFileList_10";

	
		int tos_count_tFileList_10 = 0;
		
	
 
     
    
  String directory_tFileList_10 = context.dmd_file_path;
  final java.util.List<String> maskList_tFileList_10 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_10 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_10.add("f_vmp2_3*.xml");  
  for (final String filemask_tFileList_10 : maskList_tFileList_10) {
	String filemask_compile_tFileList_10 = filemask_tFileList_10;
	
		filemask_compile_tFileList_10 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_10.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_10 = java.util.regex.Pattern.compile(filemask_compile_tFileList_10, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_10.add(fileNamePattern_tFileList_10);
  }
  int NB_FILEtFileList_10 = 0;

  final boolean case_sensitive_tFileList_10 = false;
    final java.util.List<java.io.File> list_tFileList_10 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_10 = new java.util.HashSet<String>();
	java.io.File file_tFileList_10 = new java.io.File(directory_tFileList_10);
    
		file_tFileList_10.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_10 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_10 : patternList_tFileList_10) {
          	if (fileNamePattern_tFileList_10.matcher(fileName_tFileList_10).matches()){
					if(!filePath_tFileList_10.contains(file.getAbsolutePath())) {
			          list_tFileList_10.add(file);
			          filePath_tFileList_10.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_10);
    
    for (int i_tFileList_10 = 0; i_tFileList_10 < list_tFileList_10.size(); i_tFileList_10++){
      java.io.File files_tFileList_10 = list_tFileList_10.get(i_tFileList_10);
      String fileName_tFileList_10 = files_tFileList_10.getName();
      
      String currentFileName_tFileList_10 = files_tFileList_10.getName(); 
      String currentFilePath_tFileList_10 = files_tFileList_10.getAbsolutePath();
      String currentFileDirectory_tFileList_10 = files_tFileList_10.getParent();
      String currentFileExtension_tFileList_10 = null;
      
      if (files_tFileList_10.getName().contains(".") && files_tFileList_10.isFile()){
        currentFileExtension_tFileList_10 = files_tFileList_10.getName().substring(files_tFileList_10.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_10 = "";
      }
      
      NB_FILEtFileList_10 ++;
      globalMap.put("tFileList_10_CURRENT_FILE", currentFileName_tFileList_10);
      globalMap.put("tFileList_10_CURRENT_FILEPATH", currentFilePath_tFileList_10);
      globalMap.put("tFileList_10_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_10);
      globalMap.put("tFileList_10_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_10);
      globalMap.put("tFileList_10_NB_FILE", NB_FILEtFileList_10);
      
 



/**
 * [tFileList_10 begin ] stop
 */
	
	/**
	 * [tFileList_10 main ] start
	 */

	

	
	
	currentComponent="tFileList_10";

	

 


	tos_count_tFileList_10++;

/**
 * [tFileList_10 main ] stop
 */
	
	/**
	 * [tFileList_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_10";

	

 



/**
 * [tFileList_10 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_8++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row30", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfdrug_ingredient_1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row21", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate10", 1, "exec" + NB_ITERATE_tFileInputXML_8);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tXMLMap_8_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_8_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_8_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tXMLMap_8_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_8_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_8_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_8_TXMLMAP_OUT__Struct Var__tXMLMap_8_TXMLMAP_OUT = new Var__tXMLMap_8_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfdrug_ingredient_1Struct copyOfdrug_ingredient_1_tmp = new copyOfdrug_ingredient_1Struct();
copyOfdrug_ingredient_1Struct copyOfdrug_ingredient_1_save = null;
//the aggregate variable
copyOfdrug_ingredient_1Struct copyOfdrug_ingredient_1_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_8 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_8",allOutsForAggregate_tXMLMap_8);
// ###############################
class TreeNode_API_tXMLMap_8_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Short get_Short(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Short(content);
	}
	Long get_Long(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Long(content);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	BigDecimal get_BigDecimal(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_BigDecimal(content);
	}
}
			TreeNode_API_tXMLMap_8_TXMLMAP_OUT treeNodeAPI_tXMLMap_8_TXMLMAP_OUT = new TreeNode_API_tXMLMap_8_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_8_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_8_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_8_TXMLMAP_OUT xml_api_tXMLMap_8_TXMLMAP_OUT = new XML_API_tXMLMap_8_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_8_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_8_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_8", false);
		start_Hash.put("tFileInputXML_8", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_8";

	
		int tos_count_tFileInputXML_8 = 0;
		

	

int nb_line_tFileInputXML_8 = 0;

	String os_tFileInputXML_8 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_8=false;
	if(os_tFileInputXML_8.indexOf("windows") > -1 || os_tFileInputXML_8.indexOf("nt") > -1){
		isWindows_tFileInputXML_8=true;
	}
class NameSpaceTool_tFileInputXML_8 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_8{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_8 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_8 = null;
try {
	filename_tFileInputXML_8 = (String)globalMap.get("tFileList_10_CURRENT_FILEPATH");
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_8 != null && filename_tFileInputXML_8 instanceof String && filename_tFileInputXML_8.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_8){
		filename_tFileInputXML_8 = filename_tFileInputXML_8.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_8 = true;
org.dom4j.Document doc_tFileInputXML_8 = null;
java.io.Closeable toClose_tFileInputXML_8 = null;
try{
	if(filename_tFileInputXML_8 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_8 = (java.io.InputStream)filename_tFileInputXML_8;
		toClose_tFileInputXML_8 = inputStream_tFileInputXML_8;
		doc_tFileInputXML_8 = reader_tFileInputXML_8.read(inputStream_tFileInputXML_8);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_8 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_8)),"ISO-8859-15");
		toClose_tFileInputXML_8 = unicodeReader_tFileInputXML_8;
		org.xml.sax.InputSource in_tFileInputXML_8= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_8);
		doc_tFileInputXML_8 = reader_tFileInputXML_8.read(in_tFileInputXML_8);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_8 = false;
} finally {
	if(toClose_tFileInputXML_8!=null) {
		toClose_tFileInputXML_8.close();
	}
}
if(isValidFile_tFileInputXML_8){
NameSpaceTool_tFileInputXML_8 nsTool_tFileInputXML_8 = new NameSpaceTool_tFileInputXML_8();
nsTool_tFileInputXML_8.countNSMap(doc_tFileInputXML_8.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_8 = nsTool_tFileInputXML_8.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_8 = doc_tFileInputXML_8.createXPath(nsTool_tFileInputXML_8.addDefaultNSPrefix("/"));  
x_tFileInputXML_8.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_8); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_8 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_8.selectNodes(doc_tFileInputXML_8);	
XML_API_tFileInputXML_8 xml_api_tFileInputXML_8 = new XML_API_tFileInputXML_8();
String str_tFileInputXML_8 = "";
org.dom4j.Node node_tFileInputXML_8 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_8=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_8{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_8 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_8 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_8 xPathUtil_tFileInputXML_8 = new XPathUtil_tFileInputXML_8();
	xPathUtil_tFileInputXML_8.initXPaths(xpaths_tFileInputXML_8, nsTool_tFileInputXML_8, xmlNameSpaceMap_tFileInputXML_8);
for (org.dom4j.Node temp_tFileInputXML_8: nodeList_tFileInputXML_8) {
		nb_line_tFileInputXML_8++;
		
	row21 = null;			
	boolean whetherReject_tFileInputXML_8 = false;
	row21 = new row21Struct();
	try{
    Object obj0_tFileInputXML_8 = xpaths_tFileInputXML_8.get(0).evaluate(temp_tFileInputXML_8);
    if(obj0_tFileInputXML_8 == null) {
    	node_tFileInputXML_8 = null;
		str_tFileInputXML_8 = null;
    	
    } else if(obj0_tFileInputXML_8 instanceof org.dom4j.Node) {
    	node_tFileInputXML_8 = (org.dom4j.Node)obj0_tFileInputXML_8;
		str_tFileInputXML_8 = node_tFileInputXML_8.asXML();
    } else if(obj0_tFileInputXML_8 instanceof String || obj0_tFileInputXML_8 instanceof Number){
    	node_tFileInputXML_8 = temp_tFileInputXML_8;
    	str_tFileInputXML_8 = String.valueOf(obj0_tFileInputXML_8);
    } else if(obj0_tFileInputXML_8 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_8 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_8;
    	node_tFileInputXML_8 = nodes_tFileInputXML_8.size()>0 ? nodes_tFileInputXML_8.get(0) : null;
		str_tFileInputXML_8 = node_tFileInputXML_8==null?null:node_tFileInputXML_8.asXML();
	}
								row21.vmp_doc = ParserUtils.parseTo_Document(str_tFileInputXML_8,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_8 = true;
                System.err.println(e.getMessage());
                row21 = null;
    }
			
			

 



/**
 * [tFileInputXML_8 begin ] stop
 */
	
	/**
	 * [tFileInputXML_8 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_8";

	

 


	tos_count_tFileInputXML_8++;

/**
 * [tFileInputXML_8 main ] stop
 */
	
	/**
	 * [tFileInputXML_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_8";

	

 



/**
 * [tFileInputXML_8 process_data_begin ] stop
 */
// Start of branch "row21"
if(row21 != null) { 



	
	/**
	 * [tXMLMap_8_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row21");
					}
					

	boolean rejectedInnerJoin_tXMLMap_8_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_8_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_8_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_8_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_8_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setOriginalLoop("/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI");
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setIsOptional(true);
					if(row21.vmp_doc == null 
						|| row21.vmp_doc.getDocument() == null) {
						throw new RuntimeException("row21.vmp_doc can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_8_TXMLMAP_OUT_0 = row21.vmp_doc.getDocument();
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_8_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setDefineNS(false);
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_8_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_8_TXMLMAP_OUT.countNSMap(doc_tXMLMap_8_TXMLMAP_OUT_0.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_8_TXMLMAP_OUT_0 = nsTool_tXMLMap_8_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_8_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/BASIS_STRNTCD");
					relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("BASIS_STRNTCD");
					
					absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/BS_SUBID");
					relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("BS_SUBID");
					
					absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/STRNT_NMRTR_UOMCD");
					relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("STRNT_NMRTR_UOMCD");
					
					absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/STRNT_NMRTR_VAL");
					relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("STRNT_NMRTR_VAL");
					
					absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/STRNT_DNMTR_VAL");
					relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("STRNT_DNMTR_VAL");
					
					absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/VPID");
					relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("VPID");
					
					absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/STRNT_DNMTR_UOMCD");
					relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("STRNT_DNMTR_UOMCD");
					
					absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/ISID");
					relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("ISID");
					
					String[] absolutePathMappings_tXMLMap_8_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_8_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_8_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_8_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_8_TXMLMAP_OUT_0 = docToFlat_tXMLMap_8_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_8_TXMLMAP_OUT_0: resultSet_tXMLMap_8_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_8_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_8_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_8_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_8_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_8_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_8_TXMLMAP_OUT_0 : oneRow_tXMLMap_8_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.put(entry_tXMLMap_8_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_8_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_8_TXMLMAP_OUT__Struct Var = Var__tXMLMap_8_TXMLMAP_OUT;
		// ###############################
		// # Output table

copyOfdrug_ingredient_1 = null;


// # Output table : 'copyOfdrug_ingredient_1'

copyOfdrug_ingredient_1_tmp = new copyOfdrug_ingredient_1Struct();
copyOfdrug_ingredient_1_tmp.vpid = treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.get_String("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/VPID");
copyOfdrug_ingredient_1_tmp.isid = treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.get_String("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/ISID");
copyOfdrug_ingredient_1_tmp.basis_strntcd = treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.get_Long("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/BASIS_STRNTCD");
copyOfdrug_ingredient_1_tmp.bs_subid = treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.get_String("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/BS_SUBID");
copyOfdrug_ingredient_1_tmp.strnt_nmrtr_val = treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.get_BigDecimal("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/STRNT_NMRTR_VAL");
copyOfdrug_ingredient_1_tmp.strnt_nmrtr_uomcd =   treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.get_String("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/STRNT_NMRTR_UOMCD");
copyOfdrug_ingredient_1_tmp.strnt_dnmtr_val = treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.get_BigDecimal("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/STRNT_DNMTR_VAL");
copyOfdrug_ingredient_1_tmp.strnt_dnmtr_uomcd = treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.get_String("row21.vmp_doc:/VIRTUAL_MED_PRODUCTS/VIRTUAL_PRODUCT_INGREDIENT/VPI/STRNT_DNMTR_UOMCD");
copyOfdrug_ingredient_1_tmp.col_val_hash = null;allOutsForAggregate_tXMLMap_8.add(copyOfdrug_ingredient_1_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_8_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_8_TXMLMAP_OUT++;

/**
 * [tXMLMap_8_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_8_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_8_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_8_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_8_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row21"




	
	/**
	 * [tFileInputXML_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_8";

	

 



/**
 * [tFileInputXML_8 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_8 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_8";

	


}
	}
	globalMap.put("tFileInputXML_8_NB_LINE",nb_line_tFileInputXML_8);

	
 

ok_Hash.put("tFileInputXML_8", true);
end_Hash.put("tFileInputXML_8", System.currentTimeMillis());




/**
 * [tFileInputXML_8 end ] stop
 */

	
	/**
	 * [tXMLMap_8_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tXMLMap_8_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_8_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_8_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tLogRow_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_17", false);
		start_Hash.put("tLogRow_17", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tLogRow_17 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_17 = "|";
		java.io.PrintStream consoleOut_tLogRow_17 = null;	

 		StringBuilder strBuffer_tLogRow_17 = null;
		int nb_line_tLogRow_17 = 0;
///////////////////////    			



 



/**
 * [tLogRow_17 begin ] stop
 */



	
	/**
	 * [tDBOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_17", false);
		start_Hash.put("tDBOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfdrug_ingredient_1");
					}
				
		int tos_count_tDBOutput_17 = 0;
		





String dbschema_tDBOutput_17 = null;
	dbschema_tDBOutput_17 = context.dmd_db_schema;
	

String tableName_tDBOutput_17 = null;
if(dbschema_tDBOutput_17 == null || dbschema_tDBOutput_17.trim().length() == 0) {
	tableName_tDBOutput_17 = ("dmd_vmp_ingredient");
} else {
	tableName_tDBOutput_17 = dbschema_tDBOutput_17 + "\".\"" + ("dmd_vmp_ingredient");
}

int nb_line_tDBOutput_17 = 0;
int nb_line_update_tDBOutput_17 = 0;
int nb_line_inserted_tDBOutput_17 = 0;
int nb_line_deleted_tDBOutput_17 = 0;
int nb_line_rejected_tDBOutput_17 = 0;

int deletedCount_tDBOutput_17=0;
int updatedCount_tDBOutput_17=0;
int insertedCount_tDBOutput_17=0;
int rejectedCount_tDBOutput_17=0;

boolean whetherReject_tDBOutput_17 = false;

java.sql.Connection conn_tDBOutput_17 = null;
String dbUser_tDBOutput_17 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_17 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_17 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_17 = context.dmd_db_password; 

    String dbPwd_tDBOutput_17 = decryptedPassword_tDBOutput_17;

    conn_tDBOutput_17 = java.sql.DriverManager.getConnection(url_tDBOutput_17,dbUser_tDBOutput_17,dbPwd_tDBOutput_17);
	
	resourceMap.put("conn_tDBOutput_17", conn_tDBOutput_17);
        conn_tDBOutput_17.setAutoCommit(false);
        int commitEvery_tDBOutput_17 = 10000;
        int commitCounter_tDBOutput_17 = 0;


   int batchSize_tDBOutput_17 = 10000;
   int batchSizeCounter_tDBOutput_17=0;

int count_tDBOutput_17=0;
            int rsTruncCountNumber_tDBOutput_17 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_17 = conn_tDBOutput_17.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_17 = stmtTruncCount_tDBOutput_17.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_17 + "\"")) {
                    if(rsTruncCount_tDBOutput_17.next()) {
                        rsTruncCountNumber_tDBOutput_17 = rsTruncCount_tDBOutput_17.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_17 = conn_tDBOutput_17.createStatement()) {
                stmtTrunc_tDBOutput_17.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_17 + "\"");
                deletedCount_tDBOutput_17 += rsTruncCountNumber_tDBOutput_17;
            }
	    String insert_tDBOutput_17 = "INSERT INTO \"" + tableName_tDBOutput_17 + "\" (\"vpid\",\"isid\",\"basis_strntcd\",\"bs_subid\",\"strnt_nmrtr_val\",\"strnt_nmrtr_uomcd\",\"strnt_dnmtr_val\",\"strnt_dnmtr_uomcd\",\"col_val_hash\") VALUES (?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_17 = conn_tDBOutput_17.prepareStatement(insert_tDBOutput_17);
	    resourceMap.put("pstmt_tDBOutput_17", pstmt_tDBOutput_17);
	    

 



/**
 * [tDBOutput_17 begin ] stop
 */



	
	/**
	 * [tXMLMap_8_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_8_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_8_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_IN";

	
		int tos_count_tXMLMap_8_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_8 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_8");
for(Object  row_out_tXMLMap_8_TXMLMAP_IN : outs_tXMLMap_8) {//TD512
 



/**
 * [tXMLMap_8_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_8_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_IN";

	

	copyOfdrug_ingredient_1 = null;
	if(row_out_tXMLMap_8_TXMLMAP_IN!=null && row_out_tXMLMap_8_TXMLMAP_IN instanceof copyOfdrug_ingredient_1Struct) {
		copyOfdrug_ingredient_1 = (copyOfdrug_ingredient_1Struct)row_out_tXMLMap_8_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_8_TXMLMAP_IN++;

/**
 * [tXMLMap_8_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_8_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_8_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfdrug_ingredient_1"
if(copyOfdrug_ingredient_1 != null) { 



	
	/**
	 * [tDBOutput_17 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfdrug_ingredient_1");
					}
					



            row30 = null;
        whetherReject_tDBOutput_17 = false;
                    if(copyOfdrug_ingredient_1.vpid == null) {
pstmt_tDBOutput_17.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(1, copyOfdrug_ingredient_1.vpid);
}

                    if(copyOfdrug_ingredient_1.isid == null) {
pstmt_tDBOutput_17.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(2, copyOfdrug_ingredient_1.isid);
}

                    if(copyOfdrug_ingredient_1.basis_strntcd == null) {
pstmt_tDBOutput_17.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_17.setLong(3, copyOfdrug_ingredient_1.basis_strntcd);
}

                    if(copyOfdrug_ingredient_1.bs_subid == null) {
pstmt_tDBOutput_17.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(4, copyOfdrug_ingredient_1.bs_subid);
}

                    pstmt_tDBOutput_17.setBigDecimal(5, copyOfdrug_ingredient_1.strnt_nmrtr_val);

                    if(copyOfdrug_ingredient_1.strnt_nmrtr_uomcd == null) {
pstmt_tDBOutput_17.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(6, copyOfdrug_ingredient_1.strnt_nmrtr_uomcd);
}

                    pstmt_tDBOutput_17.setBigDecimal(7, copyOfdrug_ingredient_1.strnt_dnmtr_val);

                    if(copyOfdrug_ingredient_1.strnt_dnmtr_uomcd == null) {
pstmt_tDBOutput_17.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_17.setString(8, copyOfdrug_ingredient_1.strnt_dnmtr_uomcd);
}

                    if(copyOfdrug_ingredient_1.col_val_hash == null) {
pstmt_tDBOutput_17.setNull(9, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_17.setObject(9, copyOfdrug_ingredient_1.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_17.addBatch();
    		nb_line_tDBOutput_17++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_17++;
    		  
            if(!whetherReject_tDBOutput_17) {
                            row30 = new row30Struct();
                                row30.vpid = copyOfdrug_ingredient_1.vpid;
                                row30.isid = copyOfdrug_ingredient_1.isid;
                                row30.basis_strntcd = copyOfdrug_ingredient_1.basis_strntcd;
                                row30.bs_subid = copyOfdrug_ingredient_1.bs_subid;
                                row30.strnt_nmrtr_val = copyOfdrug_ingredient_1.strnt_nmrtr_val;
                                row30.strnt_nmrtr_uomcd = copyOfdrug_ingredient_1.strnt_nmrtr_uomcd;
                                row30.strnt_dnmtr_val = copyOfdrug_ingredient_1.strnt_dnmtr_val;
                                row30.strnt_dnmtr_uomcd = copyOfdrug_ingredient_1.strnt_dnmtr_uomcd;
                                row30.col_val_hash = copyOfdrug_ingredient_1.col_val_hash;
            }
    			if ((batchSize_tDBOutput_17 > 0) && (batchSize_tDBOutput_17 <= batchSizeCounter_tDBOutput_17)) {
                try {
						int countSum_tDBOutput_17 = 0;
						    
						for(int countEach_tDBOutput_17: pstmt_tDBOutput_17.executeBatch()) {
							countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
						}
				    	
				    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
				    	
            	    	batchSizeCounter_tDBOutput_17 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_17){
				    	java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17.getNextException(),sqle_tDBOutput_17=null;
				    	String errormessage_tDBOutput_17;
						if (ne_tDBOutput_17 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_17 = new java.sql.SQLException(e_tDBOutput_17.getMessage() + "\ncaused by: " + ne_tDBOutput_17.getMessage(), ne_tDBOutput_17.getSQLState(), ne_tDBOutput_17.getErrorCode(), ne_tDBOutput_17);
							errormessage_tDBOutput_17 = sqle_tDBOutput_17.getMessage();
						}else{
							errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
						}
				    	
				    		if (ne_tDBOutput_17 != null) {
				    			throw(sqle_tDBOutput_17);
				    		}else{
				            	throw(e_tDBOutput_17);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_17++;
                if(commitEvery_tDBOutput_17 <= commitCounter_tDBOutput_17) {
                if ((batchSize_tDBOutput_17 > 0) && (batchSizeCounter_tDBOutput_17 > 0)) {
                try {
                		int countSum_tDBOutput_17 = 0;
                		    
						for(int countEach_tDBOutput_17: pstmt_tDBOutput_17.executeBatch()) {
							countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
						}
            	    	
            	    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
            	    	
                batchSizeCounter_tDBOutput_17 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_17){
			    	java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17.getNextException(),sqle_tDBOutput_17=null;
			    	String errormessage_tDBOutput_17;
					if (ne_tDBOutput_17 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_17 = new java.sql.SQLException(e_tDBOutput_17.getMessage() + "\ncaused by: " + ne_tDBOutput_17.getMessage(), ne_tDBOutput_17.getSQLState(), ne_tDBOutput_17.getErrorCode(), ne_tDBOutput_17);
						errormessage_tDBOutput_17 = sqle_tDBOutput_17.getMessage();
					}else{
						errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
					}
			    	
			    		if (ne_tDBOutput_17 != null) {
			    			throw(sqle_tDBOutput_17);
			    		}else{
			            	throw(e_tDBOutput_17);
			            }
			    	
				}
            }
                	conn_tDBOutput_17.commit();
                	
                	commitCounter_tDBOutput_17=0;
                }

 


	tos_count_tDBOutput_17++;

/**
 * [tDBOutput_17 main ] stop
 */
	
	/**
	 * [tDBOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	

 



/**
 * [tDBOutput_17 process_data_begin ] stop
 */
// Start of branch "row30"
if(row30 != null) { 



	
	/**
	 * [tLogRow_17 main ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row30");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_17 = new StringBuilder();




   				
	    		if(row30.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row30.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row30.isid != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row30.isid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row30.basis_strntcd != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row30.basis_strntcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row30.bs_subid != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row30.bs_subid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row30.strnt_nmrtr_val != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
								row30.strnt_nmrtr_val.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row30.strnt_nmrtr_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row30.strnt_nmrtr_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row30.strnt_dnmtr_val != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
								row30.strnt_dnmtr_val.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row30.strnt_dnmtr_uomcd != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row30.strnt_dnmtr_uomcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_17.append("|");
    			


   				
	    		if(row30.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_17.append(
				                String.valueOf(row30.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_17 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_17 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_17);
                    }
                    consoleOut_tLogRow_17.println(strBuffer_tLogRow_17.toString());
                    consoleOut_tLogRow_17.flush();
                    nb_line_tLogRow_17++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_17++;

/**
 * [tLogRow_17 main ] stop
 */
	
	/**
	 * [tLogRow_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 process_data_end ] stop
 */

} // End of branch "row30"




	
	/**
	 * [tDBOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	

 



/**
 * [tDBOutput_17 process_data_end ] stop
 */

} // End of branch "copyOfdrug_ingredient_1"




	
	/**
	 * [tXMLMap_8_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_8_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_8_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_8_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_8_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_8_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tDBOutput_17 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	



	    try {
				int countSum_tDBOutput_17 = 0;
				if (pstmt_tDBOutput_17 != null && batchSizeCounter_tDBOutput_17 > 0) {
						
					for(int countEach_tDBOutput_17: pstmt_tDBOutput_17.executeBatch()) {
						countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0 : countEach_tDBOutput_17);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_17 += countSum_tDBOutput_17;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_17){
	    	java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17.getNextException(),sqle_tDBOutput_17=null;
	    	String errormessage_tDBOutput_17;
			if (ne_tDBOutput_17 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_17 = new java.sql.SQLException(e_tDBOutput_17.getMessage() + "\ncaused by: " + ne_tDBOutput_17.getMessage(), ne_tDBOutput_17.getSQLState(), ne_tDBOutput_17.getErrorCode(), ne_tDBOutput_17);
				errormessage_tDBOutput_17 = sqle_tDBOutput_17.getMessage();
			}else{
				errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
			}
	    	
	    		if (ne_tDBOutput_17 != null) {
	    			throw(sqle_tDBOutput_17);
	    		}else{
	            	throw(e_tDBOutput_17);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_17 != null) {
        		
            pstmt_tDBOutput_17.close();
            resourceMap.remove("pstmt_tDBOutput_17");
        }
    resourceMap.put("statementClosed_tDBOutput_17", true);
			
			conn_tDBOutput_17.commit();
			
		
    	conn_tDBOutput_17 .close();
    	
    	resourceMap.put("finish_tDBOutput_17", true);
    	

	nb_line_deleted_tDBOutput_17=nb_line_deleted_tDBOutput_17+ deletedCount_tDBOutput_17;
	nb_line_update_tDBOutput_17=nb_line_update_tDBOutput_17 + updatedCount_tDBOutput_17;
	nb_line_inserted_tDBOutput_17=nb_line_inserted_tDBOutput_17 + insertedCount_tDBOutput_17;
	nb_line_rejected_tDBOutput_17=nb_line_rejected_tDBOutput_17 + rejectedCount_tDBOutput_17;
	
        globalMap.put("tDBOutput_17_NB_LINE",nb_line_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_UPDATED",nb_line_update_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_DELETED",nb_line_deleted_tDBOutput_17);
        globalMap.put("tDBOutput_17_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_17);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfdrug_ingredient_1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_17", true);
end_Hash.put("tDBOutput_17", System.currentTimeMillis());




/**
 * [tDBOutput_17 end ] stop
 */

	
	/**
	 * [tLogRow_17 end ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	


//////
//////
globalMap.put("tLogRow_17_NB_LINE",nb_line_tLogRow_17);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tLogRow_17", true);
end_Hash.put("tLogRow_17", System.currentTimeMillis());




/**
 * [tLogRow_17 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate10", 2, "exec" + NB_ITERATE_tFileInputXML_8);
						}				
					




	
	/**
	 * [tFileList_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_10";

	

 



/**
 * [tFileList_10 process_data_end ] stop
 */
	
	/**
	 * [tFileList_10 end ] start
	 */

	

	
	
	currentComponent="tFileList_10";

	

  
    }
  globalMap.put("tFileList_10_NB_FILE", NB_FILEtFileList_10);
  

    if (NB_FILEtFileList_10 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_10);
  
 

 

ok_Hash.put("tFileList_10", true);
end_Hash.put("tFileList_10", System.currentTimeMillis());




/**
 * [tFileList_10 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tFileList_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_10 finally ] start
	 */

	

	
	
	currentComponent="tFileList_10";

	

 



/**
 * [tFileList_10 finally ] stop
 */

	
	/**
	 * [tFileInputXML_8 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_8";

	

 



/**
 * [tFileInputXML_8 finally ] stop
 */

	
	/**
	 * [tXMLMap_8_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_8_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_8_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_8_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tDBOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_17";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_17") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_17 = null;
                if ((pstmtToClose_tDBOutput_17 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_17")) != null) {
                    pstmtToClose_tDBOutput_17.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_17") == null){
            java.sql.Connection ctn_tDBOutput_17 = null;
            if((ctn_tDBOutput_17 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_17")) != null){
                try {
                    ctn_tDBOutput_17.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_17) {
                    String errorMessage_tDBOutput_17 = "failed to close the connection in tDBOutput_17 :" + sqlEx_tDBOutput_17.getMessage();
                    System.err.println(errorMessage_tDBOutput_17);
                }
            }
        }
    }
 



/**
 * [tDBOutput_17 finally ] stop
 */

	
	/**
	 * [tLogRow_17 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_10_SUBPROCESS_STATE", 1);
	}
	

public void tDie_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_3", false);
		start_Hash.put("tDie_3", System.currentTimeMillis());
		
	
	currentComponent="tDie_3";

	
		int tos_count_tDie_3 = 0;
		

 



/**
 * [tDie_3 begin ] stop
 */
	
	/**
	 * [tDie_3 main ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_3", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
				talendLogs_LOGS.addMessage("tDie", "tDie_3", 5, "the end is near", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_3_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_3_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_3_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_3) {
		logIgnoredError(String.format("tDie_3 - tDie failed to log message due to internal error: %s", e_tDie_3), e_tDie_3);
	}
	
	currentComponent = "tDie_3";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_3_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_3++;

/**
 * [tDie_3 main ] stop
 */
	
	/**
	 * [tDie_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 process_data_begin ] stop
 */
	
	/**
	 * [tDie_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 process_data_end ] stop
 */
	
	/**
	 * [tDie_3 end ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 

ok_Hash.put("tDie_3", true);
end_Hash.put("tDie_3", System.currentTimeMillis());




/**
 * [tDie_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_3 finally ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfdrug_route_0Struct implements routines.system.IPersistableRow<copyOfdrug_route_0Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public String routecd;

				public String getRoutecd () {
					return this.routecd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
					this.routecd = readString(dis);
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// String
				
						writeString(this.routecd,dos);
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",routecd="+routecd);
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfdrug_route_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public routines.system.Document vmp_doc;

				public routines.system.Document getVmp_doc () {
					return this.vmp_doc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
						this.vmp_doc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.vmp_doc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vmp_doc="+String.valueOf(vmp_doc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
copyOfdrug_route_0Struct copyOfdrug_route_0 = new copyOfdrug_route_0Struct();
row29Struct row29 = new row29Struct();



	
	/**
	 * [tFileList_8 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_7 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_8", false);
		start_Hash.put("tFileList_8", System.currentTimeMillis());
		
	
	currentComponent="tFileList_8";

	
		int tos_count_tFileList_8 = 0;
		
	
 
     
    
  String directory_tFileList_8 = context.dmd_file_path;
  final java.util.List<String> maskList_tFileList_8 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_8 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_8.add("f_vmp2_3*.xml");  
  for (final String filemask_tFileList_8 : maskList_tFileList_8) {
	String filemask_compile_tFileList_8 = filemask_tFileList_8;
	
		filemask_compile_tFileList_8 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_8.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_8 = java.util.regex.Pattern.compile(filemask_compile_tFileList_8, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_8.add(fileNamePattern_tFileList_8);
  }
  int NB_FILEtFileList_8 = 0;

  final boolean case_sensitive_tFileList_8 = false;
    final java.util.List<java.io.File> list_tFileList_8 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_8 = new java.util.HashSet<String>();
	java.io.File file_tFileList_8 = new java.io.File(directory_tFileList_8);
    
		file_tFileList_8.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_8 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_8 : patternList_tFileList_8) {
          	if (fileNamePattern_tFileList_8.matcher(fileName_tFileList_8).matches()){
					if(!filePath_tFileList_8.contains(file.getAbsolutePath())) {
			          list_tFileList_8.add(file);
			          filePath_tFileList_8.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_8);
    
    for (int i_tFileList_8 = 0; i_tFileList_8 < list_tFileList_8.size(); i_tFileList_8++){
      java.io.File files_tFileList_8 = list_tFileList_8.get(i_tFileList_8);
      String fileName_tFileList_8 = files_tFileList_8.getName();
      
      String currentFileName_tFileList_8 = files_tFileList_8.getName(); 
      String currentFilePath_tFileList_8 = files_tFileList_8.getAbsolutePath();
      String currentFileDirectory_tFileList_8 = files_tFileList_8.getParent();
      String currentFileExtension_tFileList_8 = null;
      
      if (files_tFileList_8.getName().contains(".") && files_tFileList_8.isFile()){
        currentFileExtension_tFileList_8 = files_tFileList_8.getName().substring(files_tFileList_8.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_8 = "";
      }
      
      NB_FILEtFileList_8 ++;
      globalMap.put("tFileList_8_CURRENT_FILE", currentFileName_tFileList_8);
      globalMap.put("tFileList_8_CURRENT_FILEPATH", currentFilePath_tFileList_8);
      globalMap.put("tFileList_8_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_8);
      globalMap.put("tFileList_8_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_8);
      globalMap.put("tFileList_8_NB_FILE", NB_FILEtFileList_8);
      
 



/**
 * [tFileList_8 begin ] stop
 */
	
	/**
	 * [tFileList_8 main ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

 


	tos_count_tFileList_8++;

/**
 * [tFileList_8 main ] stop
 */
	
	/**
	 * [tFileList_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

 



/**
 * [tFileList_8 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_7++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row20", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row29", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfdrug_route_0", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate8", 1, "exec" + NB_ITERATE_tFileInputXML_7);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_7_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_7_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tXMLMap_7_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_7_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_7_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_7_TXMLMAP_OUT__Struct Var__tXMLMap_7_TXMLMAP_OUT = new Var__tXMLMap_7_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfdrug_route_0Struct copyOfdrug_route_0_tmp = new copyOfdrug_route_0Struct();
copyOfdrug_route_0Struct copyOfdrug_route_0_save = null;
//the aggregate variable
copyOfdrug_route_0Struct copyOfdrug_route_0_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_7 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_7",allOutsForAggregate_tXMLMap_7);
// ###############################
class TreeNode_API_tXMLMap_7_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Short get_Short(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Short(content);
	}
	Long get_Long(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Long(content);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	BigDecimal get_BigDecimal(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_BigDecimal(content);
	}
}
			TreeNode_API_tXMLMap_7_TXMLMAP_OUT treeNodeAPI_tXMLMap_7_TXMLMAP_OUT = new TreeNode_API_tXMLMap_7_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_7_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_7_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_7_TXMLMAP_OUT xml_api_tXMLMap_7_TXMLMAP_OUT = new XML_API_tXMLMap_7_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_7_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_7_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_7", false);
		start_Hash.put("tFileInputXML_7", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_7";

	
		int tos_count_tFileInputXML_7 = 0;
		

	

int nb_line_tFileInputXML_7 = 0;

	String os_tFileInputXML_7 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_7=false;
	if(os_tFileInputXML_7.indexOf("windows") > -1 || os_tFileInputXML_7.indexOf("nt") > -1){
		isWindows_tFileInputXML_7=true;
	}
class NameSpaceTool_tFileInputXML_7 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_7{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_7 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_7 = null;
try {
	filename_tFileInputXML_7 = (String)globalMap.get("tFileList_8_CURRENT_FILEPATH");
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_7 != null && filename_tFileInputXML_7 instanceof String && filename_tFileInputXML_7.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_7){
		filename_tFileInputXML_7 = filename_tFileInputXML_7.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_7 = true;
org.dom4j.Document doc_tFileInputXML_7 = null;
java.io.Closeable toClose_tFileInputXML_7 = null;
try{
	if(filename_tFileInputXML_7 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_7 = (java.io.InputStream)filename_tFileInputXML_7;
		toClose_tFileInputXML_7 = inputStream_tFileInputXML_7;
		doc_tFileInputXML_7 = reader_tFileInputXML_7.read(inputStream_tFileInputXML_7);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_7 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_7)),"ISO-8859-15");
		toClose_tFileInputXML_7 = unicodeReader_tFileInputXML_7;
		org.xml.sax.InputSource in_tFileInputXML_7= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_7);
		doc_tFileInputXML_7 = reader_tFileInputXML_7.read(in_tFileInputXML_7);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_7 = false;
} finally {
	if(toClose_tFileInputXML_7!=null) {
		toClose_tFileInputXML_7.close();
	}
}
if(isValidFile_tFileInputXML_7){
NameSpaceTool_tFileInputXML_7 nsTool_tFileInputXML_7 = new NameSpaceTool_tFileInputXML_7();
nsTool_tFileInputXML_7.countNSMap(doc_tFileInputXML_7.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_7 = nsTool_tFileInputXML_7.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_7 = doc_tFileInputXML_7.createXPath(nsTool_tFileInputXML_7.addDefaultNSPrefix("/"));  
x_tFileInputXML_7.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_7 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_7.selectNodes(doc_tFileInputXML_7);	
XML_API_tFileInputXML_7 xml_api_tFileInputXML_7 = new XML_API_tFileInputXML_7();
String str_tFileInputXML_7 = "";
org.dom4j.Node node_tFileInputXML_7 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_7=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_7{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_7 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_7 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_7 xPathUtil_tFileInputXML_7 = new XPathUtil_tFileInputXML_7();
	xPathUtil_tFileInputXML_7.initXPaths(xpaths_tFileInputXML_7, nsTool_tFileInputXML_7, xmlNameSpaceMap_tFileInputXML_7);
for (org.dom4j.Node temp_tFileInputXML_7: nodeList_tFileInputXML_7) {
		nb_line_tFileInputXML_7++;
		
	row20 = null;			
	boolean whetherReject_tFileInputXML_7 = false;
	row20 = new row20Struct();
	try{
    Object obj0_tFileInputXML_7 = xpaths_tFileInputXML_7.get(0).evaluate(temp_tFileInputXML_7);
    if(obj0_tFileInputXML_7 == null) {
    	node_tFileInputXML_7 = null;
		str_tFileInputXML_7 = null;
    	
    } else if(obj0_tFileInputXML_7 instanceof org.dom4j.Node) {
    	node_tFileInputXML_7 = (org.dom4j.Node)obj0_tFileInputXML_7;
		str_tFileInputXML_7 = node_tFileInputXML_7.asXML();
    } else if(obj0_tFileInputXML_7 instanceof String || obj0_tFileInputXML_7 instanceof Number){
    	node_tFileInputXML_7 = temp_tFileInputXML_7;
    	str_tFileInputXML_7 = String.valueOf(obj0_tFileInputXML_7);
    } else if(obj0_tFileInputXML_7 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_7;
    	node_tFileInputXML_7 = nodes_tFileInputXML_7.size()>0 ? nodes_tFileInputXML_7.get(0) : null;
		str_tFileInputXML_7 = node_tFileInputXML_7==null?null:node_tFileInputXML_7.asXML();
	}
								row20.vmp_doc = ParserUtils.parseTo_Document(str_tFileInputXML_7,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_7 = true;
                System.err.println(e.getMessage());
                row20 = null;
    }
			
			

 



/**
 * [tFileInputXML_7 begin ] stop
 */
	
	/**
	 * [tFileInputXML_7 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_7";

	

 


	tos_count_tFileInputXML_7++;

/**
 * [tFileInputXML_7 main ] stop
 */
	
	/**
	 * [tFileInputXML_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_7";

	

 



/**
 * [tFileInputXML_7 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row20");
					}
					

	boolean rejectedInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_7_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_7_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_7_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_7_TXMLMAP_OUT_0.setOriginalLoop("/VIRTUAL_MED_PRODUCTS/DRUG_ROUTE/DROUTE");
					docToFlat_tXMLMap_7_TXMLMAP_OUT_0.setIsOptional(true);
					if(row20.vmp_doc == null 
						|| row20.vmp_doc.getDocument() == null) {
						throw new RuntimeException("row20.vmp_doc can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_7_TXMLMAP_OUT_0 = row20.vmp_doc.getDocument();
					docToFlat_tXMLMap_7_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_7_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_7_TXMLMAP_OUT_0.setDefineNS(false);
					docToFlat_tXMLMap_7_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_7_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_7_TXMLMAP_OUT.countNSMap(doc_tXMLMap_7_TXMLMAP_OUT_0.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT_0 = nsTool_tXMLMap_7_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_7_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_7_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_7_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_7_TXMLMAP_OUT_0.add("row20.vmp_doc:/VIRTUAL_MED_PRODUCTS/DRUG_ROUTE/DROUTE/VPID");
					relativePathMappingsList_tXMLMap_7_TXMLMAP_OUT_0.add("VPID");
					
					absolutePathMappingsList_tXMLMap_7_TXMLMAP_OUT_0.add("row20.vmp_doc:/VIRTUAL_MED_PRODUCTS/DRUG_ROUTE/DROUTE/ROUTECD");
					relativePathMappingsList_tXMLMap_7_TXMLMAP_OUT_0.add("ROUTECD");
					
					String[] absolutePathMappings_tXMLMap_7_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_7_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_7_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_7_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_7_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_7_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_7_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_7_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_7_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_7_TXMLMAP_OUT_0 = docToFlat_tXMLMap_7_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_7_TXMLMAP_OUT_0: resultSet_tXMLMap_7_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_7_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_7_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_7_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_7_TXMLMAP_OUT_0 : oneRow_tXMLMap_7_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.put(entry_tXMLMap_7_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_7_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_7_TXMLMAP_OUT__Struct Var = Var__tXMLMap_7_TXMLMAP_OUT;
		// ###############################
		// # Output table

copyOfdrug_route_0 = null;


// # Output table : 'copyOfdrug_route_0'

copyOfdrug_route_0_tmp = new copyOfdrug_route_0Struct();
copyOfdrug_route_0_tmp.vpid = treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.get_String("row20.vmp_doc:/VIRTUAL_MED_PRODUCTS/DRUG_ROUTE/DROUTE/VPID");
copyOfdrug_route_0_tmp.routecd =  treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.get_String("row20.vmp_doc:/VIRTUAL_MED_PRODUCTS/DRUG_ROUTE/DROUTE/ROUTECD");
copyOfdrug_route_0_tmp.col_val_hash = null;allOutsForAggregate_tXMLMap_7.add(copyOfdrug_route_0_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_7_TXMLMAP_OUT++;

/**
 * [tXMLMap_7_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_7_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_7_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tFileInputXML_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_7";

	

 



/**
 * [tFileInputXML_7 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_7 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_7";

	


}
	}
	globalMap.put("tFileInputXML_7_NB_LINE",nb_line_tFileInputXML_7);

	
 

ok_Hash.put("tFileInputXML_7", true);
end_Hash.put("tFileInputXML_7", System.currentTimeMillis());




/**
 * [tFileInputXML_7 end ] stop
 */

	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tXMLMap_7_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_7_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_7_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tLogRow_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_16", false);
		start_Hash.put("tLogRow_16", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tLogRow_16 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_16 = "|";
		java.io.PrintStream consoleOut_tLogRow_16 = null;	

 		StringBuilder strBuffer_tLogRow_16 = null;
		int nb_line_tLogRow_16 = 0;
///////////////////////    			



 



/**
 * [tLogRow_16 begin ] stop
 */



	
	/**
	 * [tDBOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_16", false);
		start_Hash.put("tDBOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfdrug_route_0");
					}
				
		int tos_count_tDBOutput_16 = 0;
		





String dbschema_tDBOutput_16 = null;
	dbschema_tDBOutput_16 = context.dmd_db_schema;
	

String tableName_tDBOutput_16 = null;
if(dbschema_tDBOutput_16 == null || dbschema_tDBOutput_16.trim().length() == 0) {
	tableName_tDBOutput_16 = ("dmd_vmp_drugroute");
} else {
	tableName_tDBOutput_16 = dbschema_tDBOutput_16 + "\".\"" + ("dmd_vmp_drugroute");
}

int nb_line_tDBOutput_16 = 0;
int nb_line_update_tDBOutput_16 = 0;
int nb_line_inserted_tDBOutput_16 = 0;
int nb_line_deleted_tDBOutput_16 = 0;
int nb_line_rejected_tDBOutput_16 = 0;

int deletedCount_tDBOutput_16=0;
int updatedCount_tDBOutput_16=0;
int insertedCount_tDBOutput_16=0;
int rejectedCount_tDBOutput_16=0;

boolean whetherReject_tDBOutput_16 = false;

java.sql.Connection conn_tDBOutput_16 = null;
String dbUser_tDBOutput_16 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_16 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_16 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_16 = context.dmd_db_password; 

    String dbPwd_tDBOutput_16 = decryptedPassword_tDBOutput_16;

    conn_tDBOutput_16 = java.sql.DriverManager.getConnection(url_tDBOutput_16,dbUser_tDBOutput_16,dbPwd_tDBOutput_16);
	
	resourceMap.put("conn_tDBOutput_16", conn_tDBOutput_16);
        conn_tDBOutput_16.setAutoCommit(false);
        int commitEvery_tDBOutput_16 = 10000;
        int commitCounter_tDBOutput_16 = 0;


   int batchSize_tDBOutput_16 = 10000;
   int batchSizeCounter_tDBOutput_16=0;

int count_tDBOutput_16=0;
            int rsTruncCountNumber_tDBOutput_16 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_16 = conn_tDBOutput_16.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_16 = stmtTruncCount_tDBOutput_16.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_16 + "\"")) {
                    if(rsTruncCount_tDBOutput_16.next()) {
                        rsTruncCountNumber_tDBOutput_16 = rsTruncCount_tDBOutput_16.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_16 = conn_tDBOutput_16.createStatement()) {
                stmtTrunc_tDBOutput_16.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_16 + "\"");
                deletedCount_tDBOutput_16 += rsTruncCountNumber_tDBOutput_16;
            }
	    String insert_tDBOutput_16 = "INSERT INTO \"" + tableName_tDBOutput_16 + "\" (\"vpid\",\"routecd\",\"col_val_hash\") VALUES (?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_16 = conn_tDBOutput_16.prepareStatement(insert_tDBOutput_16);
	    resourceMap.put("pstmt_tDBOutput_16", pstmt_tDBOutput_16);
	    

 



/**
 * [tDBOutput_16 begin ] stop
 */



	
	/**
	 * [tXMLMap_7_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_7_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_7_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";

	
		int tos_count_tXMLMap_7_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_7 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_7");
for(Object  row_out_tXMLMap_7_TXMLMAP_IN : outs_tXMLMap_7) {//TD512
 



/**
 * [tXMLMap_7_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";

	

	copyOfdrug_route_0 = null;
	if(row_out_tXMLMap_7_TXMLMAP_IN!=null && row_out_tXMLMap_7_TXMLMAP_IN instanceof copyOfdrug_route_0Struct) {
		copyOfdrug_route_0 = (copyOfdrug_route_0Struct)row_out_tXMLMap_7_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_7_TXMLMAP_IN++;

/**
 * [tXMLMap_7_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_7_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfdrug_route_0"
if(copyOfdrug_route_0 != null) { 



	
	/**
	 * [tDBOutput_16 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfdrug_route_0");
					}
					



            row29 = null;
        whetherReject_tDBOutput_16 = false;
                    if(copyOfdrug_route_0.vpid == null) {
pstmt_tDBOutput_16.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_16.setString(1, copyOfdrug_route_0.vpid);
}

                    if(copyOfdrug_route_0.routecd == null) {
pstmt_tDBOutput_16.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_16.setString(2, copyOfdrug_route_0.routecd);
}

                    if(copyOfdrug_route_0.col_val_hash == null) {
pstmt_tDBOutput_16.setNull(3, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_16.setObject(3, copyOfdrug_route_0.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_16.addBatch();
    		nb_line_tDBOutput_16++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_16++;
    		  
            if(!whetherReject_tDBOutput_16) {
                            row29 = new row29Struct();
                                row29.vpid = copyOfdrug_route_0.vpid;
                                row29.routecd = copyOfdrug_route_0.routecd;
                                row29.col_val_hash = copyOfdrug_route_0.col_val_hash;
            }
    			if ((batchSize_tDBOutput_16 > 0) && (batchSize_tDBOutput_16 <= batchSizeCounter_tDBOutput_16)) {
                try {
						int countSum_tDBOutput_16 = 0;
						    
						for(int countEach_tDBOutput_16: pstmt_tDBOutput_16.executeBatch()) {
							countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
						}
				    	
				    		insertedCount_tDBOutput_16 += countSum_tDBOutput_16;
				    	
            	    	batchSizeCounter_tDBOutput_16 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_16){
				    	java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(),sqle_tDBOutput_16=null;
				    	String errormessage_tDBOutput_16;
						if (ne_tDBOutput_16 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_16 = new java.sql.SQLException(e_tDBOutput_16.getMessage() + "\ncaused by: " + ne_tDBOutput_16.getMessage(), ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(), ne_tDBOutput_16);
							errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
						}else{
							errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
						}
				    	
				    		if (ne_tDBOutput_16 != null) {
				    			throw(sqle_tDBOutput_16);
				    		}else{
				            	throw(e_tDBOutput_16);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_16++;
                if(commitEvery_tDBOutput_16 <= commitCounter_tDBOutput_16) {
                if ((batchSize_tDBOutput_16 > 0) && (batchSizeCounter_tDBOutput_16 > 0)) {
                try {
                		int countSum_tDBOutput_16 = 0;
                		    
						for(int countEach_tDBOutput_16: pstmt_tDBOutput_16.executeBatch()) {
							countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
						}
            	    	
            	    		insertedCount_tDBOutput_16 += countSum_tDBOutput_16;
            	    	
                batchSizeCounter_tDBOutput_16 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_16){
			    	java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(),sqle_tDBOutput_16=null;
			    	String errormessage_tDBOutput_16;
					if (ne_tDBOutput_16 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_16 = new java.sql.SQLException(e_tDBOutput_16.getMessage() + "\ncaused by: " + ne_tDBOutput_16.getMessage(), ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(), ne_tDBOutput_16);
						errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
					}else{
						errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
					}
			    	
			    		if (ne_tDBOutput_16 != null) {
			    			throw(sqle_tDBOutput_16);
			    		}else{
			            	throw(e_tDBOutput_16);
			            }
			    	
				}
            }
                	conn_tDBOutput_16.commit();
                	
                	commitCounter_tDBOutput_16=0;
                }

 


	tos_count_tDBOutput_16++;

/**
 * [tDBOutput_16 main ] stop
 */
	
	/**
	 * [tDBOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	

 



/**
 * [tDBOutput_16 process_data_begin ] stop
 */
// Start of branch "row29"
if(row29 != null) { 



	
	/**
	 * [tLogRow_16 main ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row29");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_16 = new StringBuilder();




   				
	    		if(row29.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row29.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row29.routecd != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row29.routecd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row29.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row29.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_16 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_16 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_16);
                    }
                    consoleOut_tLogRow_16.println(strBuffer_tLogRow_16.toString());
                    consoleOut_tLogRow_16.flush();
                    nb_line_tLogRow_16++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_16++;

/**
 * [tLogRow_16 main ] stop
 */
	
	/**
	 * [tLogRow_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 process_data_end ] stop
 */

} // End of branch "row29"




	
	/**
	 * [tDBOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	

 



/**
 * [tDBOutput_16 process_data_end ] stop
 */

} // End of branch "copyOfdrug_route_0"




	
	/**
	 * [tXMLMap_7_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_7_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_7_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_7_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_7_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tDBOutput_16 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	



	    try {
				int countSum_tDBOutput_16 = 0;
				if (pstmt_tDBOutput_16 != null && batchSizeCounter_tDBOutput_16 > 0) {
						
					for(int countEach_tDBOutput_16: pstmt_tDBOutput_16.executeBatch()) {
						countSum_tDBOutput_16 += (countEach_tDBOutput_16 < 0 ? 0 : countEach_tDBOutput_16);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_16 += countSum_tDBOutput_16;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_16){
	    	java.sql.SQLException ne_tDBOutput_16 = e_tDBOutput_16.getNextException(),sqle_tDBOutput_16=null;
	    	String errormessage_tDBOutput_16;
			if (ne_tDBOutput_16 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_16 = new java.sql.SQLException(e_tDBOutput_16.getMessage() + "\ncaused by: " + ne_tDBOutput_16.getMessage(), ne_tDBOutput_16.getSQLState(), ne_tDBOutput_16.getErrorCode(), ne_tDBOutput_16);
				errormessage_tDBOutput_16 = sqle_tDBOutput_16.getMessage();
			}else{
				errormessage_tDBOutput_16 = e_tDBOutput_16.getMessage();
			}
	    	
	    		if (ne_tDBOutput_16 != null) {
	    			throw(sqle_tDBOutput_16);
	    		}else{
	            	throw(e_tDBOutput_16);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_16 != null) {
        		
            pstmt_tDBOutput_16.close();
            resourceMap.remove("pstmt_tDBOutput_16");
        }
    resourceMap.put("statementClosed_tDBOutput_16", true);
			
			conn_tDBOutput_16.commit();
			
		
    	conn_tDBOutput_16 .close();
    	
    	resourceMap.put("finish_tDBOutput_16", true);
    	

	nb_line_deleted_tDBOutput_16=nb_line_deleted_tDBOutput_16+ deletedCount_tDBOutput_16;
	nb_line_update_tDBOutput_16=nb_line_update_tDBOutput_16 + updatedCount_tDBOutput_16;
	nb_line_inserted_tDBOutput_16=nb_line_inserted_tDBOutput_16 + insertedCount_tDBOutput_16;
	nb_line_rejected_tDBOutput_16=nb_line_rejected_tDBOutput_16 + rejectedCount_tDBOutput_16;
	
        globalMap.put("tDBOutput_16_NB_LINE",nb_line_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_UPDATED",nb_line_update_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_DELETED",nb_line_deleted_tDBOutput_16);
        globalMap.put("tDBOutput_16_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_16);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfdrug_route_0");
			  	}
			  	
 

ok_Hash.put("tDBOutput_16", true);
end_Hash.put("tDBOutput_16", System.currentTimeMillis());




/**
 * [tDBOutput_16 end ] stop
 */

	
	/**
	 * [tLogRow_16 end ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	


//////
//////
globalMap.put("tLogRow_16_NB_LINE",nb_line_tLogRow_16);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tLogRow_16", true);
end_Hash.put("tLogRow_16", System.currentTimeMillis());




/**
 * [tLogRow_16 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate8", 2, "exec" + NB_ITERATE_tFileInputXML_7);
						}				
					




	
	/**
	 * [tFileList_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

 



/**
 * [tFileList_8 process_data_end ] stop
 */
	
	/**
	 * [tFileList_8 end ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

  
    }
  globalMap.put("tFileList_8_NB_FILE", NB_FILEtFileList_8);
  

    if (NB_FILEtFileList_8 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_8);
  
 

 

ok_Hash.put("tFileList_8", true);
end_Hash.put("tFileList_8", System.currentTimeMillis());




/**
 * [tFileList_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tFileList_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_8 finally ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

 



/**
 * [tFileList_8 finally ] stop
 */

	
	/**
	 * [tFileInputXML_7 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_7";

	

 



/**
 * [tFileInputXML_7 finally ] stop
 */

	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_7_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_7_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_7_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tDBOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_16";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_16") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_16 = null;
                if ((pstmtToClose_tDBOutput_16 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_16")) != null) {
                    pstmtToClose_tDBOutput_16.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_16") == null){
            java.sql.Connection ctn_tDBOutput_16 = null;
            if((ctn_tDBOutput_16 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_16")) != null){
                try {
                    ctn_tDBOutput_16.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_16) {
                    String errorMessage_tDBOutput_16 = "failed to close the connection in tDBOutput_16 :" + sqlEx_tDBOutput_16.getMessage();
                    System.err.println(errorMessage_tDBOutput_16);
                }
            }
        }
    }
 



/**
 * [tDBOutput_16 finally ] stop
 */

	
	/**
	 * [tLogRow_16 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_8_SUBPROCESS_STATE", 1);
	}
	

public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";

	
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */
	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_2", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
				talendLogs_LOGS.addMessage("tDie", "tDie_2", 5, "the end is near", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_2_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_2) {
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_2_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 process_data_end ] stop
 */
	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
					this.catdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Long
				
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
					// java.util.Date
				
						writeDate(this.catdt,dos);
					
					// Long
				
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfvmp_controldrugStruct implements routines.system.IPersistableRow<copyOfvmp_controldrugStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String vpid;

				public String getVpid () {
					return this.vpid;
				}
				
			    public Long catcd;

				public Long getCatcd () {
					return this.catcd;
				}
				
			    public java.util.Date catdt;

				public java.util.Date getCatdt () {
					return this.catdt;
				}
				
			    public Long cat_prevcd;

				public Long getCat_prevcd () {
					return this.cat_prevcd;
				}
				
			    public Object col_val_hash;

				public Object getCol_val_hash () {
					return this.col_val_hash;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.vpid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.catcd = null;
           				} else {
           			    	this.catcd = dis.readLong();
           				}
					
					this.catdt = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cat_prevcd = null;
           				} else {
           			    	this.cat_prevcd = dis.readLong();
           				}
					
						this.col_val_hash = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.vpid,dos);
					
					// Long
				
						if(this.catcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.catcd);
		            	}
					
					// java.util.Date
				
						writeDate(this.catdt,dos);
					
					// Long
				
						if(this.cat_prevcd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cat_prevcd);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.col_val_hash);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vpid="+vpid);
		sb.append(",catcd="+String.valueOf(catcd));
		sb.append(",catdt="+String.valueOf(catdt));
		sb.append(",cat_prevcd="+String.valueOf(cat_prevcd));
		sb.append(",col_val_hash="+String.valueOf(col_val_hash));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfvmp_controldrugStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public routines.system.Document vmp_doc;

				public routines.system.Document getVmp_doc () {
					return this.vmp_doc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
						this.vmp_doc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.vmp_doc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("vmp_doc="+String.valueOf(vmp_doc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();
copyOfvmp_controldrugStruct copyOfvmp_controldrug = new copyOfvmp_controldrugStruct();
row28Struct row28 = new row28Struct();



	
	/**
	 * [tFileList_6 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_6 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_6", false);
		start_Hash.put("tFileList_6", System.currentTimeMillis());
		
	
	currentComponent="tFileList_6";

	
		int tos_count_tFileList_6 = 0;
		
	
 
     
    
  String directory_tFileList_6 = context.dmd_file_path;
  final java.util.List<String> maskList_tFileList_6 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_6 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_6.add("f_vmp2_3*.xml");  
  for (final String filemask_tFileList_6 : maskList_tFileList_6) {
	String filemask_compile_tFileList_6 = filemask_tFileList_6;
	
		filemask_compile_tFileList_6 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_6.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_6 = java.util.regex.Pattern.compile(filemask_compile_tFileList_6, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_6.add(fileNamePattern_tFileList_6);
  }
  int NB_FILEtFileList_6 = 0;

  final boolean case_sensitive_tFileList_6 = false;
    final java.util.List<java.io.File> list_tFileList_6 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_6 = new java.util.HashSet<String>();
	java.io.File file_tFileList_6 = new java.io.File(directory_tFileList_6);
    
		file_tFileList_6.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_6 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_6 : patternList_tFileList_6) {
          	if (fileNamePattern_tFileList_6.matcher(fileName_tFileList_6).matches()){
					if(!filePath_tFileList_6.contains(file.getAbsolutePath())) {
			          list_tFileList_6.add(file);
			          filePath_tFileList_6.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_6);
    
    for (int i_tFileList_6 = 0; i_tFileList_6 < list_tFileList_6.size(); i_tFileList_6++){
      java.io.File files_tFileList_6 = list_tFileList_6.get(i_tFileList_6);
      String fileName_tFileList_6 = files_tFileList_6.getName();
      
      String currentFileName_tFileList_6 = files_tFileList_6.getName(); 
      String currentFilePath_tFileList_6 = files_tFileList_6.getAbsolutePath();
      String currentFileDirectory_tFileList_6 = files_tFileList_6.getParent();
      String currentFileExtension_tFileList_6 = null;
      
      if (files_tFileList_6.getName().contains(".") && files_tFileList_6.isFile()){
        currentFileExtension_tFileList_6 = files_tFileList_6.getName().substring(files_tFileList_6.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_6 = "";
      }
      
      NB_FILEtFileList_6 ++;
      globalMap.put("tFileList_6_CURRENT_FILE", currentFileName_tFileList_6);
      globalMap.put("tFileList_6_CURRENT_FILEPATH", currentFilePath_tFileList_6);
      globalMap.put("tFileList_6_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_6);
      globalMap.put("tFileList_6_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_6);
      globalMap.put("tFileList_6_NB_FILE", NB_FILEtFileList_6);
      
 



/**
 * [tFileList_6 begin ] stop
 */
	
	/**
	 * [tFileList_6 main ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

 


	tos_count_tFileList_6++;

/**
 * [tFileList_6 main ] stop
 */
	
	/**
	 * [tFileList_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

 



/**
 * [tFileList_6 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_6++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row28", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfvmp_controldrug", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row27", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate6", 1, "exec" + NB_ITERATE_tFileInputXML_6);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_6_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_6_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tXMLMap_6_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_6_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_6_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_6_TXMLMAP_OUT__Struct Var__tXMLMap_6_TXMLMAP_OUT = new Var__tXMLMap_6_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfvmp_controldrugStruct copyOfvmp_controldrug_tmp = new copyOfvmp_controldrugStruct();
copyOfvmp_controldrugStruct copyOfvmp_controldrug_save = null;
//the aggregate variable
copyOfvmp_controldrugStruct copyOfvmp_controldrug_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_6 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_6",allOutsForAggregate_tXMLMap_6);
// ###############################
class TreeNode_API_tXMLMap_6_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Short get_Short(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Short(content);
	}
	Long get_Long(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Long(content);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	BigDecimal get_BigDecimal(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_BigDecimal(content);
	}
}
			TreeNode_API_tXMLMap_6_TXMLMAP_OUT treeNodeAPI_tXMLMap_6_TXMLMAP_OUT = new TreeNode_API_tXMLMap_6_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_6_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_6_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_6_TXMLMAP_OUT xml_api_tXMLMap_6_TXMLMAP_OUT = new XML_API_tXMLMap_6_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_6_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_6_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_6", false);
		start_Hash.put("tFileInputXML_6", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_6";

	
		int tos_count_tFileInputXML_6 = 0;
		

	

int nb_line_tFileInputXML_6 = 0;

	String os_tFileInputXML_6 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_6=false;
	if(os_tFileInputXML_6.indexOf("windows") > -1 || os_tFileInputXML_6.indexOf("nt") > -1){
		isWindows_tFileInputXML_6=true;
	}
class NameSpaceTool_tFileInputXML_6 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_6{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_6 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_6 = null;
try {
	filename_tFileInputXML_6 = (String)globalMap.get("tFileList_6_CURRENT_FILEPATH");
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_6 != null && filename_tFileInputXML_6 instanceof String && filename_tFileInputXML_6.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_6){
		filename_tFileInputXML_6 = filename_tFileInputXML_6.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_6 = true;
org.dom4j.Document doc_tFileInputXML_6 = null;
java.io.Closeable toClose_tFileInputXML_6 = null;
try{
	if(filename_tFileInputXML_6 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_6 = (java.io.InputStream)filename_tFileInputXML_6;
		toClose_tFileInputXML_6 = inputStream_tFileInputXML_6;
		doc_tFileInputXML_6 = reader_tFileInputXML_6.read(inputStream_tFileInputXML_6);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_6 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_6)),"ISO-8859-15");
		toClose_tFileInputXML_6 = unicodeReader_tFileInputXML_6;
		org.xml.sax.InputSource in_tFileInputXML_6= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_6);
		doc_tFileInputXML_6 = reader_tFileInputXML_6.read(in_tFileInputXML_6);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_6 = false;
} finally {
	if(toClose_tFileInputXML_6!=null) {
		toClose_tFileInputXML_6.close();
	}
}
if(isValidFile_tFileInputXML_6){
NameSpaceTool_tFileInputXML_6 nsTool_tFileInputXML_6 = new NameSpaceTool_tFileInputXML_6();
nsTool_tFileInputXML_6.countNSMap(doc_tFileInputXML_6.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_6 = nsTool_tFileInputXML_6.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_6 = doc_tFileInputXML_6.createXPath(nsTool_tFileInputXML_6.addDefaultNSPrefix("/"));  
x_tFileInputXML_6.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_6); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_6 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_6.selectNodes(doc_tFileInputXML_6);	
XML_API_tFileInputXML_6 xml_api_tFileInputXML_6 = new XML_API_tFileInputXML_6();
String str_tFileInputXML_6 = "";
org.dom4j.Node node_tFileInputXML_6 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_6=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_6{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_6 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_6 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_6 xPathUtil_tFileInputXML_6 = new XPathUtil_tFileInputXML_6();
	xPathUtil_tFileInputXML_6.initXPaths(xpaths_tFileInputXML_6, nsTool_tFileInputXML_6, xmlNameSpaceMap_tFileInputXML_6);
for (org.dom4j.Node temp_tFileInputXML_6: nodeList_tFileInputXML_6) {
		nb_line_tFileInputXML_6++;
		
	row27 = null;			
	boolean whetherReject_tFileInputXML_6 = false;
	row27 = new row27Struct();
	try{
    Object obj0_tFileInputXML_6 = xpaths_tFileInputXML_6.get(0).evaluate(temp_tFileInputXML_6);
    if(obj0_tFileInputXML_6 == null) {
    	node_tFileInputXML_6 = null;
		str_tFileInputXML_6 = null;
    	
    } else if(obj0_tFileInputXML_6 instanceof org.dom4j.Node) {
    	node_tFileInputXML_6 = (org.dom4j.Node)obj0_tFileInputXML_6;
		str_tFileInputXML_6 = node_tFileInputXML_6.asXML();
    } else if(obj0_tFileInputXML_6 instanceof String || obj0_tFileInputXML_6 instanceof Number){
    	node_tFileInputXML_6 = temp_tFileInputXML_6;
    	str_tFileInputXML_6 = String.valueOf(obj0_tFileInputXML_6);
    } else if(obj0_tFileInputXML_6 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_6 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_6;
    	node_tFileInputXML_6 = nodes_tFileInputXML_6.size()>0 ? nodes_tFileInputXML_6.get(0) : null;
		str_tFileInputXML_6 = node_tFileInputXML_6==null?null:node_tFileInputXML_6.asXML();
	}
								row27.vmp_doc = ParserUtils.parseTo_Document(str_tFileInputXML_6,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_6 = true;
                System.err.println(e.getMessage());
                row27 = null;
    }
			
			

 



/**
 * [tFileInputXML_6 begin ] stop
 */
	
	/**
	 * [tFileInputXML_6 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_6";

	

 


	tos_count_tFileInputXML_6++;

/**
 * [tFileInputXML_6 main ] stop
 */
	
	/**
	 * [tFileInputXML_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_6";

	

 



/**
 * [tFileInputXML_6 process_data_begin ] stop
 */
// Start of branch "row27"
if(row27 != null) { 



	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row27");
					}
					

	boolean rejectedInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_6_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_6_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_6_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setOriginalLoop("/VIRTUAL_MED_PRODUCTS/CONTROL_DRUG_INFO/CONTROL_INFO");
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setIsOptional(true);
					if(row27.vmp_doc == null 
						|| row27.vmp_doc.getDocument() == null) {
						throw new RuntimeException("row27.vmp_doc can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_6_TXMLMAP_OUT_0 = row27.vmp_doc.getDocument();
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_6_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setDefineNS(false);
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_6_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_6_TXMLMAP_OUT.countNSMap(doc_tXMLMap_6_TXMLMAP_OUT_0.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT_0 = nsTool_tXMLMap_6_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("row27.vmp_doc:/VIRTUAL_MED_PRODUCTS/CONTROL_DRUG_INFO/CONTROL_INFO/VPID");
					relativePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("VPID");
					
					absolutePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("row27.vmp_doc:/VIRTUAL_MED_PRODUCTS/CONTROL_DRUG_INFO/CONTROL_INFO/CATCD");
					relativePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("CATCD");
					
					absolutePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("row27.vmp_doc:/VIRTUAL_MED_PRODUCTS/CONTROL_DRUG_INFO/CONTROL_INFO/CAT_PREVCD");
					relativePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("CAT_PREVCD");
					
					absolutePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("row27.vmp_doc:/VIRTUAL_MED_PRODUCTS/CONTROL_DRUG_INFO/CONTROL_INFO/CATDT");
					relativePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("CATDT");
					
					String[] absolutePathMappings_tXMLMap_6_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_6_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_6_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_6_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_6_TXMLMAP_OUT_0 = docToFlat_tXMLMap_6_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_6_TXMLMAP_OUT_0: resultSet_tXMLMap_6_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_6_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_6_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_6_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_6_TXMLMAP_OUT_0 : oneRow_tXMLMap_6_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.put(entry_tXMLMap_6_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_6_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_6_TXMLMAP_OUT__Struct Var = Var__tXMLMap_6_TXMLMAP_OUT;
		// ###############################
		// # Output table

copyOfvmp_controldrug = null;


// # Output table : 'copyOfvmp_controldrug'

copyOfvmp_controldrug_tmp = new copyOfvmp_controldrugStruct();
copyOfvmp_controldrug_tmp.vpid = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.get_String("row27.vmp_doc:/VIRTUAL_MED_PRODUCTS/CONTROL_DRUG_INFO/CONTROL_INFO/VPID");
copyOfvmp_controldrug_tmp.catcd = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.get_Long("row27.vmp_doc:/VIRTUAL_MED_PRODUCTS/CONTROL_DRUG_INFO/CONTROL_INFO/CATCD");
copyOfvmp_controldrug_tmp.catdt = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.get_Date("row27.vmp_doc:/VIRTUAL_MED_PRODUCTS/CONTROL_DRUG_INFO/CONTROL_INFO/CATDT" , "yyyy-MM-dd");
copyOfvmp_controldrug_tmp.cat_prevcd = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.get_Long("row27.vmp_doc:/VIRTUAL_MED_PRODUCTS/CONTROL_DRUG_INFO/CONTROL_INFO/CAT_PREVCD");
copyOfvmp_controldrug_tmp.col_val_hash = null;allOutsForAggregate_tXMLMap_6.add(copyOfvmp_controldrug_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_6_TXMLMAP_OUT++;

/**
 * [tXMLMap_6_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_6_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_6_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row27"




	
	/**
	 * [tFileInputXML_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_6";

	

 



/**
 * [tFileInputXML_6 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_6 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_6";

	


}
	}
	globalMap.put("tFileInputXML_6_NB_LINE",nb_line_tFileInputXML_6);

	
 

ok_Hash.put("tFileInputXML_6", true);
end_Hash.put("tFileInputXML_6", System.currentTimeMillis());




/**
 * [tFileInputXML_6 end ] stop
 */

	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tXMLMap_6_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_6_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_6_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tLogRow_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_22", false);
		start_Hash.put("tLogRow_22", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tLogRow_22 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_22 = "|";
		java.io.PrintStream consoleOut_tLogRow_22 = null;	

 		StringBuilder strBuffer_tLogRow_22 = null;
		int nb_line_tLogRow_22 = 0;
///////////////////////    			



 



/**
 * [tLogRow_22 begin ] stop
 */



	
	/**
	 * [tDBOutput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_22", false);
		start_Hash.put("tDBOutput_22", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfvmp_controldrug");
					}
				
		int tos_count_tDBOutput_22 = 0;
		





String dbschema_tDBOutput_22 = null;
	dbschema_tDBOutput_22 = context.dmd_db_schema;
	

String tableName_tDBOutput_22 = null;
if(dbschema_tDBOutput_22 == null || dbschema_tDBOutput_22.trim().length() == 0) {
	tableName_tDBOutput_22 = ("dmd_vmp_controldrug");
} else {
	tableName_tDBOutput_22 = dbschema_tDBOutput_22 + "\".\"" + ("dmd_vmp_controldrug");
}

int nb_line_tDBOutput_22 = 0;
int nb_line_update_tDBOutput_22 = 0;
int nb_line_inserted_tDBOutput_22 = 0;
int nb_line_deleted_tDBOutput_22 = 0;
int nb_line_rejected_tDBOutput_22 = 0;

int deletedCount_tDBOutput_22=0;
int updatedCount_tDBOutput_22=0;
int insertedCount_tDBOutput_22=0;
int rejectedCount_tDBOutput_22=0;

boolean whetherReject_tDBOutput_22 = false;

java.sql.Connection conn_tDBOutput_22 = null;
String dbUser_tDBOutput_22 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_22 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_22 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_22 = context.dmd_db_password; 

    String dbPwd_tDBOutput_22 = decryptedPassword_tDBOutput_22;

    conn_tDBOutput_22 = java.sql.DriverManager.getConnection(url_tDBOutput_22,dbUser_tDBOutput_22,dbPwd_tDBOutput_22);
	
	resourceMap.put("conn_tDBOutput_22", conn_tDBOutput_22);
        conn_tDBOutput_22.setAutoCommit(false);
        int commitEvery_tDBOutput_22 = 10000;
        int commitCounter_tDBOutput_22 = 0;


   int batchSize_tDBOutput_22 = 10000;
   int batchSizeCounter_tDBOutput_22=0;

int count_tDBOutput_22=0;
            int rsTruncCountNumber_tDBOutput_22 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_22 = conn_tDBOutput_22.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_22 = stmtTruncCount_tDBOutput_22.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_22 + "\"")) {
                    if(rsTruncCount_tDBOutput_22.next()) {
                        rsTruncCountNumber_tDBOutput_22 = rsTruncCount_tDBOutput_22.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_22 = conn_tDBOutput_22.createStatement()) {
                stmtTrunc_tDBOutput_22.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_22 + "\"");
                deletedCount_tDBOutput_22 += rsTruncCountNumber_tDBOutput_22;
            }
	    String insert_tDBOutput_22 = "INSERT INTO \"" + tableName_tDBOutput_22 + "\" (\"vpid\",\"catcd\",\"catdt\",\"cat_prevcd\",\"col_val_hash\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_22 = conn_tDBOutput_22.prepareStatement(insert_tDBOutput_22);
	    resourceMap.put("pstmt_tDBOutput_22", pstmt_tDBOutput_22);
	    

 



/**
 * [tDBOutput_22 begin ] stop
 */



	
	/**
	 * [tXMLMap_6_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_6_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_6_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";

	
		int tos_count_tXMLMap_6_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_6 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_6");
for(Object  row_out_tXMLMap_6_TXMLMAP_IN : outs_tXMLMap_6) {//TD512
 



/**
 * [tXMLMap_6_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";

	

	copyOfvmp_controldrug = null;
	if(row_out_tXMLMap_6_TXMLMAP_IN!=null && row_out_tXMLMap_6_TXMLMAP_IN instanceof copyOfvmp_controldrugStruct) {
		copyOfvmp_controldrug = (copyOfvmp_controldrugStruct)row_out_tXMLMap_6_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_6_TXMLMAP_IN++;

/**
 * [tXMLMap_6_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_6_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfvmp_controldrug"
if(copyOfvmp_controldrug != null) { 



	
	/**
	 * [tDBOutput_22 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfvmp_controldrug");
					}
					



            row28 = null;
        whetherReject_tDBOutput_22 = false;
                    if(copyOfvmp_controldrug.vpid == null) {
pstmt_tDBOutput_22.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_22.setString(1, copyOfvmp_controldrug.vpid);
}

                    if(copyOfvmp_controldrug.catcd == null) {
pstmt_tDBOutput_22.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_22.setLong(2, copyOfvmp_controldrug.catcd);
}

                    if(copyOfvmp_controldrug.catdt != null) {
pstmt_tDBOutput_22.setTimestamp(3, new java.sql.Timestamp(copyOfvmp_controldrug.catdt.getTime()));
} else {
pstmt_tDBOutput_22.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(copyOfvmp_controldrug.cat_prevcd == null) {
pstmt_tDBOutput_22.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_22.setLong(4, copyOfvmp_controldrug.cat_prevcd);
}

                    if(copyOfvmp_controldrug.col_val_hash == null) {
pstmt_tDBOutput_22.setNull(5, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_22.setObject(5, copyOfvmp_controldrug.col_val_hash, java.sql.Types.OTHER);
}

			
    		pstmt_tDBOutput_22.addBatch();
    		nb_line_tDBOutput_22++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_22++;
    		  
            if(!whetherReject_tDBOutput_22) {
                            row28 = new row28Struct();
                                row28.vpid = copyOfvmp_controldrug.vpid;
                                row28.catcd = copyOfvmp_controldrug.catcd;
                                row28.catdt = copyOfvmp_controldrug.catdt;
                                row28.cat_prevcd = copyOfvmp_controldrug.cat_prevcd;
                                row28.col_val_hash = copyOfvmp_controldrug.col_val_hash;
            }
    			if ((batchSize_tDBOutput_22 > 0) && (batchSize_tDBOutput_22 <= batchSizeCounter_tDBOutput_22)) {
                try {
						int countSum_tDBOutput_22 = 0;
						    
						for(int countEach_tDBOutput_22: pstmt_tDBOutput_22.executeBatch()) {
							countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
						}
				    	
				    		insertedCount_tDBOutput_22 += countSum_tDBOutput_22;
				    	
            	    	batchSizeCounter_tDBOutput_22 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_22){
				    	java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(),sqle_tDBOutput_22=null;
				    	String errormessage_tDBOutput_22;
						if (ne_tDBOutput_22 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_22 = new java.sql.SQLException(e_tDBOutput_22.getMessage() + "\ncaused by: " + ne_tDBOutput_22.getMessage(), ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(), ne_tDBOutput_22);
							errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
						}else{
							errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
						}
				    	
				    		if (ne_tDBOutput_22 != null) {
				    			throw(sqle_tDBOutput_22);
				    		}else{
				            	throw(e_tDBOutput_22);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_22++;
                if(commitEvery_tDBOutput_22 <= commitCounter_tDBOutput_22) {
                if ((batchSize_tDBOutput_22 > 0) && (batchSizeCounter_tDBOutput_22 > 0)) {
                try {
                		int countSum_tDBOutput_22 = 0;
                		    
						for(int countEach_tDBOutput_22: pstmt_tDBOutput_22.executeBatch()) {
							countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
						}
            	    	
            	    		insertedCount_tDBOutput_22 += countSum_tDBOutput_22;
            	    	
                batchSizeCounter_tDBOutput_22 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_22){
			    	java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(),sqle_tDBOutput_22=null;
			    	String errormessage_tDBOutput_22;
					if (ne_tDBOutput_22 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_22 = new java.sql.SQLException(e_tDBOutput_22.getMessage() + "\ncaused by: " + ne_tDBOutput_22.getMessage(), ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(), ne_tDBOutput_22);
						errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
					}else{
						errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
					}
			    	
			    		if (ne_tDBOutput_22 != null) {
			    			throw(sqle_tDBOutput_22);
			    		}else{
			            	throw(e_tDBOutput_22);
			            }
			    	
				}
            }
                	conn_tDBOutput_22.commit();
                	
                	commitCounter_tDBOutput_22=0;
                }

 


	tos_count_tDBOutput_22++;

/**
 * [tDBOutput_22 main ] stop
 */
	
	/**
	 * [tDBOutput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	

 



/**
 * [tDBOutput_22 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tLogRow_22 main ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row28");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_22 = new StringBuilder();




   				
	    		if(row28.vpid != null) { //              
                    							
       
				strBuffer_tLogRow_22.append(
				                String.valueOf(row28.vpid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_22.append("|");
    			


   				
	    		if(row28.catcd != null) { //              
                    							
       
				strBuffer_tLogRow_22.append(
				                String.valueOf(row28.catcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_22.append("|");
    			


   				
	    		if(row28.catdt != null) { //              
                    							
       
				strBuffer_tLogRow_22.append(
								FormatterUtils.format_Date(row28.catdt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_22.append("|");
    			


   				
	    		if(row28.cat_prevcd != null) { //              
                    							
       
				strBuffer_tLogRow_22.append(
				                String.valueOf(row28.cat_prevcd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_22.append("|");
    			


   				
	    		if(row28.col_val_hash != null) { //              
                    							
       
				strBuffer_tLogRow_22.append(
				                String.valueOf(row28.col_val_hash)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_22 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_22 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_22);
                    }
                    consoleOut_tLogRow_22.println(strBuffer_tLogRow_22.toString());
                    consoleOut_tLogRow_22.flush();
                    nb_line_tLogRow_22++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_22++;

/**
 * [tLogRow_22 main ] stop
 */
	
	/**
	 * [tLogRow_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

 



/**
 * [tLogRow_22 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

 



/**
 * [tLogRow_22 process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tDBOutput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	

 



/**
 * [tDBOutput_22 process_data_end ] stop
 */

} // End of branch "copyOfvmp_controldrug"




	
	/**
	 * [tXMLMap_6_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_6_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_6_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_6_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_6_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tDBOutput_22 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	



	    try {
				int countSum_tDBOutput_22 = 0;
				if (pstmt_tDBOutput_22 != null && batchSizeCounter_tDBOutput_22 > 0) {
						
					for(int countEach_tDBOutput_22: pstmt_tDBOutput_22.executeBatch()) {
						countSum_tDBOutput_22 += (countEach_tDBOutput_22 < 0 ? 0 : countEach_tDBOutput_22);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_22 += countSum_tDBOutput_22;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_22){
	    	java.sql.SQLException ne_tDBOutput_22 = e_tDBOutput_22.getNextException(),sqle_tDBOutput_22=null;
	    	String errormessage_tDBOutput_22;
			if (ne_tDBOutput_22 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_22 = new java.sql.SQLException(e_tDBOutput_22.getMessage() + "\ncaused by: " + ne_tDBOutput_22.getMessage(), ne_tDBOutput_22.getSQLState(), ne_tDBOutput_22.getErrorCode(), ne_tDBOutput_22);
				errormessage_tDBOutput_22 = sqle_tDBOutput_22.getMessage();
			}else{
				errormessage_tDBOutput_22 = e_tDBOutput_22.getMessage();
			}
	    	
	    		if (ne_tDBOutput_22 != null) {
	    			throw(sqle_tDBOutput_22);
	    		}else{
	            	throw(e_tDBOutput_22);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_22 != null) {
        		
            pstmt_tDBOutput_22.close();
            resourceMap.remove("pstmt_tDBOutput_22");
        }
    resourceMap.put("statementClosed_tDBOutput_22", true);
			
			conn_tDBOutput_22.commit();
			
		
    	conn_tDBOutput_22 .close();
    	
    	resourceMap.put("finish_tDBOutput_22", true);
    	

	nb_line_deleted_tDBOutput_22=nb_line_deleted_tDBOutput_22+ deletedCount_tDBOutput_22;
	nb_line_update_tDBOutput_22=nb_line_update_tDBOutput_22 + updatedCount_tDBOutput_22;
	nb_line_inserted_tDBOutput_22=nb_line_inserted_tDBOutput_22 + insertedCount_tDBOutput_22;
	nb_line_rejected_tDBOutput_22=nb_line_rejected_tDBOutput_22 + rejectedCount_tDBOutput_22;
	
        globalMap.put("tDBOutput_22_NB_LINE",nb_line_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_UPDATED",nb_line_update_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_DELETED",nb_line_deleted_tDBOutput_22);
        globalMap.put("tDBOutput_22_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_22);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfvmp_controldrug");
			  	}
			  	
 

ok_Hash.put("tDBOutput_22", true);
end_Hash.put("tDBOutput_22", System.currentTimeMillis());




/**
 * [tDBOutput_22 end ] stop
 */

	
	/**
	 * [tLogRow_22 end ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	


//////
//////
globalMap.put("tLogRow_22_NB_LINE",nb_line_tLogRow_22);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tLogRow_22", true);
end_Hash.put("tLogRow_22", System.currentTimeMillis());




/**
 * [tLogRow_22 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate6", 2, "exec" + NB_ITERATE_tFileInputXML_6);
						}				
					




	
	/**
	 * [tFileList_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

 



/**
 * [tFileList_6 process_data_end ] stop
 */
	
	/**
	 * [tFileList_6 end ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

  
    }
  globalMap.put("tFileList_6_NB_FILE", NB_FILEtFileList_6);
  

    if (NB_FILEtFileList_6 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_6);
  
 

 

ok_Hash.put("tFileList_6", true);
end_Hash.put("tFileList_6", System.currentTimeMillis());




/**
 * [tFileList_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tFileList_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_6 finally ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

 



/**
 * [tFileList_6 finally ] stop
 */

	
	/**
	 * [tFileInputXML_6 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_6";

	

 



/**
 * [tFileInputXML_6 finally ] stop
 */

	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_6_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_6_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_6_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tDBOutput_22 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_22";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_22") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_22 = null;
                if ((pstmtToClose_tDBOutput_22 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_22")) != null) {
                    pstmtToClose_tDBOutput_22.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_22") == null){
            java.sql.Connection ctn_tDBOutput_22 = null;
            if((ctn_tDBOutput_22 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_22")) != null){
                try {
                    ctn_tDBOutput_22.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_22) {
                    String errorMessage_tDBOutput_22 = "failed to close the connection in tDBOutput_22 :" + sqlEx_tDBOutput_22.getMessage();
                    System.err.println(errorMessage_tDBOutput_22);
                }
            }
        }
    }
 



/**
 * [tDBOutput_22 finally ] stop
 */

	
	/**
	 * [tLogRow_22 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

 



/**
 * [tLogRow_22 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_6_SUBPROCESS_STATE", 1);
	}
	

public void tDie_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_12", false);
		start_Hash.put("tDie_12", System.currentTimeMillis());
		
	
	currentComponent="tDie_12";

	
		int tos_count_tDie_12 = 0;
		

 



/**
 * [tDie_12 begin ] stop
 */
	
	/**
	 * [tDie_12 main ] start
	 */

	

	
	
	currentComponent="tDie_12";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_12", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
				talendLogs_LOGS.addMessage("tDie", "tDie_12", 5, "the end is near", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_12_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_12_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_12_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_12) {
		logIgnoredError(String.format("tDie_12 - tDie failed to log message due to internal error: %s", e_tDie_12), e_tDie_12);
	}
	
	currentComponent = "tDie_12";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_12_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_12++;

/**
 * [tDie_12 main ] stop
 */
	
	/**
	 * [tDie_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_12";

	

 



/**
 * [tDie_12 process_data_begin ] stop
 */
	
	/**
	 * [tDie_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_12";

	

 



/**
 * [tDie_12 process_data_end ] stop
 */
	
	/**
	 * [tDie_12 end ] start
	 */

	

	
	
	currentComponent="tDie_12";

	

 

ok_Hash.put("tDie_12", true);
end_Hash.put("tDie_12", System.currentTimeMillis());




/**
 * [tDie_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_12 finally ] start
	 */

	

	
	
	currentComponent="tDie_12";

	

 



/**
 * [tDie_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_12_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public java.util.Date isiddt;

				public java.util.Date getIsiddt () {
					return this.isiddt;
				}
				
			    public String isidprev;

				public String getIsidprev () {
					return this.isidprev;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.isid = readString(dis);
					
					this.isiddt = readDate(dis);
					
					this.isidprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.isid,dos);
					
					// java.util.Date
				
						writeDate(this.isiddt,dos);
					
					// String
				
						writeString(this.isidprev,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("isid="+isid);
		sb.append(",isiddt="+String.valueOf(isiddt));
		sb.append(",isidprev="+isidprev);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ingredientStruct implements routines.system.IPersistableRow<ingredientStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String isid;

				public String getIsid () {
					return this.isid;
				}
				
			    public java.util.Date isiddt;

				public java.util.Date getIsiddt () {
					return this.isiddt;
				}
				
			    public String isidprev;

				public String getIsidprev () {
					return this.isidprev;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String nm;

				public String getNm () {
					return this.nm;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.isid = readString(dis);
					
					this.isiddt = readDate(dis);
					
					this.isidprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.nm = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.isid,dos);
					
					// java.util.Date
				
						writeDate(this.isiddt,dos);
					
					// String
				
						writeString(this.isidprev,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.nm,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("isid="+isid);
		sb.append(",isiddt="+String.valueOf(isiddt));
		sb.append(",isidprev="+isidprev);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",nm="+nm);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ingredientStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public routines.system.Document ingredient_doc;

				public routines.system.Document getIngredient_doc () {
					return this.ingredient_doc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
						this.ingredient_doc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.ingredient_doc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ingredient_doc="+String.valueOf(ingredient_doc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();
ingredientStruct ingredient = new ingredientStruct();
row17Struct row17 = new row17Struct();



	
	/**
	 * [tFileList_3 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_3", false);
		start_Hash.put("tFileList_3", System.currentTimeMillis());
		
	
	currentComponent="tFileList_3";

	
		int tos_count_tFileList_3 = 0;
		
	
 
     
    
  String directory_tFileList_3 = context.dmd_file_path;
  final java.util.List<String> maskList_tFileList_3 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_3 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_3.add("f_ingredient2_3*.xml");  
  for (final String filemask_tFileList_3 : maskList_tFileList_3) {
	String filemask_compile_tFileList_3 = filemask_tFileList_3;
	
		filemask_compile_tFileList_3 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_3.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_3 = java.util.regex.Pattern.compile(filemask_compile_tFileList_3, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_3.add(fileNamePattern_tFileList_3);
  }
  int NB_FILEtFileList_3 = 0;

  final boolean case_sensitive_tFileList_3 = false;
    final java.util.List<java.io.File> list_tFileList_3 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_3 = new java.util.HashSet<String>();
	java.io.File file_tFileList_3 = new java.io.File(directory_tFileList_3);
    
		file_tFileList_3.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_3 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_3 : patternList_tFileList_3) {
          	if (fileNamePattern_tFileList_3.matcher(fileName_tFileList_3).matches()){
					if(!filePath_tFileList_3.contains(file.getAbsolutePath())) {
			          list_tFileList_3.add(file);
			          filePath_tFileList_3.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_3);
    
    for (int i_tFileList_3 = 0; i_tFileList_3 < list_tFileList_3.size(); i_tFileList_3++){
      java.io.File files_tFileList_3 = list_tFileList_3.get(i_tFileList_3);
      String fileName_tFileList_3 = files_tFileList_3.getName();
      
      String currentFileName_tFileList_3 = files_tFileList_3.getName(); 
      String currentFilePath_tFileList_3 = files_tFileList_3.getAbsolutePath();
      String currentFileDirectory_tFileList_3 = files_tFileList_3.getParent();
      String currentFileExtension_tFileList_3 = null;
      
      if (files_tFileList_3.getName().contains(".") && files_tFileList_3.isFile()){
        currentFileExtension_tFileList_3 = files_tFileList_3.getName().substring(files_tFileList_3.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_3 = "";
      }
      
      NB_FILEtFileList_3 ++;
      globalMap.put("tFileList_3_CURRENT_FILE", currentFileName_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEPATH", currentFilePath_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_3);
      globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
      
 



/**
 * [tFileList_3 begin ] stop
 */
	
	/**
	 * [tFileList_3 main ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 


	tos_count_tFileList_3++;

/**
 * [tFileList_3 main ] stop
 */
	
	/**
	 * [tFileList_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_3++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("ingredient", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tFileInputXML_3);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_3_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tXMLMap_3_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_3_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_3_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_3_TXMLMAP_OUT__Struct Var__tXMLMap_3_TXMLMAP_OUT = new Var__tXMLMap_3_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
ingredientStruct ingredient_tmp = new ingredientStruct();
ingredientStruct ingredient_save = null;
//the aggregate variable
ingredientStruct ingredient_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_3 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_3",allOutsForAggregate_tXMLMap_3);
// ###############################
class TreeNode_API_tXMLMap_3_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Short get_Short(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Short(content);
	}
}
			TreeNode_API_tXMLMap_3_TXMLMAP_OUT treeNodeAPI_tXMLMap_3_TXMLMAP_OUT = new TreeNode_API_tXMLMap_3_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_3_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_3_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_3_TXMLMAP_OUT xml_api_tXMLMap_3_TXMLMAP_OUT = new XML_API_tXMLMap_3_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_3_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_3_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_3", false);
		start_Hash.put("tFileInputXML_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_3";

	
		int tos_count_tFileInputXML_3 = 0;
		

	

int nb_line_tFileInputXML_3 = 0;

	String os_tFileInputXML_3 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_3=false;
	if(os_tFileInputXML_3.indexOf("windows") > -1 || os_tFileInputXML_3.indexOf("nt") > -1){
		isWindows_tFileInputXML_3=true;
	}
class NameSpaceTool_tFileInputXML_3 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_3{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_3 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_3 = null;
try {
	filename_tFileInputXML_3 = (String)globalMap.get("tFileList_3_CURRENT_FILEPATH");
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_3 != null && filename_tFileInputXML_3 instanceof String && filename_tFileInputXML_3.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_3){
		filename_tFileInputXML_3 = filename_tFileInputXML_3.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_3 = true;
org.dom4j.Document doc_tFileInputXML_3 = null;
java.io.Closeable toClose_tFileInputXML_3 = null;
try{
	if(filename_tFileInputXML_3 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_3 = (java.io.InputStream)filename_tFileInputXML_3;
		toClose_tFileInputXML_3 = inputStream_tFileInputXML_3;
		doc_tFileInputXML_3 = reader_tFileInputXML_3.read(inputStream_tFileInputXML_3);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_3 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_3)),"ISO-8859-15");
		toClose_tFileInputXML_3 = unicodeReader_tFileInputXML_3;
		org.xml.sax.InputSource in_tFileInputXML_3= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_3);
		doc_tFileInputXML_3 = reader_tFileInputXML_3.read(in_tFileInputXML_3);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_3 = false;
} finally {
	if(toClose_tFileInputXML_3!=null) {
		toClose_tFileInputXML_3.close();
	}
}
if(isValidFile_tFileInputXML_3){
NameSpaceTool_tFileInputXML_3 nsTool_tFileInputXML_3 = new NameSpaceTool_tFileInputXML_3();
nsTool_tFileInputXML_3.countNSMap(doc_tFileInputXML_3.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_3 = nsTool_tFileInputXML_3.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_3 = doc_tFileInputXML_3.createXPath(nsTool_tFileInputXML_3.addDefaultNSPrefix("/"));  
x_tFileInputXML_3.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_3 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_3.selectNodes(doc_tFileInputXML_3);	
XML_API_tFileInputXML_3 xml_api_tFileInputXML_3 = new XML_API_tFileInputXML_3();
String str_tFileInputXML_3 = "";
org.dom4j.Node node_tFileInputXML_3 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_3=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_3{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_3 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_3 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_3 xPathUtil_tFileInputXML_3 = new XPathUtil_tFileInputXML_3();
	xPathUtil_tFileInputXML_3.initXPaths(xpaths_tFileInputXML_3, nsTool_tFileInputXML_3, xmlNameSpaceMap_tFileInputXML_3);
for (org.dom4j.Node temp_tFileInputXML_3: nodeList_tFileInputXML_3) {
		nb_line_tFileInputXML_3++;
		
	row16 = null;			
	boolean whetherReject_tFileInputXML_3 = false;
	row16 = new row16Struct();
	try{
    Object obj0_tFileInputXML_3 = xpaths_tFileInputXML_3.get(0).evaluate(temp_tFileInputXML_3);
    if(obj0_tFileInputXML_3 == null) {
    	node_tFileInputXML_3 = null;
		str_tFileInputXML_3 = null;
    	
    } else if(obj0_tFileInputXML_3 instanceof org.dom4j.Node) {
    	node_tFileInputXML_3 = (org.dom4j.Node)obj0_tFileInputXML_3;
		str_tFileInputXML_3 = node_tFileInputXML_3.asXML();
    } else if(obj0_tFileInputXML_3 instanceof String || obj0_tFileInputXML_3 instanceof Number){
    	node_tFileInputXML_3 = temp_tFileInputXML_3;
    	str_tFileInputXML_3 = String.valueOf(obj0_tFileInputXML_3);
    } else if(obj0_tFileInputXML_3 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_3;
    	node_tFileInputXML_3 = nodes_tFileInputXML_3.size()>0 ? nodes_tFileInputXML_3.get(0) : null;
		str_tFileInputXML_3 = node_tFileInputXML_3==null?null:node_tFileInputXML_3.asXML();
	}
								row16.ingredient_doc = ParserUtils.parseTo_Document(str_tFileInputXML_3,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_3 = true;
                System.err.println(e.getMessage());
                row16 = null;
    }
			
			

 



/**
 * [tFileInputXML_3 begin ] stop
 */
	
	/**
	 * [tFileInputXML_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	

 


	tos_count_tFileInputXML_3++;

/**
 * [tFileInputXML_3 main ] stop
 */
	
	/**
	 * [tFileInputXML_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	

 



/**
 * [tFileInputXML_3 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					

	boolean rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_3_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setOriginalLoop("/INGREDIENT_SUBSTANCES/ING");
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setIsOptional(false);
				if(row16.ingredient_doc == null || row16.ingredient_doc.getDocument() == null) {
					throw new RuntimeException("row16.ingredient_doc can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT = row16.ingredient_doc.getDocument();
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setDoc(doc_tXMLMap_3_TXMLMAP_OUT);
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_3_TXMLMAP_OUT.countNSMap(doc_tXMLMap_3_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT = nsTool_tXMLMap_3_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT = new String[5];
				String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT = new String[5];
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[0] = "row16.ingredient_doc:/INGREDIENT_SUBSTANCES/ING/INVALID";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[0] = "INVALID";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[1] = "row16.ingredient_doc:/INGREDIENT_SUBSTANCES/ING/ISIDPREV";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[1] = "ISIDPREV";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[2] = "row16.ingredient_doc:/INGREDIENT_SUBSTANCES/ING/ISID";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[2] = "ISID";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[3] = "row16.ingredient_doc:/INGREDIENT_SUBSTANCES/ING/ISIDDT";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[3] = "ISIDDT";
				
				absolutePathMappings_tXMLMap_3_TXMLMAP_OUT[4] = "row16.ingredient_doc:/INGREDIENT_SUBSTANCES/ING/NM";
				relativePathMappings_tXMLMap_3_TXMLMAP_OUT[4] = "NM";
				
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT);
				docToFlat_tXMLMap_3_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_3_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT = docToFlat_tXMLMap_3_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT: resultSet_tXMLMap_3_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_3_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT : oneRow_tXMLMap_3_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT.getKey(),entry_tXMLMap_3_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output tables

ingredient = null;


// # Output table : 'ingredient'

ingredient_tmp = new ingredientStruct();
ingredient_tmp.isid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row16.ingredient_doc:/INGREDIENT_SUBSTANCES/ING/ISID");
ingredient_tmp.isiddt = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_Date("row16.ingredient_doc:/INGREDIENT_SUBSTANCES/ING/ISIDDT" , "yyyy-MM-dd");
ingredient_tmp.isidprev = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row16.ingredient_doc:/INGREDIENT_SUBSTANCES/ING/ISIDPREV");
ingredient_tmp.invalid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_Short("row16.ingredient_doc:/INGREDIENT_SUBSTANCES/ING/INVALID");
ingredient_tmp.nm = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row16.ingredient_doc:/INGREDIENT_SUBSTANCES/ING/NM");allOutsForAggregate_tXMLMap_3.add(ingredient_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_3_TXMLMAP_OUT++;

/**
 * [tXMLMap_3_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tFileInputXML_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	

 



/**
 * [tFileInputXML_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	


}
	}
	globalMap.put("tFileInputXML_3_NB_LINE",nb_line_tFileInputXML_3);

	
 

ok_Hash.put("tFileInputXML_3", true);
end_Hash.put("tFileInputXML_3", System.currentTimeMillis());




/**
 * [tFileInputXML_3 end ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_3_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_3_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tLogRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_14", false);
		start_Hash.put("tLogRow_14", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tLogRow_14 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_14 = "|";
		java.io.PrintStream consoleOut_tLogRow_14 = null;	

 		StringBuilder strBuffer_tLogRow_14 = null;
		int nb_line_tLogRow_14 = 0;
///////////////////////    			



 



/**
 * [tLogRow_14 begin ] stop
 */



	
	/**
	 * [tDBOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_14", false);
		start_Hash.put("tDBOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ingredient");
					}
				
		int tos_count_tDBOutput_14 = 0;
		





String dbschema_tDBOutput_14 = null;
	dbschema_tDBOutput_14 = context.dmd_db_schema;
	

String tableName_tDBOutput_14 = null;
if(dbschema_tDBOutput_14 == null || dbschema_tDBOutput_14.trim().length() == 0) {
	tableName_tDBOutput_14 = ("dmd_lookup_ingredient");
} else {
	tableName_tDBOutput_14 = dbschema_tDBOutput_14 + "\".\"" + ("dmd_lookup_ingredient");
}

int nb_line_tDBOutput_14 = 0;
int nb_line_update_tDBOutput_14 = 0;
int nb_line_inserted_tDBOutput_14 = 0;
int nb_line_deleted_tDBOutput_14 = 0;
int nb_line_rejected_tDBOutput_14 = 0;

int deletedCount_tDBOutput_14=0;
int updatedCount_tDBOutput_14=0;
int insertedCount_tDBOutput_14=0;
int rejectedCount_tDBOutput_14=0;

boolean whetherReject_tDBOutput_14 = false;

java.sql.Connection conn_tDBOutput_14 = null;
String dbUser_tDBOutput_14 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_14 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_14 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_14 = context.dmd_db_password; 

    String dbPwd_tDBOutput_14 = decryptedPassword_tDBOutput_14;

    conn_tDBOutput_14 = java.sql.DriverManager.getConnection(url_tDBOutput_14,dbUser_tDBOutput_14,dbPwd_tDBOutput_14);
	
	resourceMap.put("conn_tDBOutput_14", conn_tDBOutput_14);
        conn_tDBOutput_14.setAutoCommit(false);
        int commitEvery_tDBOutput_14 = 10000;
        int commitCounter_tDBOutput_14 = 0;


   int batchSize_tDBOutput_14 = 10000;
   int batchSizeCounter_tDBOutput_14=0;

int count_tDBOutput_14=0;
            int rsTruncCountNumber_tDBOutput_14 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_14 = conn_tDBOutput_14.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_14 = stmtTruncCount_tDBOutput_14.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_14 + "\"")) {
                    if(rsTruncCount_tDBOutput_14.next()) {
                        rsTruncCountNumber_tDBOutput_14 = rsTruncCount_tDBOutput_14.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_14 = conn_tDBOutput_14.createStatement()) {
                stmtTrunc_tDBOutput_14.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_14 + "\"");
                deletedCount_tDBOutput_14 += rsTruncCountNumber_tDBOutput_14;
            }
	    String insert_tDBOutput_14 = "INSERT INTO \"" + tableName_tDBOutput_14 + "\" (\"isid\",\"isiddt\",\"isidprev\",\"invalid\",\"nm\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_14 = conn_tDBOutput_14.prepareStatement(insert_tDBOutput_14);
	    resourceMap.put("pstmt_tDBOutput_14", pstmt_tDBOutput_14);
	    

 



/**
 * [tDBOutput_14 begin ] stop
 */



	
	/**
	 * [tXMLMap_3_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_3_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	
		int tos_count_tXMLMap_3_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_3 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_3");
for(Object  row_out_tXMLMap_3_TXMLMAP_IN : outs_tXMLMap_3) {//TD512
 



/**
 * [tXMLMap_3_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

	ingredient = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof ingredientStruct) {
		ingredient = (ingredientStruct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_3_TXMLMAP_IN++;

/**
 * [tXMLMap_3_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_3_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "ingredient"
if(ingredient != null) { 



	
	/**
	 * [tDBOutput_14 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"ingredient");
					}
					



            row17 = null;
        whetherReject_tDBOutput_14 = false;
                    if(ingredient.isid == null) {
pstmt_tDBOutput_14.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(1, ingredient.isid);
}

                    if(ingredient.isiddt != null) {
pstmt_tDBOutput_14.setTimestamp(2, new java.sql.Timestamp(ingredient.isiddt.getTime()));
} else {
pstmt_tDBOutput_14.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(ingredient.isidprev == null) {
pstmt_tDBOutput_14.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(3, ingredient.isidprev);
}

                    if(ingredient.invalid == null) {
pstmt_tDBOutput_14.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_14.setShort(4, ingredient.invalid);
}

                    if(ingredient.nm == null) {
pstmt_tDBOutput_14.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(5, ingredient.nm);
}

			
    		pstmt_tDBOutput_14.addBatch();
    		nb_line_tDBOutput_14++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_14++;
    		  
            if(!whetherReject_tDBOutput_14) {
                            row17 = new row17Struct();
                                row17.isid = ingredient.isid;
                                row17.isiddt = ingredient.isiddt;
                                row17.isidprev = ingredient.isidprev;
                                row17.invalid = ingredient.invalid;
                                row17.nm = ingredient.nm;
            }
    			if ((batchSize_tDBOutput_14 > 0) && (batchSize_tDBOutput_14 <= batchSizeCounter_tDBOutput_14)) {
                try {
						int countSum_tDBOutput_14 = 0;
						    
						for(int countEach_tDBOutput_14: pstmt_tDBOutput_14.executeBatch()) {
							countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
						}
				    	
				    		insertedCount_tDBOutput_14 += countSum_tDBOutput_14;
				    	
            	    	batchSizeCounter_tDBOutput_14 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_14){
				    	java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(),sqle_tDBOutput_14=null;
				    	String errormessage_tDBOutput_14;
						if (ne_tDBOutput_14 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_14 = new java.sql.SQLException(e_tDBOutput_14.getMessage() + "\ncaused by: " + ne_tDBOutput_14.getMessage(), ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
							errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
						}else{
							errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
						}
				    	
				    		if (ne_tDBOutput_14 != null) {
				    			throw(sqle_tDBOutput_14);
				    		}else{
				            	throw(e_tDBOutput_14);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_14++;
                if(commitEvery_tDBOutput_14 <= commitCounter_tDBOutput_14) {
                if ((batchSize_tDBOutput_14 > 0) && (batchSizeCounter_tDBOutput_14 > 0)) {
                try {
                		int countSum_tDBOutput_14 = 0;
                		    
						for(int countEach_tDBOutput_14: pstmt_tDBOutput_14.executeBatch()) {
							countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
						}
            	    	
            	    		insertedCount_tDBOutput_14 += countSum_tDBOutput_14;
            	    	
                batchSizeCounter_tDBOutput_14 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_14){
			    	java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(),sqle_tDBOutput_14=null;
			    	String errormessage_tDBOutput_14;
					if (ne_tDBOutput_14 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_14 = new java.sql.SQLException(e_tDBOutput_14.getMessage() + "\ncaused by: " + ne_tDBOutput_14.getMessage(), ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
						errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
					}else{
						errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
					}
			    	
			    		if (ne_tDBOutput_14 != null) {
			    			throw(sqle_tDBOutput_14);
			    		}else{
			            	throw(e_tDBOutput_14);
			            }
			    	
				}
            }
                	conn_tDBOutput_14.commit();
                	
                	commitCounter_tDBOutput_14=0;
                }

 


	tos_count_tDBOutput_14++;

/**
 * [tDBOutput_14 main ] stop
 */
	
	/**
	 * [tDBOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	

 



/**
 * [tDBOutput_14 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tLogRow_14 main ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_14 = new StringBuilder();




   				
	    		if(row17.isid != null) { //              
                    							
       
				strBuffer_tLogRow_14.append(
				                String.valueOf(row17.isid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_14.append("|");
    			


   				
	    		if(row17.isiddt != null) { //              
                    							
       
				strBuffer_tLogRow_14.append(
								FormatterUtils.format_Date(row17.isiddt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_14.append("|");
    			


   				
	    		if(row17.isidprev != null) { //              
                    							
       
				strBuffer_tLogRow_14.append(
				                String.valueOf(row17.isidprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_14.append("|");
    			


   				
	    		if(row17.invalid != null) { //              
                    							
       
				strBuffer_tLogRow_14.append(
				                String.valueOf(row17.invalid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_14.append("|");
    			


   				
	    		if(row17.nm != null) { //              
                    							
       
				strBuffer_tLogRow_14.append(
				                String.valueOf(row17.nm)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_14 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_14 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_14);
                    }
                    consoleOut_tLogRow_14.println(strBuffer_tLogRow_14.toString());
                    consoleOut_tLogRow_14.flush();
                    nb_line_tLogRow_14++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_14++;

/**
 * [tLogRow_14 main ] stop
 */
	
	/**
	 * [tLogRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tDBOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	

 



/**
 * [tDBOutput_14 process_data_end ] stop
 */

} // End of branch "ingredient"




	
	/**
	 * [tXMLMap_3_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_3_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_3_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_3_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tDBOutput_14 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	



	    try {
				int countSum_tDBOutput_14 = 0;
				if (pstmt_tDBOutput_14 != null && batchSizeCounter_tDBOutput_14 > 0) {
						
					for(int countEach_tDBOutput_14: pstmt_tDBOutput_14.executeBatch()) {
						countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_14 += countSum_tDBOutput_14;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_14){
	    	java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(),sqle_tDBOutput_14=null;
	    	String errormessage_tDBOutput_14;
			if (ne_tDBOutput_14 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_14 = new java.sql.SQLException(e_tDBOutput_14.getMessage() + "\ncaused by: " + ne_tDBOutput_14.getMessage(), ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
				errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
			}else{
				errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
			}
	    	
	    		if (ne_tDBOutput_14 != null) {
	    			throw(sqle_tDBOutput_14);
	    		}else{
	            	throw(e_tDBOutput_14);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_14 != null) {
        		
            pstmt_tDBOutput_14.close();
            resourceMap.remove("pstmt_tDBOutput_14");
        }
    resourceMap.put("statementClosed_tDBOutput_14", true);
			
			conn_tDBOutput_14.commit();
			
		
    	conn_tDBOutput_14 .close();
    	
    	resourceMap.put("finish_tDBOutput_14", true);
    	

	nb_line_deleted_tDBOutput_14=nb_line_deleted_tDBOutput_14+ deletedCount_tDBOutput_14;
	nb_line_update_tDBOutput_14=nb_line_update_tDBOutput_14 + updatedCount_tDBOutput_14;
	nb_line_inserted_tDBOutput_14=nb_line_inserted_tDBOutput_14 + insertedCount_tDBOutput_14;
	nb_line_rejected_tDBOutput_14=nb_line_rejected_tDBOutput_14 + rejectedCount_tDBOutput_14;
	
        globalMap.put("tDBOutput_14_NB_LINE",nb_line_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_UPDATED",nb_line_update_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_DELETED",nb_line_deleted_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_14);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ingredient");
			  	}
			  	
 

ok_Hash.put("tDBOutput_14", true);
end_Hash.put("tDBOutput_14", System.currentTimeMillis());




/**
 * [tDBOutput_14 end ] stop
 */

	
	/**
	 * [tLogRow_14 end ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	


//////
//////
globalMap.put("tLogRow_14_NB_LINE",nb_line_tLogRow_14);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tLogRow_14", true);
end_Hash.put("tLogRow_14", System.currentTimeMillis());




/**
 * [tLogRow_14 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tFileInputXML_3);
						}				
					




	
	/**
	 * [tFileList_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 process_data_end ] stop
 */
	
	/**
	 * [tFileList_3 end ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

  
    }
  globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
  

    if (NB_FILEtFileList_3 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_3);
  
 

 

ok_Hash.put("tFileList_3", true);
end_Hash.put("tFileList_3", System.currentTimeMillis());




/**
 * [tFileList_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tFileList_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_3 finally ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 finally ] stop
 */

	
	/**
	 * [tFileInputXML_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	

 



/**
 * [tFileInputXML_3 finally ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_3_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tDBOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_14") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_14 = null;
                if ((pstmtToClose_tDBOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_14")) != null) {
                    pstmtToClose_tDBOutput_14.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_14") == null){
            java.sql.Connection ctn_tDBOutput_14 = null;
            if((ctn_tDBOutput_14 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_14")) != null){
                try {
                    ctn_tDBOutput_14.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_14) {
                    String errorMessage_tDBOutput_14 = "failed to close the connection in tDBOutput_14 :" + sqlEx_tDBOutput_14.getMessage();
                    System.err.println(errorMessage_tDBOutput_14);
                }
            }
        }
    }
 



/**
 * [tDBOutput_14 finally ] stop
 */

	
	/**
	 * [tLogRow_14 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_3_SUBPROCESS_STATE", 1);
	}
	

public void tDie_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_10", false);
		start_Hash.put("tDie_10", System.currentTimeMillis());
		
	
	currentComponent="tDie_10";

	
		int tos_count_tDie_10 = 0;
		

 



/**
 * [tDie_10 begin ] stop
 */
	
	/**
	 * [tDie_10 main ] start
	 */

	

	
	
	currentComponent="tDie_10";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_10", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
				talendLogs_LOGS.addMessage("tDie", "tDie_10", 5, "the end is near", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_10_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_10_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_10_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_10) {
		logIgnoredError(String.format("tDie_10 - tDie failed to log message due to internal error: %s", e_tDie_10), e_tDie_10);
	}
	
	currentComponent = "tDie_10";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_10_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_10++;

/**
 * [tDie_10 main ] stop
 */
	
	/**
	 * [tDie_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_10";

	

 



/**
 * [tDie_10 process_data_begin ] stop
 */
	
	/**
	 * [tDie_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_10";

	

 



/**
 * [tDie_10 process_data_end ] stop
 */
	
	/**
	 * [tDie_10 end ] start
	 */

	

	
	
	currentComponent="tDie_10";

	

 

ok_Hash.put("tDie_10", true);
end_Hash.put("tDie_10", System.currentTimeMillis());




/**
 * [tDie_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_10 finally ] start
	 */

	

	
	
	currentComponent="tDie_10";

	

 



/**
 * [tDie_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_10_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class basisofnameStruct implements routines.system.IPersistableRow<basisofnameStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(basisofnameStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class availrestrictStruct implements routines.system.IPersistableRow<availrestrictStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(availrestrictStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class basisofstrengthStruct implements routines.system.IPersistableRow<basisofstrengthStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(basisofstrengthStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class controldrugcategoryStruct implements routines.system.IPersistableRow<controldrugcategoryStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(controldrugcategoryStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class drugformindStruct implements routines.system.IPersistableRow<drugformindStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(drugformindStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class formStruct implements routines.system.IPersistableRow<formStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(formStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class lic_authStruct implements routines.system.IPersistableRow<lic_authStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lic_authStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ontologyStruct implements routines.system.IPersistableRow<ontologyStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ontologyStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class prescribingstatusStruct implements routines.system.IPersistableRow<prescribingstatusStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public Long cd;

				public Long getCd () {
					return this.cd;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd = null;
           				} else {
           			    	this.cd = dis.readLong();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.cd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cd);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+String.valueOf(cd));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(prescribingstatusStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class routeStruct implements routines.system.IPersistableRow<routeStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(routeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class supplierStruct implements routines.system.IPersistableRow<supplierStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public Short invalid;

				public Short getInvalid () {
					return this.invalid;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.invalid = null;
           				} else {
           			    	this.invalid = dis.readShort();
           				}
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// Short
				
						if(this.invalid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.invalid);
		            	}
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",invalid="+String.valueOf(invalid));
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(supplierStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class uomStruct implements routines.system.IPersistableRow<uomStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public String cd;

				public String getCd () {
					return this.cd;
				}
				
			    public java.util.Date cddt;

				public java.util.Date getCddt () {
					return this.cddt;
				}
				
			    public String cdprev;

				public String getCdprev () {
					return this.cdprev;
				}
				
			    public String desc;

				public String getDesc () {
					return this.desc;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.cd = readString(dis);
					
					this.cddt = readDate(dis);
					
					this.cdprev = readString(dis);
					
					this.desc = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd,dos);
					
					// java.util.Date
				
						writeDate(this.cddt,dos);
					
					// String
				
						writeString(this.cdprev,dos);
					
					// String
				
						writeString(this.desc,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd="+cd);
		sb.append(",cddt="+String.valueOf(cddt));
		sb.append(",cdprev="+cdprev);
		sb.append(",desc="+desc);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(uomStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public routines.system.Document lookup;

				public routines.system.Document getLookup () {
					return this.lookup;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
						this.lookup = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.lookup);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("lookup="+String.valueOf(lookup));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
basisofnameStruct basisofname = new basisofnameStruct();
row5Struct row5 = new row5Struct();
availrestrictStruct availrestrict = new availrestrictStruct();
row4Struct row4 = new row4Struct();
basisofstrengthStruct basisofstrength = new basisofstrengthStruct();
row6Struct row6 = new row6Struct();
controldrugcategoryStruct controldrugcategory = new controldrugcategoryStruct();
row7Struct row7 = new row7Struct();
drugformindStruct drugformind = new drugformindStruct();
row8Struct row8 = new row8Struct();
formStruct form = new formStruct();
row9Struct row9 = new row9Struct();
lic_authStruct lic_auth = new lic_authStruct();
row15Struct row15 = new row15Struct();
ontologyStruct ontology = new ontologyStruct();
row10Struct row10 = new row10Struct();
prescribingstatusStruct prescribingstatus = new prescribingstatusStruct();
row14Struct row14 = new row14Struct();
routeStruct route = new routeStruct();
row12Struct row12 = new row12Struct();
supplierStruct supplier = new supplierStruct();
row11Struct row11 = new row11Struct();
uomStruct uom = new uomStruct();
row13Struct row13 = new row13Struct();



	
	/**
	 * [tFileList_2 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_2", false);
		start_Hash.put("tFileList_2", System.currentTimeMillis());
		
	
	currentComponent="tFileList_2";

	
		int tos_count_tFileList_2 = 0;
		
	
 
     
    
  String directory_tFileList_2 = context.dmd_file_path;
  final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_2.add("f_lookup2_3*.xml");  
  for (final String filemask_tFileList_2 : maskList_tFileList_2) {
	String filemask_compile_tFileList_2 = filemask_tFileList_2;
	
		filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_2.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern.compile(filemask_compile_tFileList_2, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_2.add(fileNamePattern_tFileList_2);
  }
  int NB_FILEtFileList_2 = 0;

  final boolean case_sensitive_tFileList_2 = false;
    final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
	java.io.File file_tFileList_2 = new java.io.File(directory_tFileList_2);
    
		file_tFileList_2.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_2 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
          	if (fileNamePattern_tFileList_2.matcher(fileName_tFileList_2).matches()){
					if(!filePath_tFileList_2.contains(file.getAbsolutePath())) {
			          list_tFileList_2.add(file);
			          filePath_tFileList_2.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_2);
    
    for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2.size(); i_tFileList_2++){
      java.io.File files_tFileList_2 = list_tFileList_2.get(i_tFileList_2);
      String fileName_tFileList_2 = files_tFileList_2.getName();
      
      String currentFileName_tFileList_2 = files_tFileList_2.getName(); 
      String currentFilePath_tFileList_2 = files_tFileList_2.getAbsolutePath();
      String currentFileDirectory_tFileList_2 = files_tFileList_2.getParent();
      String currentFileExtension_tFileList_2 = null;
      
      if (files_tFileList_2.getName().contains(".") && files_tFileList_2.isFile()){
        currentFileExtension_tFileList_2 = files_tFileList_2.getName().substring(files_tFileList_2.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_2 = "";
      }
      
      NB_FILEtFileList_2 ++;
      globalMap.put("tFileList_2_CURRENT_FILE", currentFileName_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEPATH", currentFilePath_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_2);
      globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
      
 



/**
 * [tFileList_2 begin ] stop
 */
	
	/**
	 * [tFileList_2 main ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 


	tos_count_tFileList_2++;

/**
 * [tFileList_2 main ] stop
 */
	
	/**
	 * [tFileList_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("basisofname", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("supplier", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("availrestrict", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("form", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("prescribingstatus", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("route", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("controldrugcategory", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("drugformind", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("lic_auth", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("basisofstrength", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("ontology", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("uom", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileInputXML_2);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_2_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tXMLMap_2_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_2_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_2_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_2_TXMLMAP_OUT__Struct Var__tXMLMap_2_TXMLMAP_OUT = new Var__tXMLMap_2_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
basisofnameStruct basisofname_tmp = new basisofnameStruct();
basisofnameStruct basisofname_save = null;
//the aggregate variable
basisofnameStruct basisofname_aggregate = null;
availrestrictStruct availrestrict_tmp = new availrestrictStruct();
availrestrictStruct availrestrict_save = null;
//the aggregate variable
availrestrictStruct availrestrict_aggregate = null;
basisofstrengthStruct basisofstrength_tmp = new basisofstrengthStruct();
basisofstrengthStruct basisofstrength_save = null;
//the aggregate variable
basisofstrengthStruct basisofstrength_aggregate = null;
controldrugcategoryStruct controldrugcategory_tmp = new controldrugcategoryStruct();
controldrugcategoryStruct controldrugcategory_save = null;
//the aggregate variable
controldrugcategoryStruct controldrugcategory_aggregate = null;
drugformindStruct drugformind_tmp = new drugformindStruct();
drugformindStruct drugformind_save = null;
//the aggregate variable
drugformindStruct drugformind_aggregate = null;
formStruct form_tmp = new formStruct();
formStruct form_save = null;
//the aggregate variable
formStruct form_aggregate = null;
lic_authStruct lic_auth_tmp = new lic_authStruct();
lic_authStruct lic_auth_save = null;
//the aggregate variable
lic_authStruct lic_auth_aggregate = null;
ontologyStruct ontology_tmp = new ontologyStruct();
ontologyStruct ontology_save = null;
//the aggregate variable
ontologyStruct ontology_aggregate = null;
prescribingstatusStruct prescribingstatus_tmp = new prescribingstatusStruct();
prescribingstatusStruct prescribingstatus_save = null;
//the aggregate variable
prescribingstatusStruct prescribingstatus_aggregate = null;
routeStruct route_tmp = new routeStruct();
routeStruct route_save = null;
//the aggregate variable
routeStruct route_aggregate = null;
supplierStruct supplier_tmp = new supplierStruct();
supplierStruct supplier_save = null;
//the aggregate variable
supplierStruct supplier_aggregate = null;
uomStruct uom_tmp = new uomStruct();
uomStruct uom_save = null;
//the aggregate variable
uomStruct uom_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_2 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_2",allOutsForAggregate_tXMLMap_2);
// ###############################
class TreeNode_API_tXMLMap_2_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	Long get_Long(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Long(content);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Short get_Short(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Short(content);
	}
}
			TreeNode_API_tXMLMap_2_TXMLMAP_OUT treeNodeAPI_tXMLMap_2_TXMLMAP_OUT = new TreeNode_API_tXMLMap_2_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_2_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_2_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_2_TXMLMAP_OUT xml_api_tXMLMap_2_TXMLMAP_OUT = new XML_API_tXMLMap_2_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_2_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_2_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";

	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class NameSpaceTool_tFileInputXML_2 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = (String)globalMap.get("tFileList_2_CURRENT_FILEPATH");
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_2 = true;
org.dom4j.Document doc_tFileInputXML_2 = null;
java.io.Closeable toClose_tFileInputXML_2 = null;
try{
	if(filename_tFileInputXML_2 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream)filename_tFileInputXML_2;
		toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(inputStream_tFileInputXML_2);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_2)),"ISO-8859-15");
		toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
		org.xml.sax.InputSource in_tFileInputXML_2= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_2);
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(in_tFileInputXML_2);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_2 = false;
} finally {
	if(toClose_tFileInputXML_2!=null) {
		toClose_tFileInputXML_2.close();
	}
}
if(isValidFile_tFileInputXML_2){
NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2.createXPath(nsTool_tFileInputXML_2.addDefaultNSPrefix("/"));  
x_tFileInputXML_2.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_2.selectNodes(doc_tFileInputXML_2);	
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
String str_tFileInputXML_2 = "";
org.dom4j.Node node_tFileInputXML_2 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_2=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_2{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_2 xPathUtil_tFileInputXML_2 = new XPathUtil_tFileInputXML_2();
	xPathUtil_tFileInputXML_2.initXPaths(xpaths_tFileInputXML_2, nsTool_tFileInputXML_2, xmlNameSpaceMap_tFileInputXML_2);
for (org.dom4j.Node temp_tFileInputXML_2: nodeList_tFileInputXML_2) {
		nb_line_tFileInputXML_2++;
		
	row3 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row3 = new row3Struct();
	try{
    Object obj0_tFileInputXML_2 = xpaths_tFileInputXML_2.get(0).evaluate(temp_tFileInputXML_2);
    if(obj0_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
		str_tFileInputXML_2 = null;
    	
    } else if(obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj0_tFileInputXML_2;
		str_tFileInputXML_2 = node_tFileInputXML_2.asXML();
    } else if(obj0_tFileInputXML_2 instanceof String || obj0_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj0_tFileInputXML_2);
    } else if(obj0_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
		str_tFileInputXML_2 = node_tFileInputXML_2==null?null:node_tFileInputXML_2.asXML();
	}
								row3.lookup = ParserUtils.parseTo_Document(str_tFileInputXML_2,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_2 = true;
                System.err.println(e.getMessage());
                row3 = null;
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";

	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";

	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

	boolean rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_2_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_0.setOriginalLoop("/LOOKUP/BASIS_OF_NAME/INFO");
					docToFlat_tXMLMap_2_TXMLMAP_OUT_0.setIsOptional(true);
					if(row3.lookup == null 
						|| row3.lookup.getDocument() == null) {
						throw new RuntimeException("row3.lookup can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT_0 = row3.lookup.getDocument();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_2_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_0.setDefineNS(false);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT_0.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_0 = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../SUPPLIER/INFO/INVALID");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../AVAILABILITY_RESTRICTION/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../BASIS_OF_STRNTH/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../DF_INDICATOR/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../SUPPLIER/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../CONTROL_DRUG_CATEGORY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/FORM/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../FORM/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../AVAILABILITY_RESTRICTION/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../UNIT_OF_MEASURE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/FORM/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../FORM/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../LICENSING_AUTHORITY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../ROUTE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../SUPPLIER/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../DF_INDICATOR/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../LICENSING_AUTHORITY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../SUPPLIER/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/FORM/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../FORM/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../SUPPLIER/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../FORM/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../CONTROL_DRUG_CATEGORY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../UNIT_OF_MEASURE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../UNIT_OF_MEASURE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../ONT_FORM_ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../ONT_FORM_ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../ROUTE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../UNIT_OF_MEASURE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("../../BASIS_OF_STRNTH/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.add("DESC");
					
					String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_2_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT_0 = docToFlat_tXMLMap_2_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT_0: resultSet_tXMLMap_2_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_2_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT_0 : oneRow_tXMLMap_2_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_2_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output table

basisofname = null;


// # Output table : 'basisofname'

basisofname_tmp = new basisofnameStruct();
basisofname_tmp.cd = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Long("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
basisofname_tmp.desc = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");allOutsForAggregate_tXMLMap_2.add(basisofname_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT_1 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_1.setOriginalLoop("/LOOKUP/AVAILABILITY_RESTRICTION/INFO");
					docToFlat_tXMLMap_2_TXMLMAP_OUT_1.setIsOptional(true);
					if(row3.lookup == null 
						|| row3.lookup.getDocument() == null) {
						throw new RuntimeException("row3.lookup can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT_1 = row3.lookup.getDocument();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_1.setDoc(doc_tXMLMap_2_TXMLMAP_OUT_1);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_1.setDefineNS(false);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_1.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT_1.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_1 = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_1.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_1);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../SUPPLIER/INFO/INVALID");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../BASIS_OF_STRNTH/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../DF_INDICATOR/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../SUPPLIER/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../CONTROL_DRUG_CATEGORY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/FORM/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../FORM/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../UNIT_OF_MEASURE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/FORM/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../FORM/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../LICENSING_AUTHORITY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../ROUTE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../SUPPLIER/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../BASIS_OF_NAME/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../DF_INDICATOR/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../LICENSING_AUTHORITY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../SUPPLIER/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/FORM/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../FORM/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../SUPPLIER/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../FORM/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../CONTROL_DRUG_CATEGORY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../UNIT_OF_MEASURE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../UNIT_OF_MEASURE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../ONT_FORM_ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../ONT_FORM_ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../ROUTE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../UNIT_OF_MEASURE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../BASIS_OF_STRNTH/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.add("../../BASIS_OF_NAME/INFO/DESC");
					
					String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_1 = absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT_1 = relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_1.toArray(new String[0]);
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_1.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_1);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_1.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT_1);
					//generate document to flat data
					docToFlat_tXMLMap_2_TXMLMAP_OUT_1.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT_1 = docToFlat_tXMLMap_2_TXMLMAP_OUT_1.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT_1: resultSet_tXMLMap_2_TXMLMAP_OUT_1) { // G_TXM_M_001
						nb_line_tXMLMap_2_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT_1 : oneRow_tXMLMap_2_TXMLMAP_OUT_1.entrySet()) {
							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT_1.getKey(),entry_tXMLMap_2_TXMLMAP_OUT_1.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output table

availrestrict = null;


// # Output table : 'basisofname'

// # Output table : 'availrestrict'

availrestrict_tmp = new availrestrictStruct();
availrestrict_tmp.cd = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Long("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
availrestrict_tmp.desc = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");allOutsForAggregate_tXMLMap_2.add(availrestrict_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT_2 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_2.setOriginalLoop("/LOOKUP/BASIS_OF_STRNTH/INFO");
					docToFlat_tXMLMap_2_TXMLMAP_OUT_2.setIsOptional(true);
					if(row3.lookup == null 
						|| row3.lookup.getDocument() == null) {
						throw new RuntimeException("row3.lookup can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT_2 = row3.lookup.getDocument();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_2.setDoc(doc_tXMLMap_2_TXMLMAP_OUT_2);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_2.setDefineNS(false);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_2.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT_2.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_2 = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_2.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_2);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../SUPPLIER/INFO/INVALID");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../AVAILABILITY_RESTRICTION/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../DF_INDICATOR/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../SUPPLIER/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../CONTROL_DRUG_CATEGORY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/FORM/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../FORM/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../AVAILABILITY_RESTRICTION/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../UNIT_OF_MEASURE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/FORM/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../FORM/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../LICENSING_AUTHORITY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../ROUTE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../SUPPLIER/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../BASIS_OF_NAME/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../DF_INDICATOR/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../LICENSING_AUTHORITY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../SUPPLIER/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/FORM/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../FORM/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../SUPPLIER/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../FORM/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../CONTROL_DRUG_CATEGORY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../UNIT_OF_MEASURE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../UNIT_OF_MEASURE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../ONT_FORM_ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../ONT_FORM_ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../ROUTE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../UNIT_OF_MEASURE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.add("../../BASIS_OF_NAME/INFO/DESC");
					
					String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_2 = absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT_2 = relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_2.toArray(new String[0]);
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_2.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_2);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_2.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT_2);
					//generate document to flat data
					docToFlat_tXMLMap_2_TXMLMAP_OUT_2.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT_2 = docToFlat_tXMLMap_2_TXMLMAP_OUT_2.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT_2: resultSet_tXMLMap_2_TXMLMAP_OUT_2) { // G_TXM_M_001
						nb_line_tXMLMap_2_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT_2 : oneRow_tXMLMap_2_TXMLMAP_OUT_2.entrySet()) {
							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT_2.getKey(),entry_tXMLMap_2_TXMLMAP_OUT_2.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output table

basisofstrength = null;


// # Output table : 'basisofname'

// # Output table : 'availrestrict'

// # Output table : 'basisofstrength'

basisofstrength_tmp = new basisofstrengthStruct();
basisofstrength_tmp.cd = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Long("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
basisofstrength_tmp.desc = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");allOutsForAggregate_tXMLMap_2.add(basisofstrength_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT_3 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_3.setOriginalLoop("/LOOKUP/CONTROL_DRUG_CATEGORY/INFO");
					docToFlat_tXMLMap_2_TXMLMAP_OUT_3.setIsOptional(true);
					if(row3.lookup == null 
						|| row3.lookup.getDocument() == null) {
						throw new RuntimeException("row3.lookup can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT_3 = row3.lookup.getDocument();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_3.setDoc(doc_tXMLMap_2_TXMLMAP_OUT_3);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_3.setDefineNS(false);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_3.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT_3.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_3 = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_3.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_3);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../SUPPLIER/INFO/INVALID");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../AVAILABILITY_RESTRICTION/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../BASIS_OF_STRNTH/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../DF_INDICATOR/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../SUPPLIER/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/FORM/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../FORM/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../AVAILABILITY_RESTRICTION/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../UNIT_OF_MEASURE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/FORM/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../FORM/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../LICENSING_AUTHORITY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../ROUTE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../SUPPLIER/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../BASIS_OF_NAME/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../DF_INDICATOR/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../LICENSING_AUTHORITY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../SUPPLIER/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/FORM/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../FORM/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../SUPPLIER/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../FORM/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../UNIT_OF_MEASURE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../UNIT_OF_MEASURE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../ONT_FORM_ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../ONT_FORM_ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../ROUTE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../UNIT_OF_MEASURE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../BASIS_OF_STRNTH/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.add("../../BASIS_OF_NAME/INFO/DESC");
					
					String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_3 = absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT_3 = relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_3.toArray(new String[0]);
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_3.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_3);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_3.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT_3);
					//generate document to flat data
					docToFlat_tXMLMap_2_TXMLMAP_OUT_3.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT_3 = docToFlat_tXMLMap_2_TXMLMAP_OUT_3.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT_3: resultSet_tXMLMap_2_TXMLMAP_OUT_3) { // G_TXM_M_001
						nb_line_tXMLMap_2_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT_3 : oneRow_tXMLMap_2_TXMLMAP_OUT_3.entrySet()) {
							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT_3.getKey(),entry_tXMLMap_2_TXMLMAP_OUT_3.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output table

controldrugcategory = null;


// # Output table : 'basisofname'

// # Output table : 'availrestrict'

// # Output table : 'basisofstrength'

// # Output table : 'controldrugcategory'

controldrugcategory_tmp = new controldrugcategoryStruct();
controldrugcategory_tmp.cd = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Long("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
controldrugcategory_tmp.desc = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");allOutsForAggregate_tXMLMap_2.add(controldrugcategory_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT_4 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_4.setOriginalLoop("/LOOKUP/DF_INDICATOR/INFO");
					docToFlat_tXMLMap_2_TXMLMAP_OUT_4.setIsOptional(true);
					if(row3.lookup == null 
						|| row3.lookup.getDocument() == null) {
						throw new RuntimeException("row3.lookup can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT_4 = row3.lookup.getDocument();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_4.setDoc(doc_tXMLMap_2_TXMLMAP_OUT_4);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_4.setDefineNS(false);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_4.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT_4.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_4 = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_4.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_4);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../SUPPLIER/INFO/INVALID");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../AVAILABILITY_RESTRICTION/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../BASIS_OF_STRNTH/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../SUPPLIER/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../CONTROL_DRUG_CATEGORY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/FORM/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../FORM/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../AVAILABILITY_RESTRICTION/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../UNIT_OF_MEASURE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/FORM/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../FORM/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../LICENSING_AUTHORITY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../ROUTE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../SUPPLIER/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../BASIS_OF_NAME/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../LICENSING_AUTHORITY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../SUPPLIER/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/FORM/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../FORM/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../SUPPLIER/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../FORM/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../CONTROL_DRUG_CATEGORY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../UNIT_OF_MEASURE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../UNIT_OF_MEASURE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../ONT_FORM_ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../ONT_FORM_ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../ROUTE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../UNIT_OF_MEASURE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../BASIS_OF_STRNTH/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.add("../../BASIS_OF_NAME/INFO/DESC");
					
					String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_4 = absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT_4 = relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_4.toArray(new String[0]);
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_4.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_4);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_4.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT_4);
					//generate document to flat data
					docToFlat_tXMLMap_2_TXMLMAP_OUT_4.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT_4 = docToFlat_tXMLMap_2_TXMLMAP_OUT_4.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT_4: resultSet_tXMLMap_2_TXMLMAP_OUT_4) { // G_TXM_M_001
						nb_line_tXMLMap_2_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT_4 : oneRow_tXMLMap_2_TXMLMAP_OUT_4.entrySet()) {
							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT_4.getKey(),entry_tXMLMap_2_TXMLMAP_OUT_4.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output table

drugformind = null;


// # Output table : 'basisofname'

// # Output table : 'availrestrict'

// # Output table : 'basisofstrength'

// # Output table : 'controldrugcategory'

// # Output table : 'drugformind'

drugformind_tmp = new drugformindStruct();
drugformind_tmp.cd = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Long("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
drugformind_tmp.desc = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");allOutsForAggregate_tXMLMap_2.add(drugformind_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT_5 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_5.setOriginalLoop("/LOOKUP/FORM/INFO");
					docToFlat_tXMLMap_2_TXMLMAP_OUT_5.setIsOptional(true);
					if(row3.lookup == null 
						|| row3.lookup.getDocument() == null) {
						throw new RuntimeException("row3.lookup can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT_5 = row3.lookup.getDocument();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_5.setDoc(doc_tXMLMap_2_TXMLMAP_OUT_5);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_5.setDefineNS(false);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_5.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT_5.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_5 = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_5.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_5);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../SUPPLIER/INFO/INVALID");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../AVAILABILITY_RESTRICTION/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../BASIS_OF_STRNTH/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../DF_INDICATOR/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../SUPPLIER/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../CONTROL_DRUG_CATEGORY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/FORM/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../AVAILABILITY_RESTRICTION/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../UNIT_OF_MEASURE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/FORM/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../LICENSING_AUTHORITY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../ROUTE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../SUPPLIER/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../BASIS_OF_NAME/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../DF_INDICATOR/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../LICENSING_AUTHORITY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../SUPPLIER/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/FORM/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../SUPPLIER/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../CONTROL_DRUG_CATEGORY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../UNIT_OF_MEASURE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../UNIT_OF_MEASURE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../ONT_FORM_ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../ONT_FORM_ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../ROUTE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../UNIT_OF_MEASURE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../BASIS_OF_STRNTH/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.add("../../BASIS_OF_NAME/INFO/DESC");
					
					String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_5 = absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT_5 = relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_5.toArray(new String[0]);
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_5.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_5);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_5.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT_5);
					//generate document to flat data
					docToFlat_tXMLMap_2_TXMLMAP_OUT_5.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT_5 = docToFlat_tXMLMap_2_TXMLMAP_OUT_5.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT_5: resultSet_tXMLMap_2_TXMLMAP_OUT_5) { // G_TXM_M_001
						nb_line_tXMLMap_2_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT_5 : oneRow_tXMLMap_2_TXMLMAP_OUT_5.entrySet()) {
							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT_5.getKey(),entry_tXMLMap_2_TXMLMAP_OUT_5.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output table

form = null;


// # Output table : 'basisofname'

// # Output table : 'availrestrict'

// # Output table : 'basisofstrength'

// # Output table : 'controldrugcategory'

// # Output table : 'drugformind'

// # Output table : 'form'

form_tmp = new formStruct();
form_tmp.cd =  treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/FORM/INFO/CD");
form_tmp.cddt = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Date("row3.lookup:/LOOKUP/FORM/INFO/CDDT" , "yyyy-MM-dd");
form_tmp.cdprev = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
form_tmp.desc = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/FORM/INFO/DESC");allOutsForAggregate_tXMLMap_2.add(form_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT_6 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_6.setOriginalLoop("/LOOKUP/LICENSING_AUTHORITY/INFO");
					docToFlat_tXMLMap_2_TXMLMAP_OUT_6.setIsOptional(true);
					if(row3.lookup == null 
						|| row3.lookup.getDocument() == null) {
						throw new RuntimeException("row3.lookup can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT_6 = row3.lookup.getDocument();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_6.setDoc(doc_tXMLMap_2_TXMLMAP_OUT_6);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_6.setDefineNS(false);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_6.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT_6.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_6 = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_6.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_6);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../SUPPLIER/INFO/INVALID");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../AVAILABILITY_RESTRICTION/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../BASIS_OF_STRNTH/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../DF_INDICATOR/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../SUPPLIER/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../CONTROL_DRUG_CATEGORY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/FORM/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../FORM/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../AVAILABILITY_RESTRICTION/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../UNIT_OF_MEASURE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/FORM/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../FORM/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../ROUTE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../SUPPLIER/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../BASIS_OF_NAME/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../DF_INDICATOR/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../SUPPLIER/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/FORM/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../FORM/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../SUPPLIER/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../FORM/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../CONTROL_DRUG_CATEGORY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../UNIT_OF_MEASURE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../UNIT_OF_MEASURE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../ONT_FORM_ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../ONT_FORM_ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../ROUTE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../UNIT_OF_MEASURE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../BASIS_OF_STRNTH/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.add("../../BASIS_OF_NAME/INFO/DESC");
					
					String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_6 = absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT_6 = relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_6.toArray(new String[0]);
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_6.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_6);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_6.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT_6);
					//generate document to flat data
					docToFlat_tXMLMap_2_TXMLMAP_OUT_6.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT_6 = docToFlat_tXMLMap_2_TXMLMAP_OUT_6.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT_6: resultSet_tXMLMap_2_TXMLMAP_OUT_6) { // G_TXM_M_001
						nb_line_tXMLMap_2_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT_6 : oneRow_tXMLMap_2_TXMLMAP_OUT_6.entrySet()) {
							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT_6.getKey(),entry_tXMLMap_2_TXMLMAP_OUT_6.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output table

lic_auth = null;


// # Output table : 'basisofname'

// # Output table : 'availrestrict'

// # Output table : 'basisofstrength'

// # Output table : 'controldrugcategory'

// # Output table : 'drugformind'

// # Output table : 'form'

// # Output table : 'lic_auth'

lic_auth_tmp = new lic_authStruct();
lic_auth_tmp.cd = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Long("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
lic_auth_tmp.desc = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");allOutsForAggregate_tXMLMap_2.add(lic_auth_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT_7 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_7.setOriginalLoop("/LOOKUP/ONT_FORM_ROUTE/INFO");
					docToFlat_tXMLMap_2_TXMLMAP_OUT_7.setIsOptional(true);
					if(row3.lookup == null 
						|| row3.lookup.getDocument() == null) {
						throw new RuntimeException("row3.lookup can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT_7 = row3.lookup.getDocument();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_7.setDoc(doc_tXMLMap_2_TXMLMAP_OUT_7);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_7.setDefineNS(false);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_7.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT_7.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_7 = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_7.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_7);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../SUPPLIER/INFO/INVALID");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../AVAILABILITY_RESTRICTION/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../BASIS_OF_STRNTH/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../DF_INDICATOR/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../SUPPLIER/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../CONTROL_DRUG_CATEGORY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/FORM/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../FORM/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../AVAILABILITY_RESTRICTION/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../UNIT_OF_MEASURE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/FORM/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../FORM/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../LICENSING_AUTHORITY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../ROUTE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../SUPPLIER/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../BASIS_OF_NAME/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../DF_INDICATOR/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../LICENSING_AUTHORITY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../SUPPLIER/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/FORM/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../FORM/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../SUPPLIER/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../FORM/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../CONTROL_DRUG_CATEGORY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../UNIT_OF_MEASURE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../UNIT_OF_MEASURE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../ROUTE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../UNIT_OF_MEASURE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../BASIS_OF_STRNTH/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.add("../../BASIS_OF_NAME/INFO/DESC");
					
					String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_7 = absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT_7 = relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_7.toArray(new String[0]);
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_7.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_7);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_7.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT_7);
					//generate document to flat data
					docToFlat_tXMLMap_2_TXMLMAP_OUT_7.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT_7 = docToFlat_tXMLMap_2_TXMLMAP_OUT_7.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT_7: resultSet_tXMLMap_2_TXMLMAP_OUT_7) { // G_TXM_M_001
						nb_line_tXMLMap_2_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT_7 : oneRow_tXMLMap_2_TXMLMAP_OUT_7.entrySet()) {
							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT_7.getKey(),entry_tXMLMap_2_TXMLMAP_OUT_7.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output table

ontology = null;


// # Output table : 'basisofname'

// # Output table : 'availrestrict'

// # Output table : 'basisofstrength'

// # Output table : 'controldrugcategory'

// # Output table : 'drugformind'

// # Output table : 'form'

// # Output table : 'lic_auth'

// # Output table : 'ontology'

ontology_tmp = new ontologyStruct();
ontology_tmp.cd = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Long("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
ontology_tmp.desc = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");allOutsForAggregate_tXMLMap_2.add(ontology_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT_8 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_8.setOriginalLoop("/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO");
					docToFlat_tXMLMap_2_TXMLMAP_OUT_8.setIsOptional(true);
					if(row3.lookup == null 
						|| row3.lookup.getDocument() == null) {
						throw new RuntimeException("row3.lookup can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT_8 = row3.lookup.getDocument();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_8.setDoc(doc_tXMLMap_2_TXMLMAP_OUT_8);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_8.setDefineNS(false);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_8.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT_8.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_8 = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_8.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_8);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../SUPPLIER/INFO/INVALID");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../AVAILABILITY_RESTRICTION/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../BASIS_OF_STRNTH/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../DF_INDICATOR/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../SUPPLIER/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../CONTROL_DRUG_CATEGORY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/FORM/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../FORM/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../AVAILABILITY_RESTRICTION/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../UNIT_OF_MEASURE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/FORM/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../FORM/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../LICENSING_AUTHORITY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../ROUTE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../SUPPLIER/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../BASIS_OF_NAME/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../DF_INDICATOR/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../LICENSING_AUTHORITY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../SUPPLIER/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/FORM/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../FORM/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../SUPPLIER/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../FORM/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../CONTROL_DRUG_CATEGORY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../UNIT_OF_MEASURE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../UNIT_OF_MEASURE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../ONT_FORM_ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../ONT_FORM_ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../ROUTE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../UNIT_OF_MEASURE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../BASIS_OF_STRNTH/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.add("../../BASIS_OF_NAME/INFO/DESC");
					
					String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_8 = absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT_8 = relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_8.toArray(new String[0]);
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_8.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_8);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_8.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT_8);
					//generate document to flat data
					docToFlat_tXMLMap_2_TXMLMAP_OUT_8.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT_8 = docToFlat_tXMLMap_2_TXMLMAP_OUT_8.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT_8: resultSet_tXMLMap_2_TXMLMAP_OUT_8) { // G_TXM_M_001
						nb_line_tXMLMap_2_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT_8 : oneRow_tXMLMap_2_TXMLMAP_OUT_8.entrySet()) {
							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT_8.getKey(),entry_tXMLMap_2_TXMLMAP_OUT_8.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output table

prescribingstatus = null;


// # Output table : 'basisofname'

// # Output table : 'availrestrict'

// # Output table : 'basisofstrength'

// # Output table : 'controldrugcategory'

// # Output table : 'drugformind'

// # Output table : 'form'

// # Output table : 'lic_auth'

// # Output table : 'ontology'

// # Output table : 'prescribingstatus'

prescribingstatus_tmp = new prescribingstatusStruct();
prescribingstatus_tmp.cd =  treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Long("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
prescribingstatus_tmp.desc = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");allOutsForAggregate_tXMLMap_2.add(prescribingstatus_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT_9 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_9.setOriginalLoop("/LOOKUP/ROUTE/INFO");
					docToFlat_tXMLMap_2_TXMLMAP_OUT_9.setIsOptional(true);
					if(row3.lookup == null 
						|| row3.lookup.getDocument() == null) {
						throw new RuntimeException("row3.lookup can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT_9 = row3.lookup.getDocument();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_9.setDoc(doc_tXMLMap_2_TXMLMAP_OUT_9);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_9.setDefineNS(false);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_9.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT_9.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_9 = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_9.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_9);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../SUPPLIER/INFO/INVALID");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../AVAILABILITY_RESTRICTION/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../BASIS_OF_STRNTH/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../DF_INDICATOR/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../SUPPLIER/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../CONTROL_DRUG_CATEGORY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/FORM/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../FORM/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../AVAILABILITY_RESTRICTION/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../UNIT_OF_MEASURE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/FORM/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../FORM/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../LICENSING_AUTHORITY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../SUPPLIER/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../BASIS_OF_NAME/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../DF_INDICATOR/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../LICENSING_AUTHORITY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../SUPPLIER/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/FORM/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../FORM/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../SUPPLIER/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../FORM/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../CONTROL_DRUG_CATEGORY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../UNIT_OF_MEASURE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../UNIT_OF_MEASURE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../ONT_FORM_ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../ONT_FORM_ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../UNIT_OF_MEASURE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../BASIS_OF_STRNTH/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.add("../../BASIS_OF_NAME/INFO/DESC");
					
					String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_9 = absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT_9 = relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_9.toArray(new String[0]);
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_9.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_9);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_9.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT_9);
					//generate document to flat data
					docToFlat_tXMLMap_2_TXMLMAP_OUT_9.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT_9 = docToFlat_tXMLMap_2_TXMLMAP_OUT_9.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT_9: resultSet_tXMLMap_2_TXMLMAP_OUT_9) { // G_TXM_M_001
						nb_line_tXMLMap_2_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT_9 : oneRow_tXMLMap_2_TXMLMAP_OUT_9.entrySet()) {
							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT_9.getKey(),entry_tXMLMap_2_TXMLMAP_OUT_9.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output table

route = null;


// # Output table : 'basisofname'

// # Output table : 'availrestrict'

// # Output table : 'basisofstrength'

// # Output table : 'controldrugcategory'

// # Output table : 'drugformind'

// # Output table : 'form'

// # Output table : 'lic_auth'

// # Output table : 'ontology'

// # Output table : 'prescribingstatus'

// # Output table : 'route'

route_tmp = new routeStruct();
route_tmp.cd = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
route_tmp.cddt = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Date("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT" , "yyyy-MM-dd");
route_tmp.cdprev = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
route_tmp.desc = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");allOutsForAggregate_tXMLMap_2.add(route_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT_10 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_10.setOriginalLoop("/LOOKUP/SUPPLIER/INFO");
					docToFlat_tXMLMap_2_TXMLMAP_OUT_10.setIsOptional(true);
					if(row3.lookup == null 
						|| row3.lookup.getDocument() == null) {
						throw new RuntimeException("row3.lookup can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT_10 = row3.lookup.getDocument();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_10.setDoc(doc_tXMLMap_2_TXMLMAP_OUT_10);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_10.setDefineNS(false);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_10.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT_10.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_10 = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_10.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_10);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("INVALID");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../AVAILABILITY_RESTRICTION/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../BASIS_OF_STRNTH/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../DF_INDICATOR/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../CONTROL_DRUG_CATEGORY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/FORM/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../FORM/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../AVAILABILITY_RESTRICTION/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../UNIT_OF_MEASURE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/FORM/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../FORM/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../LICENSING_AUTHORITY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../ROUTE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../BASIS_OF_NAME/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../DF_INDICATOR/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../LICENSING_AUTHORITY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/FORM/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../FORM/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../FORM/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../CONTROL_DRUG_CATEGORY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../UNIT_OF_MEASURE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../UNIT_OF_MEASURE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../ONT_FORM_ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../ONT_FORM_ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../ROUTE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../UNIT_OF_MEASURE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../BASIS_OF_STRNTH/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.add("../../BASIS_OF_NAME/INFO/DESC");
					
					String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_10 = absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT_10 = relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_10.toArray(new String[0]);
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_10.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_10);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_10.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT_10);
					//generate document to flat data
					docToFlat_tXMLMap_2_TXMLMAP_OUT_10.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT_10 = docToFlat_tXMLMap_2_TXMLMAP_OUT_10.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT_10: resultSet_tXMLMap_2_TXMLMAP_OUT_10) { // G_TXM_M_001
						nb_line_tXMLMap_2_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT_10 : oneRow_tXMLMap_2_TXMLMAP_OUT_10.entrySet()) {
							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT_10.getKey(),entry_tXMLMap_2_TXMLMAP_OUT_10.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output table

supplier = null;


// # Output table : 'basisofname'

// # Output table : 'availrestrict'

// # Output table : 'basisofstrength'

// # Output table : 'controldrugcategory'

// # Output table : 'drugformind'

// # Output table : 'form'

// # Output table : 'lic_auth'

// # Output table : 'ontology'

// # Output table : 'prescribingstatus'

// # Output table : 'route'

// # Output table : 'supplier'

supplier_tmp = new supplierStruct();
supplier_tmp.cd = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
supplier_tmp.cddt = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Date("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT" , "yyyy-MM-dd");
supplier_tmp.cdprev = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
supplier_tmp.invalid = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Short("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
supplier_tmp.desc = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");allOutsForAggregate_tXMLMap_2.add(supplier_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

				}//close G_TXM_M_001
					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT_11 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_11.setOriginalLoop("/LOOKUP/UNIT_OF_MEASURE/INFO");
					docToFlat_tXMLMap_2_TXMLMAP_OUT_11.setIsOptional(true);
					if(row3.lookup == null 
						|| row3.lookup.getDocument() == null) {
						throw new RuntimeException("row3.lookup can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT_11 = row3.lookup.getDocument();
					docToFlat_tXMLMap_2_TXMLMAP_OUT_11.setDoc(doc_tXMLMap_2_TXMLMAP_OUT_11);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_11.setDefineNS(false);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_11.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
					
						//old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT_11.getRootElement());
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_11 = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_11.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT_11);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/INVALID");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../SUPPLIER/INFO/INVALID");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../AVAILABILITY_RESTRICTION/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../BASIS_OF_STRNTH/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../DF_INDICATOR/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../SUPPLIER/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../CONTROL_DRUG_CATEGORY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/FORM/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../FORM/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/AVAILABILITY_RESTRICTION/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../AVAILABILITY_RESTRICTION/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/FORM/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../FORM/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../LICENSING_AUTHORITY/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../ROUTE/INFO/CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../SUPPLIER/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../BASIS_OF_NAME/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/DF_INDICATOR/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../DF_INDICATOR/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/LICENSING_AUTHORITY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../LICENSING_AUTHORITY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../SUPPLIER/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/FORM/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../FORM/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/SUPPLIER/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../SUPPLIER/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../VIRTUAL_PRODUCT_PRES_STATUS/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/FORM/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../FORM/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/CONTROL_DRUG_CATEGORY/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../CONTROL_DRUG_CATEGORY/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("CDDT");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../ONT_FORM_ROUTE/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/ONT_FORM_ROUTE/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../ONT_FORM_ROUTE/INFO/DESC");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/ROUTE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../ROUTE/INFO/CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("CDPREV");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/BASIS_OF_STRNTH/INFO/CD");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../BASIS_OF_STRNTH/INFO/CD");
					
					absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("row3.lookup:/LOOKUP/BASIS_OF_NAME/INFO/DESC");
					relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.add("../../BASIS_OF_NAME/INFO/DESC");
					
					String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_11 = absolutePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT_11 = relativePathMappingsList_tXMLMap_2_TXMLMAP_OUT_11.toArray(new String[0]);
					
					docToFlat_tXMLMap_2_TXMLMAP_OUT_11.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT_11);
					docToFlat_tXMLMap_2_TXMLMAP_OUT_11.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT_11);
					//generate document to flat data
					docToFlat_tXMLMap_2_TXMLMAP_OUT_11.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT_11 = docToFlat_tXMLMap_2_TXMLMAP_OUT_11.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT_11: resultSet_tXMLMap_2_TXMLMAP_OUT_11) { // G_TXM_M_001
						nb_line_tXMLMap_2_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT_11 : oneRow_tXMLMap_2_TXMLMAP_OUT_11.entrySet()) {
							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT_11.getKey(),entry_tXMLMap_2_TXMLMAP_OUT_11.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output table

uom = null;


// # Output table : 'basisofname'

// # Output table : 'availrestrict'

// # Output table : 'basisofstrength'

// # Output table : 'controldrugcategory'

// # Output table : 'drugformind'

// # Output table : 'form'

// # Output table : 'lic_auth'

// # Output table : 'ontology'

// # Output table : 'prescribingstatus'

// # Output table : 'route'

// # Output table : 'supplier'

// # Output table : 'uom'

uom_tmp = new uomStruct();
uom_tmp.cd = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CD");
uom_tmp.cddt = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Date("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDDT" , "yyyy-MM-dd");
uom_tmp.cdprev = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/CDPREV");
uom_tmp.desc = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row3.lookup:/LOOKUP/UNIT_OF_MEASURE/INFO/DESC");allOutsForAggregate_tXMLMap_2.add(uom_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_2_TXMLMAP_OUT++;

/**
 * [tXMLMap_2_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_2_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_2_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";

	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";

	


}
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	
 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_2_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_2_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"basisofname");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.dmd_db_schema;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dmd_lookup_basisofname");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dmd_lookup_basisofname");
}

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_2 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_2 = context.dmd_db_password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
            int rsTruncCountNumber_tDBOutput_2 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_2 = stmtTruncCount_tDBOutput_2.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\"")) {
                    if(rsTruncCount_tDBOutput_2.next()) {
                        rsTruncCountNumber_tDBOutput_2 = rsTruncCount_tDBOutput_2.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                stmtTrunc_tDBOutput_2.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_2 + "\"");
                deletedCount_tDBOutput_2 += rsTruncCountNumber_tDBOutput_2;
            }
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */





	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"availrestrict");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.dmd_db_schema;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dmd_lookup_availrestrict");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dmd_lookup_availrestrict");
}

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_3 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_3 = context.dmd_db_password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
            int rsTruncCountNumber_tDBOutput_3 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_3 = stmtTruncCount_tDBOutput_3.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_3 + "\"")) {
                    if(rsTruncCount_tDBOutput_3.next()) {
                        rsTruncCountNumber_tDBOutput_3 = rsTruncCount_tDBOutput_3.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                stmtTrunc_tDBOutput_3.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_3 + "\"");
                deletedCount_tDBOutput_3 += rsTruncCountNumber_tDBOutput_3;
            }
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */





	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
		java.io.PrintStream consoleOut_tLogRow_4 = null;	

 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"basisofstrength");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = context.dmd_db_schema;
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("dmd_lookup_basisofstrength");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("dmd_lookup_basisofstrength");
}

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_4 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_4 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_4 = context.dmd_db_password; 

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;


   int batchSize_tDBOutput_4 = 10000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
            int rsTruncCountNumber_tDBOutput_4 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_4 = stmtTruncCount_tDBOutput_4.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_4 + "\"")) {
                    if(rsTruncCount_tDBOutput_4.next()) {
                        rsTruncCountNumber_tDBOutput_4 = rsTruncCount_tDBOutput_4.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                stmtTrunc_tDBOutput_4.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_4 + "\"");
                deletedCount_tDBOutput_4 += rsTruncCountNumber_tDBOutput_4;
            }
	    String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */





	
	/**
	 * [tLogRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_5", false);
		start_Hash.put("tLogRow_5", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tLogRow_5 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
		java.io.PrintStream consoleOut_tLogRow_5 = null;	

 		StringBuilder strBuffer_tLogRow_5 = null;
		int nb_line_tLogRow_5 = 0;
///////////////////////    			



 



/**
 * [tLogRow_5 begin ] stop
 */



	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"controldrugcategory");
					}
				
		int tos_count_tDBOutput_7 = 0;
		





String dbschema_tDBOutput_7 = null;
	dbschema_tDBOutput_7 = context.dmd_db_schema;
	

String tableName_tDBOutput_7 = null;
if(dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
	tableName_tDBOutput_7 = ("dmd_lookup_controldrugcat");
} else {
	tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\"" + ("dmd_lookup_controldrugcat");
}

int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;
int rejectedCount_tDBOutput_7=0;

boolean whetherReject_tDBOutput_7 = false;

java.sql.Connection conn_tDBOutput_7 = null;
String dbUser_tDBOutput_7 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_7 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_7 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_7 = context.dmd_db_password; 

    String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;

    conn_tDBOutput_7 = java.sql.DriverManager.getConnection(url_tDBOutput_7,dbUser_tDBOutput_7,dbPwd_tDBOutput_7);
	
	resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
        conn_tDBOutput_7.setAutoCommit(false);
        int commitEvery_tDBOutput_7 = 10000;
        int commitCounter_tDBOutput_7 = 0;


   int batchSize_tDBOutput_7 = 10000;
   int batchSizeCounter_tDBOutput_7=0;

int count_tDBOutput_7=0;
            int rsTruncCountNumber_tDBOutput_7 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_7 = stmtTruncCount_tDBOutput_7.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_7 + "\"")) {
                    if(rsTruncCount_tDBOutput_7.next()) {
                        rsTruncCountNumber_tDBOutput_7 = rsTruncCount_tDBOutput_7.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                stmtTrunc_tDBOutput_7.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_7 + "\"");
                deletedCount_tDBOutput_7 += rsTruncCountNumber_tDBOutput_7;
            }
	    String insert_tDBOutput_7 = "INSERT INTO \"" + tableName_tDBOutput_7 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
	    resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
	    

 



/**
 * [tDBOutput_7 begin ] stop
 */





	
	/**
	 * [tLogRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_6", false);
		start_Hash.put("tLogRow_6", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tLogRow_6 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_6 = "|";
		java.io.PrintStream consoleOut_tLogRow_6 = null;	

 		StringBuilder strBuffer_tLogRow_6 = null;
		int nb_line_tLogRow_6 = 0;
///////////////////////    			



 



/**
 * [tLogRow_6 begin ] stop
 */



	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"drugformind");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = context.dmd_db_schema;
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("dmd_lookup_drugformind");
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("dmd_lookup_drugformind");
}

int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_6 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_6 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_6 = context.dmd_db_password; 

    String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

    conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6,dbUser_tDBOutput_6,dbPwd_tDBOutput_6);
	
	resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
        conn_tDBOutput_6.setAutoCommit(false);
        int commitEvery_tDBOutput_6 = 10000;
        int commitCounter_tDBOutput_6 = 0;


   int batchSize_tDBOutput_6 = 10000;
   int batchSizeCounter_tDBOutput_6=0;

int count_tDBOutput_6=0;
            int rsTruncCountNumber_tDBOutput_6 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_6 = stmtTruncCount_tDBOutput_6.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_6 + "\"")) {
                    if(rsTruncCount_tDBOutput_6.next()) {
                        rsTruncCountNumber_tDBOutput_6 = rsTruncCount_tDBOutput_6.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                stmtTrunc_tDBOutput_6.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_6 + "\"");
                deletedCount_tDBOutput_6 += rsTruncCountNumber_tDBOutput_6;
            }
	    String insert_tDBOutput_6 = "INSERT INTO \"" + tableName_tDBOutput_6 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */





	
	/**
	 * [tLogRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_7", false);
		start_Hash.put("tLogRow_7", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tLogRow_7 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_7 = "|";
		java.io.PrintStream consoleOut_tLogRow_7 = null;	

 		StringBuilder strBuffer_tLogRow_7 = null;
		int nb_line_tLogRow_7 = 0;
///////////////////////    			



 



/**
 * [tLogRow_7 begin ] stop
 */



	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"form");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = context.dmd_db_schema;
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("dmd_lookup_form");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("dmd_lookup_form");
}

int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_5 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_5 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_5 = context.dmd_db_password; 

    String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

    conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5,dbUser_tDBOutput_5,dbPwd_tDBOutput_5);
	
	resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
        conn_tDBOutput_5.setAutoCommit(false);
        int commitEvery_tDBOutput_5 = 10000;
        int commitCounter_tDBOutput_5 = 0;


   int batchSize_tDBOutput_5 = 10000;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
            int rsTruncCountNumber_tDBOutput_5 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_5 = stmtTruncCount_tDBOutput_5.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_5 + "\"")) {
                    if(rsTruncCount_tDBOutput_5.next()) {
                        rsTruncCountNumber_tDBOutput_5 = rsTruncCount_tDBOutput_5.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                stmtTrunc_tDBOutput_5.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_5 + "\"");
                deletedCount_tDBOutput_5 += rsTruncCountNumber_tDBOutput_5;
            }
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"cd\",\"cddt\",\"cdprev\",\"desc\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */





	
	/**
	 * [tLogRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_13", false);
		start_Hash.put("tLogRow_13", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tLogRow_13 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_13 = "|";
		java.io.PrintStream consoleOut_tLogRow_13 = null;	

 		StringBuilder strBuffer_tLogRow_13 = null;
		int nb_line_tLogRow_13 = 0;
///////////////////////    			



 



/**
 * [tLogRow_13 begin ] stop
 */



	
	/**
	 * [tDBOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_8", false);
		start_Hash.put("tDBOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lic_auth");
					}
				
		int tos_count_tDBOutput_8 = 0;
		





String dbschema_tDBOutput_8 = null;
	dbschema_tDBOutput_8 = context.dmd_db_schema;
	

String tableName_tDBOutput_8 = null;
if(dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
	tableName_tDBOutput_8 = ("dmd_lookup_licauth");
} else {
	tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "\".\"" + ("dmd_lookup_licauth");
}

int nb_line_tDBOutput_8 = 0;
int nb_line_update_tDBOutput_8 = 0;
int nb_line_inserted_tDBOutput_8 = 0;
int nb_line_deleted_tDBOutput_8 = 0;
int nb_line_rejected_tDBOutput_8 = 0;

int deletedCount_tDBOutput_8=0;
int updatedCount_tDBOutput_8=0;
int insertedCount_tDBOutput_8=0;
int rejectedCount_tDBOutput_8=0;

boolean whetherReject_tDBOutput_8 = false;

java.sql.Connection conn_tDBOutput_8 = null;
String dbUser_tDBOutput_8 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_8 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_8 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_8 = context.dmd_db_password; 

    String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;

    conn_tDBOutput_8 = java.sql.DriverManager.getConnection(url_tDBOutput_8,dbUser_tDBOutput_8,dbPwd_tDBOutput_8);
	
	resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);
        conn_tDBOutput_8.setAutoCommit(false);
        int commitEvery_tDBOutput_8 = 10000;
        int commitCounter_tDBOutput_8 = 0;


   int batchSize_tDBOutput_8 = 10000;
   int batchSizeCounter_tDBOutput_8=0;

int count_tDBOutput_8=0;
            int rsTruncCountNumber_tDBOutput_8 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_8 = stmtTruncCount_tDBOutput_8.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_8 + "\"")) {
                    if(rsTruncCount_tDBOutput_8.next()) {
                        rsTruncCountNumber_tDBOutput_8 = rsTruncCount_tDBOutput_8.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                stmtTrunc_tDBOutput_8.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_8 + "\"");
                deletedCount_tDBOutput_8 += rsTruncCountNumber_tDBOutput_8;
            }
	    String insert_tDBOutput_8 = "INSERT INTO \"" + tableName_tDBOutput_8 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
	    resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);
	    

 



/**
 * [tDBOutput_8 begin ] stop
 */





	
	/**
	 * [tLogRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_8", false);
		start_Hash.put("tLogRow_8", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tLogRow_8 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_8 = "|";
		java.io.PrintStream consoleOut_tLogRow_8 = null;	

 		StringBuilder strBuffer_tLogRow_8 = null;
		int nb_line_tLogRow_8 = 0;
///////////////////////    			



 



/**
 * [tLogRow_8 begin ] stop
 */



	
	/**
	 * [tDBOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_9", false);
		start_Hash.put("tDBOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ontology");
					}
				
		int tos_count_tDBOutput_9 = 0;
		





String dbschema_tDBOutput_9 = null;
	dbschema_tDBOutput_9 = context.dmd_db_schema;
	

String tableName_tDBOutput_9 = null;
if(dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
	tableName_tDBOutput_9 = ("dmd_lookup_ontformroute");
} else {
	tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "\".\"" + ("dmd_lookup_ontformroute");
}

int nb_line_tDBOutput_9 = 0;
int nb_line_update_tDBOutput_9 = 0;
int nb_line_inserted_tDBOutput_9 = 0;
int nb_line_deleted_tDBOutput_9 = 0;
int nb_line_rejected_tDBOutput_9 = 0;

int deletedCount_tDBOutput_9=0;
int updatedCount_tDBOutput_9=0;
int insertedCount_tDBOutput_9=0;
int rejectedCount_tDBOutput_9=0;

boolean whetherReject_tDBOutput_9 = false;

java.sql.Connection conn_tDBOutput_9 = null;
String dbUser_tDBOutput_9 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_9 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_9 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_9 = context.dmd_db_password; 

    String dbPwd_tDBOutput_9 = decryptedPassword_tDBOutput_9;

    conn_tDBOutput_9 = java.sql.DriverManager.getConnection(url_tDBOutput_9,dbUser_tDBOutput_9,dbPwd_tDBOutput_9);
	
	resourceMap.put("conn_tDBOutput_9", conn_tDBOutput_9);
        conn_tDBOutput_9.setAutoCommit(false);
        int commitEvery_tDBOutput_9 = 10000;
        int commitCounter_tDBOutput_9 = 0;


   int batchSize_tDBOutput_9 = 10000;
   int batchSizeCounter_tDBOutput_9=0;

int count_tDBOutput_9=0;
            int rsTruncCountNumber_tDBOutput_9 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_9 = stmtTruncCount_tDBOutput_9.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_9 + "\"")) {
                    if(rsTruncCount_tDBOutput_9.next()) {
                        rsTruncCountNumber_tDBOutput_9 = rsTruncCount_tDBOutput_9.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
                stmtTrunc_tDBOutput_9.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_9 + "\"");
                deletedCount_tDBOutput_9 += rsTruncCountNumber_tDBOutput_9;
            }
	    String insert_tDBOutput_9 = "INSERT INTO \"" + tableName_tDBOutput_9 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
	    resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);
	    

 



/**
 * [tDBOutput_9 begin ] stop
 */





	
	/**
	 * [tLogRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_12", false);
		start_Hash.put("tLogRow_12", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tLogRow_12 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_12 = "|";
		java.io.PrintStream consoleOut_tLogRow_12 = null;	

 		StringBuilder strBuffer_tLogRow_12 = null;
		int nb_line_tLogRow_12 = 0;
///////////////////////    			



 



/**
 * [tLogRow_12 begin ] stop
 */



	
	/**
	 * [tDBOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_10", false);
		start_Hash.put("tDBOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"prescribingstatus");
					}
				
		int tos_count_tDBOutput_10 = 0;
		





String dbschema_tDBOutput_10 = null;
	dbschema_tDBOutput_10 = context.dmd_db_schema;
	

String tableName_tDBOutput_10 = null;
if(dbschema_tDBOutput_10 == null || dbschema_tDBOutput_10.trim().length() == 0) {
	tableName_tDBOutput_10 = ("dmd_lookup_prescribingstatus");
} else {
	tableName_tDBOutput_10 = dbschema_tDBOutput_10 + "\".\"" + ("dmd_lookup_prescribingstatus");
}

int nb_line_tDBOutput_10 = 0;
int nb_line_update_tDBOutput_10 = 0;
int nb_line_inserted_tDBOutput_10 = 0;
int nb_line_deleted_tDBOutput_10 = 0;
int nb_line_rejected_tDBOutput_10 = 0;

int deletedCount_tDBOutput_10=0;
int updatedCount_tDBOutput_10=0;
int insertedCount_tDBOutput_10=0;
int rejectedCount_tDBOutput_10=0;

boolean whetherReject_tDBOutput_10 = false;

java.sql.Connection conn_tDBOutput_10 = null;
String dbUser_tDBOutput_10 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_10 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_10 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_10 = context.dmd_db_password; 

    String dbPwd_tDBOutput_10 = decryptedPassword_tDBOutput_10;

    conn_tDBOutput_10 = java.sql.DriverManager.getConnection(url_tDBOutput_10,dbUser_tDBOutput_10,dbPwd_tDBOutput_10);
	
	resourceMap.put("conn_tDBOutput_10", conn_tDBOutput_10);
        conn_tDBOutput_10.setAutoCommit(false);
        int commitEvery_tDBOutput_10 = 10000;
        int commitCounter_tDBOutput_10 = 0;


   int batchSize_tDBOutput_10 = 10000;
   int batchSizeCounter_tDBOutput_10=0;

int count_tDBOutput_10=0;
            int rsTruncCountNumber_tDBOutput_10 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_10 = stmtTruncCount_tDBOutput_10.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_10 + "\"")) {
                    if(rsTruncCount_tDBOutput_10.next()) {
                        rsTruncCountNumber_tDBOutput_10 = rsTruncCount_tDBOutput_10.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
                stmtTrunc_tDBOutput_10.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_10 + "\"");
                deletedCount_tDBOutput_10 += rsTruncCountNumber_tDBOutput_10;
            }
	    String insert_tDBOutput_10 = "INSERT INTO \"" + tableName_tDBOutput_10 + "\" (\"cd\",\"desc\") VALUES (?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(insert_tDBOutput_10);
	    resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);
	    

 



/**
 * [tDBOutput_10 begin ] stop
 */





	
	/**
	 * [tLogRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_10", false);
		start_Hash.put("tLogRow_10", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tLogRow_10 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_10 = "|";
		java.io.PrintStream consoleOut_tLogRow_10 = null;	

 		StringBuilder strBuffer_tLogRow_10 = null;
		int nb_line_tLogRow_10 = 0;
///////////////////////    			



 



/**
 * [tLogRow_10 begin ] stop
 */



	
	/**
	 * [tDBOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_11", false);
		start_Hash.put("tDBOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"route");
					}
				
		int tos_count_tDBOutput_11 = 0;
		





String dbschema_tDBOutput_11 = null;
	dbschema_tDBOutput_11 = context.dmd_db_schema;
	

String tableName_tDBOutput_11 = null;
if(dbschema_tDBOutput_11 == null || dbschema_tDBOutput_11.trim().length() == 0) {
	tableName_tDBOutput_11 = ("dmd_lookup_route");
} else {
	tableName_tDBOutput_11 = dbschema_tDBOutput_11 + "\".\"" + ("dmd_lookup_route");
}

int nb_line_tDBOutput_11 = 0;
int nb_line_update_tDBOutput_11 = 0;
int nb_line_inserted_tDBOutput_11 = 0;
int nb_line_deleted_tDBOutput_11 = 0;
int nb_line_rejected_tDBOutput_11 = 0;

int deletedCount_tDBOutput_11=0;
int updatedCount_tDBOutput_11=0;
int insertedCount_tDBOutput_11=0;
int rejectedCount_tDBOutput_11=0;

boolean whetherReject_tDBOutput_11 = false;

java.sql.Connection conn_tDBOutput_11 = null;
String dbUser_tDBOutput_11 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_11 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_11 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_11 = context.dmd_db_password; 

    String dbPwd_tDBOutput_11 = decryptedPassword_tDBOutput_11;

    conn_tDBOutput_11 = java.sql.DriverManager.getConnection(url_tDBOutput_11,dbUser_tDBOutput_11,dbPwd_tDBOutput_11);
	
	resourceMap.put("conn_tDBOutput_11", conn_tDBOutput_11);
        conn_tDBOutput_11.setAutoCommit(false);
        int commitEvery_tDBOutput_11 = 10000;
        int commitCounter_tDBOutput_11 = 0;


   int batchSize_tDBOutput_11 = 10000;
   int batchSizeCounter_tDBOutput_11=0;

int count_tDBOutput_11=0;
            int rsTruncCountNumber_tDBOutput_11 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_11 = stmtTruncCount_tDBOutput_11.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_11 + "\"")) {
                    if(rsTruncCount_tDBOutput_11.next()) {
                        rsTruncCountNumber_tDBOutput_11 = rsTruncCount_tDBOutput_11.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
                stmtTrunc_tDBOutput_11.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_11 + "\"");
                deletedCount_tDBOutput_11 += rsTruncCountNumber_tDBOutput_11;
            }
	    String insert_tDBOutput_11 = "INSERT INTO \"" + tableName_tDBOutput_11 + "\" (\"cd\",\"cddt\",\"cdprev\",\"desc\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11.prepareStatement(insert_tDBOutput_11);
	    resourceMap.put("pstmt_tDBOutput_11", pstmt_tDBOutput_11);
	    

 



/**
 * [tDBOutput_11 begin ] stop
 */





	
	/**
	 * [tLogRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_9", false);
		start_Hash.put("tLogRow_9", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tLogRow_9 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_9 = "|";
		java.io.PrintStream consoleOut_tLogRow_9 = null;	

 		StringBuilder strBuffer_tLogRow_9 = null;
		int nb_line_tLogRow_9 = 0;
///////////////////////    			



 



/**
 * [tLogRow_9 begin ] stop
 */



	
	/**
	 * [tDBOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_12", false);
		start_Hash.put("tDBOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"supplier");
					}
				
		int tos_count_tDBOutput_12 = 0;
		





String dbschema_tDBOutput_12 = null;
	dbschema_tDBOutput_12 = context.dmd_db_schema;
	

String tableName_tDBOutput_12 = null;
if(dbschema_tDBOutput_12 == null || dbschema_tDBOutput_12.trim().length() == 0) {
	tableName_tDBOutput_12 = ("dmd_lookup_supplier");
} else {
	tableName_tDBOutput_12 = dbschema_tDBOutput_12 + "\".\"" + ("dmd_lookup_supplier");
}

int nb_line_tDBOutput_12 = 0;
int nb_line_update_tDBOutput_12 = 0;
int nb_line_inserted_tDBOutput_12 = 0;
int nb_line_deleted_tDBOutput_12 = 0;
int nb_line_rejected_tDBOutput_12 = 0;

int deletedCount_tDBOutput_12=0;
int updatedCount_tDBOutput_12=0;
int insertedCount_tDBOutput_12=0;
int rejectedCount_tDBOutput_12=0;

boolean whetherReject_tDBOutput_12 = false;

java.sql.Connection conn_tDBOutput_12 = null;
String dbUser_tDBOutput_12 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_12 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_12 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_12 = context.dmd_db_password; 

    String dbPwd_tDBOutput_12 = decryptedPassword_tDBOutput_12;

    conn_tDBOutput_12 = java.sql.DriverManager.getConnection(url_tDBOutput_12,dbUser_tDBOutput_12,dbPwd_tDBOutput_12);
	
	resourceMap.put("conn_tDBOutput_12", conn_tDBOutput_12);
        conn_tDBOutput_12.setAutoCommit(false);
        int commitEvery_tDBOutput_12 = 10000;
        int commitCounter_tDBOutput_12 = 0;


   int batchSize_tDBOutput_12 = 10000;
   int batchSizeCounter_tDBOutput_12=0;

int count_tDBOutput_12=0;
            int rsTruncCountNumber_tDBOutput_12 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_12 = conn_tDBOutput_12.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_12 = stmtTruncCount_tDBOutput_12.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_12 + "\"")) {
                    if(rsTruncCount_tDBOutput_12.next()) {
                        rsTruncCountNumber_tDBOutput_12 = rsTruncCount_tDBOutput_12.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_12 = conn_tDBOutput_12.createStatement()) {
                stmtTrunc_tDBOutput_12.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_12 + "\"");
                deletedCount_tDBOutput_12 += rsTruncCountNumber_tDBOutput_12;
            }
	    String insert_tDBOutput_12 = "INSERT INTO \"" + tableName_tDBOutput_12 + "\" (\"cd\",\"cddt\",\"cdprev\",\"invalid\",\"desc\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_12 = conn_tDBOutput_12.prepareStatement(insert_tDBOutput_12);
	    resourceMap.put("pstmt_tDBOutput_12", pstmt_tDBOutput_12);
	    

 



/**
 * [tDBOutput_12 begin ] stop
 */





	
	/**
	 * [tLogRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_11", false);
		start_Hash.put("tLogRow_11", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tLogRow_11 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_11 = "|";
		java.io.PrintStream consoleOut_tLogRow_11 = null;	

 		StringBuilder strBuffer_tLogRow_11 = null;
		int nb_line_tLogRow_11 = 0;
///////////////////////    			



 



/**
 * [tLogRow_11 begin ] stop
 */



	
	/**
	 * [tDBOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_13", false);
		start_Hash.put("tDBOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"uom");
					}
				
		int tos_count_tDBOutput_13 = 0;
		





String dbschema_tDBOutput_13 = null;
	dbschema_tDBOutput_13 = context.dmd_db_schema;
	

String tableName_tDBOutput_13 = null;
if(dbschema_tDBOutput_13 == null || dbschema_tDBOutput_13.trim().length() == 0) {
	tableName_tDBOutput_13 = ("dmd_lookup_uom");
} else {
	tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "\".\"" + ("dmd_lookup_uom");
}

int nb_line_tDBOutput_13 = 0;
int nb_line_update_tDBOutput_13 = 0;
int nb_line_inserted_tDBOutput_13 = 0;
int nb_line_deleted_tDBOutput_13 = 0;
int nb_line_rejected_tDBOutput_13 = 0;

int deletedCount_tDBOutput_13=0;
int updatedCount_tDBOutput_13=0;
int insertedCount_tDBOutput_13=0;
int rejectedCount_tDBOutput_13=0;

boolean whetherReject_tDBOutput_13 = false;

java.sql.Connection conn_tDBOutput_13 = null;
String dbUser_tDBOutput_13 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_13 = "jdbc:postgresql://"+context.dmd_db_host+":"+context.dmd_db_port+"/"+context.dmd_db_name + "?" + context.dmd_db_additionalparams;
    dbUser_tDBOutput_13 = context.dmd_db_user;

	final String decryptedPassword_tDBOutput_13 = context.dmd_db_password; 

    String dbPwd_tDBOutput_13 = decryptedPassword_tDBOutput_13;

    conn_tDBOutput_13 = java.sql.DriverManager.getConnection(url_tDBOutput_13,dbUser_tDBOutput_13,dbPwd_tDBOutput_13);
	
	resourceMap.put("conn_tDBOutput_13", conn_tDBOutput_13);
        conn_tDBOutput_13.setAutoCommit(false);
        int commitEvery_tDBOutput_13 = 10000;
        int commitCounter_tDBOutput_13 = 0;


   int batchSize_tDBOutput_13 = 10000;
   int batchSizeCounter_tDBOutput_13=0;

int count_tDBOutput_13=0;
            int rsTruncCountNumber_tDBOutput_13 = 0;
            try(java.sql.Statement stmtTruncCount_tDBOutput_13 = conn_tDBOutput_13.createStatement()) {
                try (java.sql.ResultSet rsTruncCount_tDBOutput_13 = stmtTruncCount_tDBOutput_13.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_13 + "\"")) {
                    if(rsTruncCount_tDBOutput_13.next()) {
                        rsTruncCountNumber_tDBOutput_13 = rsTruncCount_tDBOutput_13.getInt(1);
                    }
                }
            }
            try (java.sql.Statement stmtTrunc_tDBOutput_13 = conn_tDBOutput_13.createStatement()) {
                stmtTrunc_tDBOutput_13.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_13 + "\"");
                deletedCount_tDBOutput_13 += rsTruncCountNumber_tDBOutput_13;
            }
	    String insert_tDBOutput_13 = "INSERT INTO \"" + tableName_tDBOutput_13 + "\" (\"cd\",\"cddt\",\"cdprev\",\"desc\") VALUES (?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13.prepareStatement(insert_tDBOutput_13);
	    resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);
	    

 



/**
 * [tDBOutput_13 begin ] stop
 */



	
	/**
	 * [tXMLMap_2_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_2_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	
		int tos_count_tXMLMap_2_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_2 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_2");
for(Object  row_out_tXMLMap_2_TXMLMAP_IN : outs_tXMLMap_2) {//TD512
 



/**
 * [tXMLMap_2_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

	basisofname = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof basisofnameStruct) {
		basisofname = (basisofnameStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
	availrestrict = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof availrestrictStruct) {
		availrestrict = (availrestrictStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
	basisofstrength = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof basisofstrengthStruct) {
		basisofstrength = (basisofstrengthStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
	controldrugcategory = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof controldrugcategoryStruct) {
		controldrugcategory = (controldrugcategoryStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
	drugformind = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof drugformindStruct) {
		drugformind = (drugformindStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
	form = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof formStruct) {
		form = (formStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
	lic_auth = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof lic_authStruct) {
		lic_auth = (lic_authStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
	ontology = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof ontologyStruct) {
		ontology = (ontologyStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
	prescribingstatus = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof prescribingstatusStruct) {
		prescribingstatus = (prescribingstatusStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
	route = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof routeStruct) {
		route = (routeStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
	supplier = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof supplierStruct) {
		supplier = (supplierStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
	uom = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof uomStruct) {
		uom = (uomStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_2_TXMLMAP_IN++;

/**
 * [tXMLMap_2_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_2_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "basisofname"
if(basisofname != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"basisofname");
					}
					



            row5 = null;
        whetherReject_tDBOutput_2 = false;
                    if(basisofname.cd == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setLong(1, basisofname.cd);
}

                    if(basisofname.desc == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, basisofname.desc);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
            if(!whetherReject_tDBOutput_2) {
                            row5 = new row5Struct();
                                row5.cd = basisofname.cd;
                                row5.desc = basisofname.desc;
            }
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
			    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(row5.cd != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row5.cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row5.desc != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row5.desc)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "basisofname"




// Start of branch "availrestrict"
if(availrestrict != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"availrestrict");
					}
					



            row4 = null;
        whetherReject_tDBOutput_3 = false;
                    if(availrestrict.cd == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setLong(1, availrestrict.cd);
}

                    if(availrestrict.desc == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, availrestrict.desc);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
            if(!whetherReject_tDBOutput_3) {
                            row4 = new row4Struct();
                                row4.cd = availrestrict.cd;
                                row4.desc = availrestrict.desc;
            }
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                if ((batchSize_tDBOutput_3 > 0) && (batchSizeCounter_tDBOutput_3 > 0)) {
                try {
                		int countSum_tDBOutput_3 = 0;
                		    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
            	    	
            	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
            	    	
                batchSizeCounter_tDBOutput_3 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_3){
			    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
			    	String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					}else{
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}
			    	
			    	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					
			    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
			    	
			    	System.err.println(errormessage_tDBOutput_3);
			    	
				}
            }
                	conn_tDBOutput_3.commit();
                	
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row4.cd != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row4.cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row4.desc != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row4.desc)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "availrestrict"




// Start of branch "basisofstrength"
if(basisofstrength != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"basisofstrength");
					}
					



            row6 = null;
        whetherReject_tDBOutput_4 = false;
                    if(basisofstrength.cd == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setLong(1, basisofstrength.cd);
}

                    if(basisofstrength.desc == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, basisofstrength.desc);
}

			
    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
            if(!whetherReject_tDBOutput_4) {
                            row6 = new row6Struct();
                                row6.cd = basisofstrength.cd;
                                row6.desc = basisofstrength.desc;
            }
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    	int countSum_tDBOutput_4 = 0;
						for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
						
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    	System.err.println(errormessage_tDBOutput_4);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                if ((batchSize_tDBOutput_4 > 0) && (batchSizeCounter_tDBOutput_4 > 0)) {
                try {
                		int countSum_tDBOutput_4 = 0;
                		    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
            	    	
            	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
            	    	
                batchSizeCounter_tDBOutput_4 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_4){
			    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
			    	String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					}else{
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}
			    	
			    	int countSum_tDBOutput_4 = 0;
					for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					
			    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
			    	
			    	System.err.println(errormessage_tDBOutput_4);
			    	
				}
            }
                	conn_tDBOutput_4.commit();
                	
                	commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_4 = new StringBuilder();




   				
	    		if(row6.cd != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row6.cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row6.desc != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row6.desc)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
                    consoleOut_tLogRow_4.flush();
                    nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "basisofstrength"




// Start of branch "controldrugcategory"
if(controldrugcategory != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"controldrugcategory");
					}
					



            row7 = null;
        whetherReject_tDBOutput_7 = false;
                    if(controldrugcategory.cd == null) {
pstmt_tDBOutput_7.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setLong(1, controldrugcategory.cd);
}

                    if(controldrugcategory.desc == null) {
pstmt_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(2, controldrugcategory.desc);
}

			
    		pstmt_tDBOutput_7.addBatch();
    		nb_line_tDBOutput_7++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_7++;
    		  
            if(!whetherReject_tDBOutput_7) {
                            row7 = new row7Struct();
                                row7.cd = controldrugcategory.cd;
                                row7.desc = controldrugcategory.desc;
            }
    			if ((batchSize_tDBOutput_7 > 0) && (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
                try {
						int countSum_tDBOutput_7 = 0;
						    
						for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}
				    	
				    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
				    	
            	    	batchSizeCounter_tDBOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_7){
				    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
				    	String errormessage_tDBOutput_7;
						if (ne_tDBOutput_7 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
							errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
						}else{
							errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
						}
				    	
				    		if (ne_tDBOutput_7 != null) {
				    			throw(sqle_tDBOutput_7);
				    		}else{
				            	throw(e_tDBOutput_7);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_7++;
                if(commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {
                if ((batchSize_tDBOutput_7 > 0) && (batchSizeCounter_tDBOutput_7 > 0)) {
                try {
                		int countSum_tDBOutput_7 = 0;
                		    
						for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}
            	    	
            	    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
            	    	
                batchSizeCounter_tDBOutput_7 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_7){
			    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
			    	String errormessage_tDBOutput_7;
					if (ne_tDBOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
						errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
					}else{
						errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
					}
			    	
			    		if (ne_tDBOutput_7 != null) {
			    			throw(sqle_tDBOutput_7);
			    		}else{
			            	throw(e_tDBOutput_7);
			            }
			    	
				}
            }
                	conn_tDBOutput_7.commit();
                	
                	commitCounter_tDBOutput_7=0;
                }

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_5 = new StringBuilder();




   				
	    		if(row7.cd != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row7.cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row7.desc != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row7.desc)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_5);
                    }
                    consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
                    consoleOut_tLogRow_5.flush();
                    nb_line_tLogRow_5++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "controldrugcategory"




// Start of branch "drugformind"
if(drugformind != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"drugformind");
					}
					



            row8 = null;
        whetherReject_tDBOutput_6 = false;
                    if(drugformind.cd == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_6.setLong(1, drugformind.cd);
}

                    if(drugformind.desc == null) {
pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(2, drugformind.desc);
}

			
    		pstmt_tDBOutput_6.addBatch();
    		nb_line_tDBOutput_6++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_6++;
    		  
            if(!whetherReject_tDBOutput_6) {
                            row8 = new row8Struct();
                                row8.cd = drugformind.cd;
                                row8.desc = drugformind.desc;
            }
    			if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
						int countSum_tDBOutput_6 = 0;
						    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
				    	
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            	    	batchSizeCounter_tDBOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_6){
				    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
				    	String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						}else{
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}
				    	
				    		if (ne_tDBOutput_6 != null) {
				    			throw(sqle_tDBOutput_6);
				    		}else{
				            	throw(e_tDBOutput_6);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_6++;
                if(commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
                if ((batchSize_tDBOutput_6 > 0) && (batchSizeCounter_tDBOutput_6 > 0)) {
                try {
                		int countSum_tDBOutput_6 = 0;
                		    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
            	    	
            	    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
            	    	
                batchSizeCounter_tDBOutput_6 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_6){
			    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
			    	String errormessage_tDBOutput_6;
					if (ne_tDBOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
						errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
					}else{
						errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
					}
			    	
			    		if (ne_tDBOutput_6 != null) {
			    			throw(sqle_tDBOutput_6);
			    		}else{
			            	throw(e_tDBOutput_6);
			            }
			    	
				}
            }
                	conn_tDBOutput_6.commit();
                	
                	commitCounter_tDBOutput_6=0;
                }

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tLogRow_6 main ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_6 = new StringBuilder();




   				
	    		if(row8.cd != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row8.cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_6.append("|");
    			


   				
	    		if(row8.desc != null) { //              
                    							
       
				strBuffer_tLogRow_6.append(
				                String.valueOf(row8.desc)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_6 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_6);
                    }
                    consoleOut_tLogRow_6.println(strBuffer_tLogRow_6.toString());
                    consoleOut_tLogRow_6.flush();
                    nb_line_tLogRow_6++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_6++;

/**
 * [tLogRow_6 main ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "drugformind"




// Start of branch "form"
if(form != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"form");
					}
					



            row9 = null;
        whetherReject_tDBOutput_5 = false;
                    if(form.cd == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, form.cd);
}

                    if(form.cddt != null) {
pstmt_tDBOutput_5.setTimestamp(2, new java.sql.Timestamp(form.cddt.getTime()));
} else {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(form.cdprev == null) {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(3, form.cdprev);
}

                    if(form.desc == null) {
pstmt_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(4, form.desc);
}

			
    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
            if(!whetherReject_tDBOutput_5) {
                            row9 = new row9Struct();
                                row9.cd = form.cd;
                                row9.cddt = form.cddt;
                                row9.cdprev = form.cdprev;
                                row9.desc = form.desc;
            }
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    	int countSum_tDBOutput_5 = 0;
						for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
						
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    	System.err.println(errormessage_tDBOutput_5);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_5++;
                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
                if ((batchSize_tDBOutput_5 > 0) && (batchSizeCounter_tDBOutput_5 > 0)) {
                try {
                		int countSum_tDBOutput_5 = 0;
                		    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
            	    	
            	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
            	    	
                batchSizeCounter_tDBOutput_5 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_5){
			    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
			    	String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
					}else{
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}
			    	
			    	int countSum_tDBOutput_5 = 0;
					for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					
			    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
			    	
			    	System.err.println(errormessage_tDBOutput_5);
			    	
				}
            }
                	conn_tDBOutput_5.commit();
                	
                	commitCounter_tDBOutput_5=0;
                }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tLogRow_7 main ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_7 = new StringBuilder();




   				
	    		if(row9.cd != null) { //              
                    							
       
				strBuffer_tLogRow_7.append(
				                String.valueOf(row9.cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_7.append("|");
    			


   				
	    		if(row9.cddt != null) { //              
                    							
       
				strBuffer_tLogRow_7.append(
								FormatterUtils.format_Date(row9.cddt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_7.append("|");
    			


   				
	    		if(row9.cdprev != null) { //              
                    							
       
				strBuffer_tLogRow_7.append(
				                String.valueOf(row9.cdprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_7.append("|");
    			


   				
	    		if(row9.desc != null) { //              
                    							
       
				strBuffer_tLogRow_7.append(
				                String.valueOf(row9.desc)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_7 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_7);
                    }
                    consoleOut_tLogRow_7.println(strBuffer_tLogRow_7.toString());
                    consoleOut_tLogRow_7.flush();
                    nb_line_tLogRow_7++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_7++;

/**
 * [tLogRow_7 main ] stop
 */
	
	/**
	 * [tLogRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

 



/**
 * [tLogRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

 



/**
 * [tLogRow_7 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "form"




// Start of branch "lic_auth"
if(lic_auth != null) { 



	
	/**
	 * [tDBOutput_8 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lic_auth");
					}
					



            row15 = null;
        whetherReject_tDBOutput_8 = false;
                    if(lic_auth.cd == null) {
pstmt_tDBOutput_8.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_8.setLong(1, lic_auth.cd);
}

                    if(lic_auth.desc == null) {
pstmt_tDBOutput_8.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(2, lic_auth.desc);
}

			
    		pstmt_tDBOutput_8.addBatch();
    		nb_line_tDBOutput_8++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_8++;
    		  
            if(!whetherReject_tDBOutput_8) {
                            row15 = new row15Struct();
                                row15.cd = lic_auth.cd;
                                row15.desc = lic_auth.desc;
            }
    			if ((batchSize_tDBOutput_8 > 0) && (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
                try {
						int countSum_tDBOutput_8 = 0;
						    
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
				    	
				    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
				    	
            	    	batchSizeCounter_tDBOutput_8 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_8){
				    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
				    	String errormessage_tDBOutput_8;
						if (ne_tDBOutput_8 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
							errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
						}else{
							errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
						}
				    	
				    		if (ne_tDBOutput_8 != null) {
				    			throw(sqle_tDBOutput_8);
				    		}else{
				            	throw(e_tDBOutput_8);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_8++;
                if(commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {
                if ((batchSize_tDBOutput_8 > 0) && (batchSizeCounter_tDBOutput_8 > 0)) {
                try {
                		int countSum_tDBOutput_8 = 0;
                		    
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
            	    	
            	    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
            	    	
                batchSizeCounter_tDBOutput_8 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_8){
			    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
			    	String errormessage_tDBOutput_8;
					if (ne_tDBOutput_8 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
						errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
					}else{
						errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
					}
			    	
			    		if (ne_tDBOutput_8 != null) {
			    			throw(sqle_tDBOutput_8);
			    		}else{
			            	throw(e_tDBOutput_8);
			            }
			    	
				}
            }
                	conn_tDBOutput_8.commit();
                	
                	commitCounter_tDBOutput_8=0;
                }

 


	tos_count_tDBOutput_8++;

/**
 * [tDBOutput_8 main ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_begin ] stop
 */
// Start of branch "row15"
if(row15 != null) { 



	
	/**
	 * [tLogRow_13 main ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row15");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_13 = new StringBuilder();




   				
	    		if(row15.cd != null) { //              
                    							
       
				strBuffer_tLogRow_13.append(
				                String.valueOf(row15.cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_13.append("|");
    			


   				
	    		if(row15.desc != null) { //              
                    							
       
				strBuffer_tLogRow_13.append(
				                String.valueOf(row15.desc)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_13 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_13);
                    }
                    consoleOut_tLogRow_13.println(strBuffer_tLogRow_13.toString());
                    consoleOut_tLogRow_13.flush();
                    nb_line_tLogRow_13++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_13++;

/**
 * [tLogRow_13 main ] stop
 */
	
	/**
	 * [tLogRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 process_data_end ] stop
 */

} // End of branch "row15"




	
	/**
	 * [tDBOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_end ] stop
 */

} // End of branch "lic_auth"




// Start of branch "ontology"
if(ontology != null) { 



	
	/**
	 * [tDBOutput_9 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"ontology");
					}
					



            row10 = null;
        whetherReject_tDBOutput_9 = false;
                    if(ontology.cd == null) {
pstmt_tDBOutput_9.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_9.setLong(1, ontology.cd);
}

                    if(ontology.desc == null) {
pstmt_tDBOutput_9.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(2, ontology.desc);
}

			
    		pstmt_tDBOutput_9.addBatch();
    		nb_line_tDBOutput_9++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_9++;
    		  
            if(!whetherReject_tDBOutput_9) {
                            row10 = new row10Struct();
                                row10.cd = ontology.cd;
                                row10.desc = ontology.desc;
            }
    			if ((batchSize_tDBOutput_9 > 0) && (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {
                try {
						int countSum_tDBOutput_9 = 0;
						    
						for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}
				    	
				    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
				    	
            	    	batchSizeCounter_tDBOutput_9 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_9){
				    	java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),sqle_tDBOutput_9=null;
				    	String errormessage_tDBOutput_9;
						if (ne_tDBOutput_9 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_9 = new java.sql.SQLException(e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(), ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
							errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
						}else{
							errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
						}
				    	
				    		if (ne_tDBOutput_9 != null) {
				    			throw(sqle_tDBOutput_9);
				    		}else{
				            	throw(e_tDBOutput_9);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_9++;
                if(commitEvery_tDBOutput_9 <= commitCounter_tDBOutput_9) {
                if ((batchSize_tDBOutput_9 > 0) && (batchSizeCounter_tDBOutput_9 > 0)) {
                try {
                		int countSum_tDBOutput_9 = 0;
                		    
						for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}
            	    	
            	    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
            	    	
                batchSizeCounter_tDBOutput_9 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_9){
			    	java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),sqle_tDBOutput_9=null;
			    	String errormessage_tDBOutput_9;
					if (ne_tDBOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_9 = new java.sql.SQLException(e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(), ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
						errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
					}else{
						errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
					}
			    	
			    		if (ne_tDBOutput_9 != null) {
			    			throw(sqle_tDBOutput_9);
			    		}else{
			            	throw(e_tDBOutput_9);
			            }
			    	
				}
            }
                	conn_tDBOutput_9.commit();
                	
                	commitCounter_tDBOutput_9=0;
                }

 


	tos_count_tDBOutput_9++;

/**
 * [tDBOutput_9 main ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tLogRow_8 main ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_8 = new StringBuilder();




   				
	    		if(row10.cd != null) { //              
                    							
       
				strBuffer_tLogRow_8.append(
				                String.valueOf(row10.cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_8.append("|");
    			


   				
	    		if(row10.desc != null) { //              
                    							
       
				strBuffer_tLogRow_8.append(
				                String.valueOf(row10.desc)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_8 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_8);
                    }
                    consoleOut_tLogRow_8.println(strBuffer_tLogRow_8.toString());
                    consoleOut_tLogRow_8.flush();
                    nb_line_tLogRow_8++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_8++;

/**
 * [tLogRow_8 main ] stop
 */
	
	/**
	 * [tLogRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tDBOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_end ] stop
 */

} // End of branch "ontology"




// Start of branch "prescribingstatus"
if(prescribingstatus != null) { 



	
	/**
	 * [tDBOutput_10 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"prescribingstatus");
					}
					



            row14 = null;
        whetherReject_tDBOutput_10 = false;
                    if(prescribingstatus.cd == null) {
pstmt_tDBOutput_10.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_10.setLong(1, prescribingstatus.cd);
}

                    if(prescribingstatus.desc == null) {
pstmt_tDBOutput_10.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(2, prescribingstatus.desc);
}

			
    		pstmt_tDBOutput_10.addBatch();
    		nb_line_tDBOutput_10++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_10++;
    		  
            if(!whetherReject_tDBOutput_10) {
                            row14 = new row14Struct();
                                row14.cd = prescribingstatus.cd;
                                row14.desc = prescribingstatus.desc;
            }
    			if ((batchSize_tDBOutput_10 > 0) && (batchSize_tDBOutput_10 <= batchSizeCounter_tDBOutput_10)) {
                try {
						int countSum_tDBOutput_10 = 0;
						    
						for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
						}
				    	
				    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
				    	
            	    	batchSizeCounter_tDBOutput_10 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_10){
				    	java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),sqle_tDBOutput_10=null;
				    	String errormessage_tDBOutput_10;
						if (ne_tDBOutput_10 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_10 = new java.sql.SQLException(e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(), ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
							errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
						}else{
							errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
						}
				    	
				    		if (ne_tDBOutput_10 != null) {
				    			throw(sqle_tDBOutput_10);
				    		}else{
				            	throw(e_tDBOutput_10);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_10++;
                if(commitEvery_tDBOutput_10 <= commitCounter_tDBOutput_10) {
                if ((batchSize_tDBOutput_10 > 0) && (batchSizeCounter_tDBOutput_10 > 0)) {
                try {
                		int countSum_tDBOutput_10 = 0;
                		    
						for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
						}
            	    	
            	    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
            	    	
                batchSizeCounter_tDBOutput_10 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_10){
			    	java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),sqle_tDBOutput_10=null;
			    	String errormessage_tDBOutput_10;
					if (ne_tDBOutput_10 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_10 = new java.sql.SQLException(e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(), ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
						errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
					}else{
						errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
					}
			    	
			    		if (ne_tDBOutput_10 != null) {
			    			throw(sqle_tDBOutput_10);
			    		}else{
			            	throw(e_tDBOutput_10);
			            }
			    	
				}
            }
                	conn_tDBOutput_10.commit();
                	
                	commitCounter_tDBOutput_10=0;
                }

 


	tos_count_tDBOutput_10++;

/**
 * [tDBOutput_10 main ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tLogRow_12 main ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_12 = new StringBuilder();




   				
	    		if(row14.cd != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row14.cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_12.append("|");
    			


   				
	    		if(row14.desc != null) { //              
                    							
       
				strBuffer_tLogRow_12.append(
				                String.valueOf(row14.desc)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_12 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_12 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_12);
                    }
                    consoleOut_tLogRow_12.println(strBuffer_tLogRow_12.toString());
                    consoleOut_tLogRow_12.flush();
                    nb_line_tLogRow_12++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_12++;

/**
 * [tLogRow_12 main ] stop
 */
	
	/**
	 * [tLogRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tDBOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_end ] stop
 */

} // End of branch "prescribingstatus"




// Start of branch "route"
if(route != null) { 



	
	/**
	 * [tDBOutput_11 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"route");
					}
					



            row12 = null;
        whetherReject_tDBOutput_11 = false;
                    if(route.cd == null) {
pstmt_tDBOutput_11.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(1, route.cd);
}

                    if(route.cddt != null) {
pstmt_tDBOutput_11.setTimestamp(2, new java.sql.Timestamp(route.cddt.getTime()));
} else {
pstmt_tDBOutput_11.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(route.cdprev == null) {
pstmt_tDBOutput_11.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(3, route.cdprev);
}

                    if(route.desc == null) {
pstmt_tDBOutput_11.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(4, route.desc);
}

			
    		pstmt_tDBOutput_11.addBatch();
    		nb_line_tDBOutput_11++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_11++;
    		  
            if(!whetherReject_tDBOutput_11) {
                            row12 = new row12Struct();
                                row12.cd = route.cd;
                                row12.cddt = route.cddt;
                                row12.cdprev = route.cdprev;
                                row12.desc = route.desc;
            }
    			if ((batchSize_tDBOutput_11 > 0) && (batchSize_tDBOutput_11 <= batchSizeCounter_tDBOutput_11)) {
                try {
						int countSum_tDBOutput_11 = 0;
						    
						for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}
				    	
				    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
				    	
            	    	batchSizeCounter_tDBOutput_11 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_11){
				    	java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),sqle_tDBOutput_11=null;
				    	String errormessage_tDBOutput_11;
						if (ne_tDBOutput_11 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_11 = new java.sql.SQLException(e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(), ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
							errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
						}else{
							errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
						}
				    	
				    	int countSum_tDBOutput_11 = 0;
						for(int countEach_tDBOutput_11: e_tDBOutput_11.getUpdateCounts()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}
						
				    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
				    	
				    	System.err.println(errormessage_tDBOutput_11);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_11++;
                if(commitEvery_tDBOutput_11 <= commitCounter_tDBOutput_11) {
                if ((batchSize_tDBOutput_11 > 0) && (batchSizeCounter_tDBOutput_11 > 0)) {
                try {
                		int countSum_tDBOutput_11 = 0;
                		    
						for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}
            	    	
            	    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
            	    	
                batchSizeCounter_tDBOutput_11 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_11){
			    	java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),sqle_tDBOutput_11=null;
			    	String errormessage_tDBOutput_11;
					if (ne_tDBOutput_11 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_11 = new java.sql.SQLException(e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(), ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
						errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
					}else{
						errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
					}
			    	
			    	int countSum_tDBOutput_11 = 0;
					for(int countEach_tDBOutput_11: e_tDBOutput_11.getUpdateCounts()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
					
			    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
			    	
			    	System.err.println(errormessage_tDBOutput_11);
			    	
				}
            }
                	conn_tDBOutput_11.commit();
                	
                	commitCounter_tDBOutput_11=0;
                }

 


	tos_count_tDBOutput_11++;

/**
 * [tDBOutput_11 main ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tLogRow_10 main ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_10 = new StringBuilder();




   				
	    		if(row12.cd != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row12.cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_10.append("|");
    			


   				
	    		if(row12.cddt != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
								FormatterUtils.format_Date(row12.cddt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_10.append("|");
    			


   				
	    		if(row12.cdprev != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row12.cdprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_10.append("|");
    			


   				
	    		if(row12.desc != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row12.desc)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_10 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_10);
                    }
                    consoleOut_tLogRow_10.println(strBuffer_tLogRow_10.toString());
                    consoleOut_tLogRow_10.flush();
                    nb_line_tLogRow_10++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_10++;

/**
 * [tLogRow_10 main ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_end ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tDBOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_end ] stop
 */

} // End of branch "route"




// Start of branch "supplier"
if(supplier != null) { 



	
	/**
	 * [tDBOutput_12 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"supplier");
					}
					



            row11 = null;
        whetherReject_tDBOutput_12 = false;
                    if(supplier.cd == null) {
pstmt_tDBOutput_12.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_12.setString(1, supplier.cd);
}

                    if(supplier.cddt != null) {
pstmt_tDBOutput_12.setTimestamp(2, new java.sql.Timestamp(supplier.cddt.getTime()));
} else {
pstmt_tDBOutput_12.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(supplier.cdprev == null) {
pstmt_tDBOutput_12.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_12.setString(3, supplier.cdprev);
}

                    if(supplier.invalid == null) {
pstmt_tDBOutput_12.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_12.setShort(4, supplier.invalid);
}

                    if(supplier.desc == null) {
pstmt_tDBOutput_12.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_12.setString(5, supplier.desc);
}

			
    		pstmt_tDBOutput_12.addBatch();
    		nb_line_tDBOutput_12++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_12++;
    		  
            if(!whetherReject_tDBOutput_12) {
                            row11 = new row11Struct();
                                row11.cd = supplier.cd;
                                row11.cddt = supplier.cddt;
                                row11.cdprev = supplier.cdprev;
                                row11.invalid = supplier.invalid;
                                row11.desc = supplier.desc;
            }
    			if ((batchSize_tDBOutput_12 > 0) && (batchSize_tDBOutput_12 <= batchSizeCounter_tDBOutput_12)) {
                try {
						int countSum_tDBOutput_12 = 0;
						    
						for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
							countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
						}
				    	
				    		insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
				    	
            	    	batchSizeCounter_tDBOutput_12 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_12){
				    	java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(),sqle_tDBOutput_12=null;
				    	String errormessage_tDBOutput_12;
						if (ne_tDBOutput_12 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_12 = new java.sql.SQLException(e_tDBOutput_12.getMessage() + "\ncaused by: " + ne_tDBOutput_12.getMessage(), ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(), ne_tDBOutput_12);
							errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
						}else{
							errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
						}
				    	
				    		if (ne_tDBOutput_12 != null) {
				    			throw(sqle_tDBOutput_12);
				    		}else{
				            	throw(e_tDBOutput_12);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_12++;
                if(commitEvery_tDBOutput_12 <= commitCounter_tDBOutput_12) {
                if ((batchSize_tDBOutput_12 > 0) && (batchSizeCounter_tDBOutput_12 > 0)) {
                try {
                		int countSum_tDBOutput_12 = 0;
                		    
						for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
							countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
						}
            	    	
            	    		insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
            	    	
                batchSizeCounter_tDBOutput_12 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_12){
			    	java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(),sqle_tDBOutput_12=null;
			    	String errormessage_tDBOutput_12;
					if (ne_tDBOutput_12 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_12 = new java.sql.SQLException(e_tDBOutput_12.getMessage() + "\ncaused by: " + ne_tDBOutput_12.getMessage(), ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(), ne_tDBOutput_12);
						errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
					}else{
						errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
					}
			    	
			    		if (ne_tDBOutput_12 != null) {
			    			throw(sqle_tDBOutput_12);
			    		}else{
			            	throw(e_tDBOutput_12);
			            }
			    	
				}
            }
                	conn_tDBOutput_12.commit();
                	
                	commitCounter_tDBOutput_12=0;
                }

 


	tos_count_tDBOutput_12++;

/**
 * [tDBOutput_12 main ] stop
 */
	
	/**
	 * [tDBOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

 



/**
 * [tDBOutput_12 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tLogRow_9 main ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_9 = new StringBuilder();




   				
	    		if(row11.cd != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row11.cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row11.cddt != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
								FormatterUtils.format_Date(row11.cddt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row11.cdprev != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row11.cdprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row11.invalid != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row11.invalid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row11.desc != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row11.desc)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_9 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_9);
                    }
                    consoleOut_tLogRow_9.println(strBuffer_tLogRow_9.toString());
                    consoleOut_tLogRow_9.flush();
                    nb_line_tLogRow_9++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_9++;

/**
 * [tLogRow_9 main ] stop
 */
	
	/**
	 * [tLogRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tDBOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

 



/**
 * [tDBOutput_12 process_data_end ] stop
 */

} // End of branch "supplier"




// Start of branch "uom"
if(uom != null) { 



	
	/**
	 * [tDBOutput_13 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"uom");
					}
					



            row13 = null;
        whetherReject_tDBOutput_13 = false;
                    if(uom.cd == null) {
pstmt_tDBOutput_13.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(1, uom.cd);
}

                    if(uom.cddt != null) {
pstmt_tDBOutput_13.setTimestamp(2, new java.sql.Timestamp(uom.cddt.getTime()));
} else {
pstmt_tDBOutput_13.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(uom.cdprev == null) {
pstmt_tDBOutput_13.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(3, uom.cdprev);
}

                    if(uom.desc == null) {
pstmt_tDBOutput_13.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(4, uom.desc);
}

			
    		pstmt_tDBOutput_13.addBatch();
    		nb_line_tDBOutput_13++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_13++;
    		  
            if(!whetherReject_tDBOutput_13) {
                            row13 = new row13Struct();
                                row13.cd = uom.cd;
                                row13.cddt = uom.cddt;
                                row13.cdprev = uom.cdprev;
                                row13.desc = uom.desc;
            }
    			if ((batchSize_tDBOutput_13 > 0) && (batchSize_tDBOutput_13 <= batchSizeCounter_tDBOutput_13)) {
                try {
						int countSum_tDBOutput_13 = 0;
						    
						for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}
				    	
				    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
				    	
            	    	batchSizeCounter_tDBOutput_13 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_13){
				    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
				    	String errormessage_tDBOutput_13;
						if (ne_tDBOutput_13 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
							errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
						}else{
							errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
						}
				    	
				    	int countSum_tDBOutput_13 = 0;
						for(int countEach_tDBOutput_13: e_tDBOutput_13.getUpdateCounts()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}
						
				    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
				    	
				    	System.err.println(errormessage_tDBOutput_13);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_13++;
                if(commitEvery_tDBOutput_13 <= commitCounter_tDBOutput_13) {
                if ((batchSize_tDBOutput_13 > 0) && (batchSizeCounter_tDBOutput_13 > 0)) {
                try {
                		int countSum_tDBOutput_13 = 0;
                		    
						for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}
            	    	
            	    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
            	    	
                batchSizeCounter_tDBOutput_13 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_13){
			    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
			    	String errormessage_tDBOutput_13;
					if (ne_tDBOutput_13 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
						errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
					}else{
						errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
					}
			    	
			    	int countSum_tDBOutput_13 = 0;
					for(int countEach_tDBOutput_13: e_tDBOutput_13.getUpdateCounts()) {
						countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}
					
			    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
			    	
			    	System.err.println(errormessage_tDBOutput_13);
			    	
				}
            }
                	conn_tDBOutput_13.commit();
                	
                	commitCounter_tDBOutput_13=0;
                }

 


	tos_count_tDBOutput_13++;

/**
 * [tDBOutput_13 main ] stop
 */
	
	/**
	 * [tDBOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tLogRow_11 main ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_11 = new StringBuilder();




   				
	    		if(row13.cd != null) { //              
                    							
       
				strBuffer_tLogRow_11.append(
				                String.valueOf(row13.cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_11.append("|");
    			


   				
	    		if(row13.cddt != null) { //              
                    							
       
				strBuffer_tLogRow_11.append(
								FormatterUtils.format_Date(row13.cddt, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_11.append("|");
    			


   				
	    		if(row13.cdprev != null) { //              
                    							
       
				strBuffer_tLogRow_11.append(
				                String.valueOf(row13.cdprev)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_11.append("|");
    			


   				
	    		if(row13.desc != null) { //              
                    							
       
				strBuffer_tLogRow_11.append(
				                String.valueOf(row13.desc)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_11 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_11 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_11);
                    }
                    consoleOut_tLogRow_11.println(strBuffer_tLogRow_11.toString());
                    consoleOut_tLogRow_11.flush();
                    nb_line_tLogRow_11++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_11++;

/**
 * [tLogRow_11 main ] stop
 */
	
	/**
	 * [tLogRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tDBOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_end ] stop
 */

} // End of branch "uom"




	
	/**
	 * [tXMLMap_2_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_2_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_2_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_2_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			
			conn_tDBOutput_2.commit();
			
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"basisofname");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */







	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			
	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			
			conn_tDBOutput_3.commit();
			
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"availrestrict");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */







	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    	int countSum_tDBOutput_4 = 0;
			for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
				countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
			}
			
	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	
	    	System.err.println(errormessage_tDBOutput_4);
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
			
			conn_tDBOutput_4.commit();
			
		
    	conn_tDBOutput_4 .close();
    	
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"basisofstrength");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */







	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



	    try {
				int countSum_tDBOutput_7 = 0;
				if (pstmt_tDBOutput_7 != null && batchSizeCounter_tDBOutput_7 > 0) {
						
					for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_7){
	    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
	    	String errormessage_tDBOutput_7;
			if (ne_tDBOutput_7 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
				errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
			}else{
				errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
			}
	    	
	    		if (ne_tDBOutput_7 != null) {
	    			throw(sqle_tDBOutput_7);
	    		}else{
	            	throw(e_tDBOutput_7);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_7 != null) {
        		
            pstmt_tDBOutput_7.close();
            resourceMap.remove("pstmt_tDBOutput_7");
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);
			
			conn_tDBOutput_7.commit();
			
		
    	conn_tDBOutput_7 .close();
    	
    	resourceMap.put("finish_tDBOutput_7", true);
    	

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"controldrugcategory");
			  	}
			  	
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());




/**
 * [tDBOutput_7 end ] stop
 */

	
	/**
	 * [tLogRow_5 end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	


//////
//////
globalMap.put("tLogRow_5_NB_LINE",nb_line_tLogRow_5);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tLogRow_5", true);
end_Hash.put("tLogRow_5", System.currentTimeMillis());




/**
 * [tLogRow_5 end ] stop
 */







	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



	    try {
				int countSum_tDBOutput_6 = 0;
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						
					for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_6){
	    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
	    	String errormessage_tDBOutput_6;
			if (ne_tDBOutput_6 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
				errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
			}else{
				errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
			}
	    	
	    		if (ne_tDBOutput_6 != null) {
	    			throw(sqle_tDBOutput_6);
	    		}else{
	            	throw(e_tDBOutput_6);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);
			
			conn_tDBOutput_6.commit();
			
		
    	conn_tDBOutput_6 .close();
    	
    	resourceMap.put("finish_tDBOutput_6", true);
    	

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"drugformind");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */

	
	/**
	 * [tLogRow_6 end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	


//////
//////
globalMap.put("tLogRow_6_NB_LINE",nb_line_tLogRow_6);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tLogRow_6", true);
end_Hash.put("tLogRow_6", System.currentTimeMillis());




/**
 * [tLogRow_6 end ] stop
 */







	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    	int countSum_tDBOutput_5 = 0;
			for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
				countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
			}
			
	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
	    	
	    	System.err.println(errormessage_tDBOutput_5);
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);
			
			conn_tDBOutput_5.commit();
			
		
    	conn_tDBOutput_5 .close();
    	
    	resourceMap.put("finish_tDBOutput_5", true);
    	

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"form");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */

	
	/**
	 * [tLogRow_7 end ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	


//////
//////
globalMap.put("tLogRow_7_NB_LINE",nb_line_tLogRow_7);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tLogRow_7", true);
end_Hash.put("tLogRow_7", System.currentTimeMillis());




/**
 * [tLogRow_7 end ] stop
 */







	
	/**
	 * [tDBOutput_8 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



	    try {
				int countSum_tDBOutput_8 = 0;
				if (pstmt_tDBOutput_8 != null && batchSizeCounter_tDBOutput_8 > 0) {
						
					for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_8){
	    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
	    	String errormessage_tDBOutput_8;
			if (ne_tDBOutput_8 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
				errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
			}else{
				errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
			}
	    	
	    		if (ne_tDBOutput_8 != null) {
	    			throw(sqle_tDBOutput_8);
	    		}else{
	            	throw(e_tDBOutput_8);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_8 != null) {
        		
            pstmt_tDBOutput_8.close();
            resourceMap.remove("pstmt_tDBOutput_8");
        }
    resourceMap.put("statementClosed_tDBOutput_8", true);
			
			conn_tDBOutput_8.commit();
			
		
    	conn_tDBOutput_8 .close();
    	
    	resourceMap.put("finish_tDBOutput_8", true);
    	

	nb_line_deleted_tDBOutput_8=nb_line_deleted_tDBOutput_8+ deletedCount_tDBOutput_8;
	nb_line_update_tDBOutput_8=nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
	nb_line_inserted_tDBOutput_8=nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
	nb_line_rejected_tDBOutput_8=nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;
	
        globalMap.put("tDBOutput_8_NB_LINE",nb_line_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_UPDATED",nb_line_update_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_DELETED",nb_line_deleted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lic_auth");
			  	}
			  	
 

ok_Hash.put("tDBOutput_8", true);
end_Hash.put("tDBOutput_8", System.currentTimeMillis());




/**
 * [tDBOutput_8 end ] stop
 */

	
	/**
	 * [tLogRow_13 end ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	


//////
//////
globalMap.put("tLogRow_13_NB_LINE",nb_line_tLogRow_13);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tLogRow_13", true);
end_Hash.put("tLogRow_13", System.currentTimeMillis());




/**
 * [tLogRow_13 end ] stop
 */







	
	/**
	 * [tDBOutput_9 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



	    try {
				int countSum_tDBOutput_9 = 0;
				if (pstmt_tDBOutput_9 != null && batchSizeCounter_tDBOutput_9 > 0) {
						
					for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_9){
	    	java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),sqle_tDBOutput_9=null;
	    	String errormessage_tDBOutput_9;
			if (ne_tDBOutput_9 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_9 = new java.sql.SQLException(e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(), ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
				errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
			}else{
				errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
			}
	    	
	    		if (ne_tDBOutput_9 != null) {
	    			throw(sqle_tDBOutput_9);
	    		}else{
	            	throw(e_tDBOutput_9);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_9 != null) {
        		
            pstmt_tDBOutput_9.close();
            resourceMap.remove("pstmt_tDBOutput_9");
        }
    resourceMap.put("statementClosed_tDBOutput_9", true);
			
			conn_tDBOutput_9.commit();
			
		
    	conn_tDBOutput_9 .close();
    	
    	resourceMap.put("finish_tDBOutput_9", true);
    	

	nb_line_deleted_tDBOutput_9=nb_line_deleted_tDBOutput_9+ deletedCount_tDBOutput_9;
	nb_line_update_tDBOutput_9=nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
	nb_line_inserted_tDBOutput_9=nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
	nb_line_rejected_tDBOutput_9=nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;
	
        globalMap.put("tDBOutput_9_NB_LINE",nb_line_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_UPDATED",nb_line_update_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_DELETED",nb_line_deleted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ontology");
			  	}
			  	
 

ok_Hash.put("tDBOutput_9", true);
end_Hash.put("tDBOutput_9", System.currentTimeMillis());




/**
 * [tDBOutput_9 end ] stop
 */

	
	/**
	 * [tLogRow_8 end ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	


//////
//////
globalMap.put("tLogRow_8_NB_LINE",nb_line_tLogRow_8);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tLogRow_8", true);
end_Hash.put("tLogRow_8", System.currentTimeMillis());




/**
 * [tLogRow_8 end ] stop
 */







	
	/**
	 * [tDBOutput_10 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



	    try {
				int countSum_tDBOutput_10 = 0;
				if (pstmt_tDBOutput_10 != null && batchSizeCounter_tDBOutput_10 > 0) {
						
					for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
						countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_10){
	    	java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),sqle_tDBOutput_10=null;
	    	String errormessage_tDBOutput_10;
			if (ne_tDBOutput_10 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_10 = new java.sql.SQLException(e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(), ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
				errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
			}else{
				errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
			}
	    	
	    		if (ne_tDBOutput_10 != null) {
	    			throw(sqle_tDBOutput_10);
	    		}else{
	            	throw(e_tDBOutput_10);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_10 != null) {
        		
            pstmt_tDBOutput_10.close();
            resourceMap.remove("pstmt_tDBOutput_10");
        }
    resourceMap.put("statementClosed_tDBOutput_10", true);
			
			conn_tDBOutput_10.commit();
			
		
    	conn_tDBOutput_10 .close();
    	
    	resourceMap.put("finish_tDBOutput_10", true);
    	

	nb_line_deleted_tDBOutput_10=nb_line_deleted_tDBOutput_10+ deletedCount_tDBOutput_10;
	nb_line_update_tDBOutput_10=nb_line_update_tDBOutput_10 + updatedCount_tDBOutput_10;
	nb_line_inserted_tDBOutput_10=nb_line_inserted_tDBOutput_10 + insertedCount_tDBOutput_10;
	nb_line_rejected_tDBOutput_10=nb_line_rejected_tDBOutput_10 + rejectedCount_tDBOutput_10;
	
        globalMap.put("tDBOutput_10_NB_LINE",nb_line_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_UPDATED",nb_line_update_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_DELETED",nb_line_deleted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_10);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"prescribingstatus");
			  	}
			  	
 

ok_Hash.put("tDBOutput_10", true);
end_Hash.put("tDBOutput_10", System.currentTimeMillis());




/**
 * [tDBOutput_10 end ] stop
 */

	
	/**
	 * [tLogRow_12 end ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	


//////
//////
globalMap.put("tLogRow_12_NB_LINE",nb_line_tLogRow_12);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tLogRow_12", true);
end_Hash.put("tLogRow_12", System.currentTimeMillis());




/**
 * [tLogRow_12 end ] stop
 */







	
	/**
	 * [tDBOutput_11 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



	    try {
				int countSum_tDBOutput_11 = 0;
				if (pstmt_tDBOutput_11 != null && batchSizeCounter_tDBOutput_11 > 0) {
						
					for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_11){
	    	java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),sqle_tDBOutput_11=null;
	    	String errormessage_tDBOutput_11;
			if (ne_tDBOutput_11 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_11 = new java.sql.SQLException(e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(), ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
				errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
			}else{
				errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
			}
	    	
	    	int countSum_tDBOutput_11 = 0;
			for(int countEach_tDBOutput_11: e_tDBOutput_11.getUpdateCounts()) {
				countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
			}
			
	    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
	    	
	    	System.err.println(errormessage_tDBOutput_11);
	    	
		}
	    
        if(pstmt_tDBOutput_11 != null) {
        		
            pstmt_tDBOutput_11.close();
            resourceMap.remove("pstmt_tDBOutput_11");
        }
    resourceMap.put("statementClosed_tDBOutput_11", true);
			
			conn_tDBOutput_11.commit();
			
		
    	conn_tDBOutput_11 .close();
    	
    	resourceMap.put("finish_tDBOutput_11", true);
    	

	nb_line_deleted_tDBOutput_11=nb_line_deleted_tDBOutput_11+ deletedCount_tDBOutput_11;
	nb_line_update_tDBOutput_11=nb_line_update_tDBOutput_11 + updatedCount_tDBOutput_11;
	nb_line_inserted_tDBOutput_11=nb_line_inserted_tDBOutput_11 + insertedCount_tDBOutput_11;
	nb_line_rejected_tDBOutput_11=nb_line_rejected_tDBOutput_11 + rejectedCount_tDBOutput_11;
	
        globalMap.put("tDBOutput_11_NB_LINE",nb_line_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_UPDATED",nb_line_update_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_DELETED",nb_line_deleted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_11);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"route");
			  	}
			  	
 

ok_Hash.put("tDBOutput_11", true);
end_Hash.put("tDBOutput_11", System.currentTimeMillis());




/**
 * [tDBOutput_11 end ] stop
 */

	
	/**
	 * [tLogRow_10 end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	


//////
//////
globalMap.put("tLogRow_10_NB_LINE",nb_line_tLogRow_10);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tLogRow_10", true);
end_Hash.put("tLogRow_10", System.currentTimeMillis());




/**
 * [tLogRow_10 end ] stop
 */







	
	/**
	 * [tDBOutput_12 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	



	    try {
				int countSum_tDBOutput_12 = 0;
				if (pstmt_tDBOutput_12 != null && batchSizeCounter_tDBOutput_12 > 0) {
						
					for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
						countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_12){
	    	java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12.getNextException(),sqle_tDBOutput_12=null;
	    	String errormessage_tDBOutput_12;
			if (ne_tDBOutput_12 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_12 = new java.sql.SQLException(e_tDBOutput_12.getMessage() + "\ncaused by: " + ne_tDBOutput_12.getMessage(), ne_tDBOutput_12.getSQLState(), ne_tDBOutput_12.getErrorCode(), ne_tDBOutput_12);
				errormessage_tDBOutput_12 = sqle_tDBOutput_12.getMessage();
			}else{
				errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
			}
	    	
	    		if (ne_tDBOutput_12 != null) {
	    			throw(sqle_tDBOutput_12);
	    		}else{
	            	throw(e_tDBOutput_12);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_12 != null) {
        		
            pstmt_tDBOutput_12.close();
            resourceMap.remove("pstmt_tDBOutput_12");
        }
    resourceMap.put("statementClosed_tDBOutput_12", true);
			
			conn_tDBOutput_12.commit();
			
		
    	conn_tDBOutput_12 .close();
    	
    	resourceMap.put("finish_tDBOutput_12", true);
    	

	nb_line_deleted_tDBOutput_12=nb_line_deleted_tDBOutput_12+ deletedCount_tDBOutput_12;
	nb_line_update_tDBOutput_12=nb_line_update_tDBOutput_12 + updatedCount_tDBOutput_12;
	nb_line_inserted_tDBOutput_12=nb_line_inserted_tDBOutput_12 + insertedCount_tDBOutput_12;
	nb_line_rejected_tDBOutput_12=nb_line_rejected_tDBOutput_12 + rejectedCount_tDBOutput_12;
	
        globalMap.put("tDBOutput_12_NB_LINE",nb_line_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_UPDATED",nb_line_update_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_DELETED",nb_line_deleted_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_12);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"supplier");
			  	}
			  	
 

ok_Hash.put("tDBOutput_12", true);
end_Hash.put("tDBOutput_12", System.currentTimeMillis());




/**
 * [tDBOutput_12 end ] stop
 */

	
	/**
	 * [tLogRow_9 end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	


//////
//////
globalMap.put("tLogRow_9_NB_LINE",nb_line_tLogRow_9);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tLogRow_9", true);
end_Hash.put("tLogRow_9", System.currentTimeMillis());




/**
 * [tLogRow_9 end ] stop
 */







	
	/**
	 * [tDBOutput_13 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



	    try {
				int countSum_tDBOutput_13 = 0;
				if (pstmt_tDBOutput_13 != null && batchSizeCounter_tDBOutput_13 > 0) {
						
					for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
						countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_13){
	    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
	    	String errormessage_tDBOutput_13;
			if (ne_tDBOutput_13 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
				errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
			}else{
				errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
			}
	    	
	    	int countSum_tDBOutput_13 = 0;
			for(int countEach_tDBOutput_13: e_tDBOutput_13.getUpdateCounts()) {
				countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
			}
			
	    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
	    	
	    	System.err.println(errormessage_tDBOutput_13);
	    	
		}
	    
        if(pstmt_tDBOutput_13 != null) {
        		
            pstmt_tDBOutput_13.close();
            resourceMap.remove("pstmt_tDBOutput_13");
        }
    resourceMap.put("statementClosed_tDBOutput_13", true);
			
			conn_tDBOutput_13.commit();
			
		
    	conn_tDBOutput_13 .close();
    	
    	resourceMap.put("finish_tDBOutput_13", true);
    	

	nb_line_deleted_tDBOutput_13=nb_line_deleted_tDBOutput_13+ deletedCount_tDBOutput_13;
	nb_line_update_tDBOutput_13=nb_line_update_tDBOutput_13 + updatedCount_tDBOutput_13;
	nb_line_inserted_tDBOutput_13=nb_line_inserted_tDBOutput_13 + insertedCount_tDBOutput_13;
	nb_line_rejected_tDBOutput_13=nb_line_rejected_tDBOutput_13 + rejectedCount_tDBOutput_13;
	
        globalMap.put("tDBOutput_13_NB_LINE",nb_line_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_UPDATED",nb_line_update_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_DELETED",nb_line_deleted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_13);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"uom");
			  	}
			  	
 

ok_Hash.put("tDBOutput_13", true);
end_Hash.put("tDBOutput_13", System.currentTimeMillis());




/**
 * [tDBOutput_13 end ] stop
 */

	
	/**
	 * [tLogRow_11 end ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	


//////
//////
globalMap.put("tLogRow_11_NB_LINE",nb_line_tLogRow_11);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tLogRow_11", true);
end_Hash.put("tLogRow_11", System.currentTimeMillis());




/**
 * [tLogRow_11 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileInputXML_2);
						}				
					




	
	/**
	 * [tFileList_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_end ] stop
 */
	
	/**
	 * [tFileList_2 end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

  
    }
  globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
  

    if (NB_FILEtFileList_2 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_2);
  
 

 

ok_Hash.put("tFileList_2", true);
end_Hash.put("tFileList_2", System.currentTimeMillis());




/**
 * [tFileList_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_2 finally ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 finally ] stop
 */

	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";

	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_2_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_2_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */







	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */







	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */







	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_7") == null){
            java.sql.Connection ctn_tDBOutput_7 = null;
            if((ctn_tDBOutput_7 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_7")) != null){
                try {
                    ctn_tDBOutput_7.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_7) {
                    String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :" + sqlEx_tDBOutput_7.getMessage();
                    System.err.println(errorMessage_tDBOutput_7);
                }
            }
        }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */

	
	/**
	 * [tLogRow_5 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 finally ] stop
 */







	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_6") == null){
            java.sql.Connection ctn_tDBOutput_6 = null;
            if((ctn_tDBOutput_6 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_6")) != null){
                try {
                    ctn_tDBOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_6) {
                    String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :" + sqlEx_tDBOutput_6.getMessage();
                    System.err.println(errorMessage_tDBOutput_6);
                }
            }
        }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */

	
	/**
	 * [tLogRow_6 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 finally ] stop
 */







	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_5") == null){
            java.sql.Connection ctn_tDBOutput_5 = null;
            if((ctn_tDBOutput_5 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_5")) != null){
                try {
                    ctn_tDBOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_5) {
                    String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :" + sqlEx_tDBOutput_5.getMessage();
                    System.err.println(errorMessage_tDBOutput_5);
                }
            }
        }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */

	
	/**
	 * [tLogRow_7 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

 



/**
 * [tLogRow_7 finally ] stop
 */







	
	/**
	 * [tDBOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
                if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_8")) != null) {
                    pstmtToClose_tDBOutput_8.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_8") == null){
            java.sql.Connection ctn_tDBOutput_8 = null;
            if((ctn_tDBOutput_8 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_8")) != null){
                try {
                    ctn_tDBOutput_8.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_8) {
                    String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :" + sqlEx_tDBOutput_8.getMessage();
                    System.err.println(errorMessage_tDBOutput_8);
                }
            }
        }
    }
 



/**
 * [tDBOutput_8 finally ] stop
 */

	
	/**
	 * [tLogRow_13 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 finally ] stop
 */







	
	/**
	 * [tDBOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
                if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_9")) != null) {
                    pstmtToClose_tDBOutput_9.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_9") == null){
            java.sql.Connection ctn_tDBOutput_9 = null;
            if((ctn_tDBOutput_9 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_9")) != null){
                try {
                    ctn_tDBOutput_9.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_9) {
                    String errorMessage_tDBOutput_9 = "failed to close the connection in tDBOutput_9 :" + sqlEx_tDBOutput_9.getMessage();
                    System.err.println(errorMessage_tDBOutput_9);
                }
            }
        }
    }
 



/**
 * [tDBOutput_9 finally ] stop
 */

	
	/**
	 * [tLogRow_8 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 finally ] stop
 */







	
	/**
	 * [tDBOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
                if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_10")) != null) {
                    pstmtToClose_tDBOutput_10.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_10") == null){
            java.sql.Connection ctn_tDBOutput_10 = null;
            if((ctn_tDBOutput_10 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_10")) != null){
                try {
                    ctn_tDBOutput_10.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_10) {
                    String errorMessage_tDBOutput_10 = "failed to close the connection in tDBOutput_10 :" + sqlEx_tDBOutput_10.getMessage();
                    System.err.println(errorMessage_tDBOutput_10);
                }
            }
        }
    }
 



/**
 * [tDBOutput_10 finally ] stop
 */

	
	/**
	 * [tLogRow_12 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 finally ] stop
 */







	
	/**
	 * [tDBOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_11 = null;
                if ((pstmtToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_11")) != null) {
                    pstmtToClose_tDBOutput_11.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_11") == null){
            java.sql.Connection ctn_tDBOutput_11 = null;
            if((ctn_tDBOutput_11 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_11")) != null){
                try {
                    ctn_tDBOutput_11.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_11) {
                    String errorMessage_tDBOutput_11 = "failed to close the connection in tDBOutput_11 :" + sqlEx_tDBOutput_11.getMessage();
                    System.err.println(errorMessage_tDBOutput_11);
                }
            }
        }
    }
 



/**
 * [tDBOutput_11 finally ] stop
 */

	
	/**
	 * [tLogRow_10 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 finally ] stop
 */







	
	/**
	 * [tDBOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_12 = null;
                if ((pstmtToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_12")) != null) {
                    pstmtToClose_tDBOutput_12.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_12") == null){
            java.sql.Connection ctn_tDBOutput_12 = null;
            if((ctn_tDBOutput_12 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_12")) != null){
                try {
                    ctn_tDBOutput_12.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_12) {
                    String errorMessage_tDBOutput_12 = "failed to close the connection in tDBOutput_12 :" + sqlEx_tDBOutput_12.getMessage();
                    System.err.println(errorMessage_tDBOutput_12);
                }
            }
        }
    }
 



/**
 * [tDBOutput_12 finally ] stop
 */

	
	/**
	 * [tLogRow_9 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 finally ] stop
 */







	
	/**
	 * [tDBOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
                if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_13")) != null) {
                    pstmtToClose_tDBOutput_13.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_13") == null){
            java.sql.Connection ctn_tDBOutput_13 = null;
            if((ctn_tDBOutput_13 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_13")) != null){
                try {
                    ctn_tDBOutput_13.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_13) {
                    String errorMessage_tDBOutput_13 = "failed to close the connection in tDBOutput_13 :" + sqlEx_tDBOutput_13.getMessage();
                    System.err.println(errorMessage_tDBOutput_13);
                }
            }
        }
    }
 



/**
 * [tDBOutput_13 finally ] stop
 */

	
	/**
	 * [tLogRow_11 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}
	

public void tDie_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_8", false);
		start_Hash.put("tDie_8", System.currentTimeMillis());
		
	
	currentComponent="tDie_8";

	
		int tos_count_tDie_8 = 0;
		

 



/**
 * [tDie_8 begin ] stop
 */
	
	/**
	 * [tDie_8 main ] start
	 */

	

	
	
	currentComponent="tDie_8";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_8", 5, "the end is near", 4);
				tLogCatcher_1Process(globalMap);
				
				talendLogs_LOGS.addMessage("tDie", "tDie_8", 5, "the end is near", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_8_DIE_PRIORITY", 5);
	System.err.println("the end is near");
	
	globalMap.put("tDie_8_DIE_MESSAGE", "the end is near");
	globalMap.put("tDie_8_DIE_MESSAGES", "the end is near");
	
	} catch (Exception | Error e_tDie_8) {
		logIgnoredError(String.format("tDie_8 - tDie failed to log message due to internal error: %s", e_tDie_8), e_tDie_8);
	}
	
	currentComponent = "tDie_8";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_8_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_8++;

/**
 * [tDie_8 main ] stop
 */
	
	/**
	 * [tDie_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_8";

	

 



/**
 * [tDie_8 process_data_begin ] stop
 */
	
	/**
	 * [tDie_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_8";

	

 



/**
 * [tDie_8 process_data_end ] stop
 */
	
	/**
	 * [tDie_8 end ] start
	 */

	

	
	
	currentComponent="tDie_8";

	

 

ok_Hash.put("tDie_8", true);
end_Hash.put("tDie_8", System.currentTimeMillis());




/**
 * [tDie_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_8 finally ] start
	 */

	

	
	
	currentComponent="tDie_8";

	

 



/**
 * [tDie_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_8_SUBPROCESS_STATE", 1);
	}
	


public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row36Struct row36 = new row36Struct();




	
	/**
	 * [tLogRow_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_24", false);
		start_Hash.put("tLogRow_24", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tLogRow_24 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_24 = "|";
		java.io.PrintStream consoleOut_tLogRow_24 = null;	

 		StringBuilder strBuffer_tLogRow_24 = null;
		int nb_line_tLogRow_24 = 0;
///////////////////////    			



 



/**
 * [tLogRow_24 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row36.type = lcm.getType();
		row36.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row36.priority = lcm.getPriority();
		row36.message = lcm.getMessage();
		row36.code = lcm.getCode();
		
		row36.moment = java.util.Calendar.getInstance().getTime();
	
    	row36.pid = pid;
		row36.root_pid = rootPid;
		row36.father_pid = fatherPid;
	
    	row36.project = projectName;
    	row36.job = jobName;
    	row36.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_24 main ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row36");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_24 = new StringBuilder();




   				
	    		if(row36.moment != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
								FormatterUtils.format_Date(row36.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row36.pid != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row36.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row36.root_pid != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row36.root_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row36.father_pid != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row36.father_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row36.project != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row36.project)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row36.job != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row36.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row36.context != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row36.context)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row36.priority != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row36.priority)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row36.type != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row36.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row36.origin != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row36.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row36.message != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row36.message)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_24.append("|");
    			


   				
	    		if(row36.code != null) { //              
                    							
       
				strBuffer_tLogRow_24.append(
				                String.valueOf(row36.code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_24 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_24 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_24);
                    }
                    consoleOut_tLogRow_24.println(strBuffer_tLogRow_24.toString());
                    consoleOut_tLogRow_24.flush();
                    nb_line_tLogRow_24++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_24++;

/**
 * [tLogRow_24 main ] stop
 */
	
	/**
	 * [tLogRow_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	

 



/**
 * [tLogRow_24 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	

 



/**
 * [tLogRow_24 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_24 end ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	


//////
//////
globalMap.put("tLogRow_24_NB_LINE",nb_line_tLogRow_24);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tLogRow_24", true);
end_Hash.put("tLogRow_24", System.currentTimeMillis());




/**
 * [tLogRow_24 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_24 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_24";

	

 



/**
 * [tLogRow_24 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendStats_FILEStruct implements routines.system.IPersistableRow<row_talendStats_FILEStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendStats_FILEStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row_talendStats_STATSStruct implements routines.system.IPersistableRow<row_talendStats_STATSStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendStats_STATSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendStats_STATSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();
row_talendStats_STATSStruct row_talendStats_FILE = row_talendStats_STATS;





	
	/**
	 * [talendStats_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_CONSOLE", false);
		start_Hash.put("talendStats_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendStats_CONSOLE = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendStats_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendStats_CONSOLE = null;	

 		StringBuilder strBuffer_talendStats_CONSOLE = null;
		int nb_line_talendStats_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendStats_CONSOLE begin ] stop
 */



	
	/**
	 * [talendStats_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_FILE", false);
		start_Hash.put("talendStats_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendStats_FILE = 0;
		

String fileName_talendStats_FILE = "";
    fileName_talendStats_FILE = (new java.io.File("C:/MMCJobsLogs"+ "/" +"stats_file.txt")).getAbsolutePath().replace("\\","/");
    String fullName_talendStats_FILE = null;
    String extension_talendStats_FILE = null;
    String directory_talendStats_FILE = null;
    if((fileName_talendStats_FILE.indexOf("/") != -1)) {
        if(fileName_talendStats_FILE.lastIndexOf(".") < fileName_talendStats_FILE.lastIndexOf("/")) {
            fullName_talendStats_FILE = fileName_talendStats_FILE;
            extension_talendStats_FILE = "";
        } else {
            fullName_talendStats_FILE = fileName_talendStats_FILE.substring(0, fileName_talendStats_FILE.lastIndexOf("."));
            extension_talendStats_FILE = fileName_talendStats_FILE.substring(fileName_talendStats_FILE.lastIndexOf("."));
        }
        directory_talendStats_FILE = fileName_talendStats_FILE.substring(0, fileName_talendStats_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendStats_FILE.lastIndexOf(".") != -1) {
            fullName_talendStats_FILE = fileName_talendStats_FILE.substring(0, fileName_talendStats_FILE.lastIndexOf("."));
            extension_talendStats_FILE = fileName_talendStats_FILE.substring(fileName_talendStats_FILE.lastIndexOf("."));
        } else {
            fullName_talendStats_FILE = fileName_talendStats_FILE;
            extension_talendStats_FILE = "";
        }
        directory_talendStats_FILE = "";
    }
    boolean isFileGenerated_talendStats_FILE = true;
    java.io.File filetalendStats_FILE = new java.io.File(fileName_talendStats_FILE);
    globalMap.put("talendStats_FILE_FILE_NAME",fileName_talendStats_FILE);
        if(filetalendStats_FILE.exists()){
            isFileGenerated_talendStats_FILE = false;
        }
            int nb_line_talendStats_FILE = 0;
            int splitedFileNo_talendStats_FILE = 0;
            int currentRow_talendStats_FILE = 0;

            final String OUT_DELIM_talendStats_FILE = /** Start field talendStats_FILE:FIELDSEPARATOR */";"/** End field talendStats_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendStats_FILE = /** Start field talendStats_FILE:ROWSEPARATOR */"\n"/** End field talendStats_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendStats_FILE != null && directory_talendStats_FILE.trim().length() != 0) {
                        java.io.File dir_talendStats_FILE = new java.io.File(directory_talendStats_FILE);
                        if(!dir_talendStats_FILE.exists()) {
                            dir_talendStats_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendStats_FILE = null;

                        outtalendStats_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendStats_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendStats_FILE", outtalendStats_FILE);
resourceMap.put("nb_line_talendStats_FILE", nb_line_talendStats_FILE);

 



/**
 * [talendStats_FILE begin ] stop
 */



	
	/**
	 * [talendStats_STATS begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_STATS", false);
		start_Hash.put("talendStats_STATS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	
		int tos_count_talendStats_STATS = 0;
		

	for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS.getMessages()) {
		row_talendStats_STATS.pid = pid;
		row_talendStats_STATS.root_pid = rootPid;
		row_talendStats_STATS.father_pid = fatherPid;	
    	row_talendStats_STATS.project = projectName;
    	row_talendStats_STATS.job = jobName;
    	row_talendStats_STATS.context = contextStr;
		row_talendStats_STATS.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row_talendStats_STATS.message = scm.getMessage();
		row_talendStats_STATS.duration = scm.getDuration();
		row_talendStats_STATS.moment = scm.getMoment();
		row_talendStats_STATS.message_type = scm.getMessageType();
		row_talendStats_STATS.job_version = scm.getJobVersion();
		row_talendStats_STATS.job_repository_id = scm.getJobId();
		row_talendStats_STATS.system_pid = scm.getSystemPid();

 



/**
 * [talendStats_STATS begin ] stop
 */
	
	/**
	 * [talendStats_STATS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 


	tos_count_talendStats_STATS++;

/**
 * [talendStats_STATS main ] stop
 */
	
	/**
	 * [talendStats_STATS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS process_data_begin ] stop
 */

	
	/**
	 * [talendStats_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					


                    StringBuilder sb_talendStats_FILE = new StringBuilder();
                            if(row_talendStats_STATS.moment != null) {
                        sb_talendStats_FILE.append(
                            FormatterUtils.format_Date(row_talendStats_STATS.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.father_pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.father_pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.root_pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.root_pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.system_pid != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.system_pid
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.project != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.project
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.job != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.job
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.job_repository_id != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.job_repository_id
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.job_version != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.job_version
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.context != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.context
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.origin != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.origin
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.message_type != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.message_type
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.message != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.message
                        );
                            }
                            sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
                            if(row_talendStats_STATS.duration != null) {
                        sb_talendStats_FILE.append(
                            row_talendStats_STATS.duration
                        );
                            }
                    sb_talendStats_FILE.append(OUT_DELIM_ROWSEP_talendStats_FILE);


                    nb_line_talendStats_FILE++;
                    resourceMap.put("nb_line_talendStats_FILE", nb_line_talendStats_FILE);

                        outtalendStats_FILE.write(sb_talendStats_FILE.toString());




 
     row_talendStats_FILE = row_talendStats_STATS;


	tos_count_talendStats_FILE++;

/**
 * [talendStats_FILE main ] stop
 */
	
	/**
	 * [talendStats_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	

 



/**
 * [talendStats_FILE process_data_begin ] stop
 */

	
	/**
	 * [talendStats_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					
///////////////////////		
						



				strBuffer_talendStats_CONSOLE = new StringBuilder();




   				
	    		if(row_talendStats_FILE.moment != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
								FormatterUtils.format_Date(row_talendStats_FILE.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.father_pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.root_pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.system_pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.system_pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.project != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.project)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.job != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.job)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.job_repository_id != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.job_repository_id)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.job_version != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.job_version)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.context != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.context)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.origin != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.origin)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.message_type != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.message_type)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.message != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.message)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_FILE.duration != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_FILE.duration)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendStats_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendStats_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendStats_CONSOLE);
                    }
                    consoleOut_talendStats_CONSOLE.println(strBuffer_talendStats_CONSOLE.toString());
                    consoleOut_talendStats_CONSOLE.flush();
                    nb_line_talendStats_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendStats_CONSOLE++;

/**
 * [talendStats_CONSOLE main ] stop
 */
	
	/**
	 * [talendStats_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	

 



/**
 * [talendStats_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendStats_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	

 



/**
 * [talendStats_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendStats_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	

 



/**
 * [talendStats_FILE process_data_end ] stop
 */



	
	/**
	 * [talendStats_STATS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS process_data_end ] stop
 */
	
	/**
	 * [talendStats_STATS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

	}


 

ok_Hash.put("talendStats_STATS", true);
end_Hash.put("talendStats_STATS", System.currentTimeMillis());




/**
 * [talendStats_STATS end ] stop
 */

	
	/**
	 * [talendStats_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	



		
			
					if(outtalendStats_FILE!=null) {
						outtalendStats_FILE.flush();
						outtalendStats_FILE.close();
					}
				
				globalMap.put("talendStats_FILE_NB_LINE",nb_line_talendStats_FILE);
				globalMap.put("talendStats_FILE_FILE_NAME",fileName_talendStats_FILE);
			
		
		
		resourceMap.put("finish_talendStats_FILE", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendStats_FILE", true);
end_Hash.put("talendStats_FILE", System.currentTimeMillis());




/**
 * [talendStats_FILE end ] stop
 */

	
	/**
	 * [talendStats_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	


//////
//////
globalMap.put("talendStats_CONSOLE_NB_LINE",nb_line_talendStats_CONSOLE);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendStats_CONSOLE", true);
end_Hash.put("talendStats_CONSOLE", System.currentTimeMillis());




/**
 * [talendStats_CONSOLE end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendStats_STATS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS finally ] stop
 */

	
	/**
	 * [talendStats_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_FILE";
	
	currentComponent="talendStats_FILE";

	


		if(resourceMap.get("finish_talendStats_FILE") == null){ 
			
				
						java.io.Writer outtalendStats_FILE = (java.io.Writer)resourceMap.get("out_talendStats_FILE");
						if(outtalendStats_FILE!=null) {
							outtalendStats_FILE.flush();
							outtalendStats_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendStats_FILE finally ] stop
 */

	
	/**
	 * [talendStats_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	

 



/**
 * [talendStats_CONSOLE finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_FILEStruct implements routines.system.IPersistableRow<row_talendLogs_FILEStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_FILEStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();
row_talendLogs_LOGSStruct row_talendLogs_FILE = row_talendLogs_LOGS;





	
	/**
	 * [talendLogs_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_CONSOLE", false);
		start_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_CONSOLE = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendLogs_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendLogs_CONSOLE = null;	

 		StringBuilder strBuffer_talendLogs_CONSOLE = null;
		int nb_line_talendLogs_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendLogs_CONSOLE begin ] stop
 */



	
	/**
	 * [talendLogs_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_FILE", false);
		start_Hash.put("talendLogs_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_FILE = 0;
		

String fileName_talendLogs_FILE = "";
    fileName_talendLogs_FILE = (new java.io.File("C:/MMCJobsLogs"+ "/" +"logs_file.txt")).getAbsolutePath().replace("\\","/");
    String fullName_talendLogs_FILE = null;
    String extension_talendLogs_FILE = null;
    String directory_talendLogs_FILE = null;
    if((fileName_talendLogs_FILE.indexOf("/") != -1)) {
        if(fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE.lastIndexOf("/")) {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE;
            extension_talendLogs_FILE = "";
        } else {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("."));
            extension_talendLogs_FILE = fileName_talendLogs_FILE.substring(fileName_talendLogs_FILE.lastIndexOf("."));
        }
        directory_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("."));
            extension_talendLogs_FILE = fileName_talendLogs_FILE.substring(fileName_talendLogs_FILE.lastIndexOf("."));
        } else {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE;
            extension_talendLogs_FILE = "";
        }
        directory_talendLogs_FILE = "";
    }
    boolean isFileGenerated_talendLogs_FILE = true;
    java.io.File filetalendLogs_FILE = new java.io.File(fileName_talendLogs_FILE);
    globalMap.put("talendLogs_FILE_FILE_NAME",fileName_talendLogs_FILE);
        if(filetalendLogs_FILE.exists()){
            isFileGenerated_talendLogs_FILE = false;
        }
            int nb_line_talendLogs_FILE = 0;
            int splitedFileNo_talendLogs_FILE = 0;
            int currentRow_talendLogs_FILE = 0;

            final String OUT_DELIM_talendLogs_FILE = /** Start field talendLogs_FILE:FIELDSEPARATOR */";"/** End field talendLogs_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendLogs_FILE = /** Start field talendLogs_FILE:ROWSEPARATOR */"\n"/** End field talendLogs_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendLogs_FILE != null && directory_talendLogs_FILE.trim().length() != 0) {
                        java.io.File dir_talendLogs_FILE = new java.io.File(directory_talendLogs_FILE);
                        if(!dir_talendLogs_FILE.exists()) {
                            dir_talendLogs_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendLogs_FILE = null;

                        outtalendLogs_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendLogs_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendLogs_FILE", outtalendLogs_FILE);
resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

 



/**
 * [talendLogs_FILE begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					


                    StringBuilder sb_talendLogs_FILE = new StringBuilder();
                            if(row_talendLogs_LOGS.moment != null) {
                        sb_talendLogs_FILE.append(
                            FormatterUtils.format_Date(row_talendLogs_LOGS.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.root_pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.root_pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.father_pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.father_pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.project != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.project
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.job != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.job
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.context != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.context
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.priority != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.priority
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.type != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.type
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.origin != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.origin
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.message != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.message
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.code != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.code
                        );
                            }
                    sb_talendLogs_FILE.append(OUT_DELIM_ROWSEP_talendLogs_FILE);


                    nb_line_talendLogs_FILE++;
                    resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

                        outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());




 
     row_talendLogs_FILE = row_talendLogs_LOGS;


	tos_count_talendLogs_FILE++;

/**
 * [talendLogs_FILE main ] stop
 */
	
	/**
	 * [talendLogs_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

 



/**
 * [talendLogs_FILE process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					
///////////////////////		
						



				strBuffer_talendLogs_CONSOLE = new StringBuilder();




   				
	    		if(row_talendLogs_FILE.moment != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
								FormatterUtils.format_Date(row_talendLogs_FILE.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.root_pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.father_pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.project != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.project)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.job != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.job)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.context != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.context)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.priority != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.priority)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.type != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.type)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.origin != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.origin)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.message != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.message)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_FILE.code != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_FILE.code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendLogs_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendLogs_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendLogs_CONSOLE);
                    }
                    consoleOut_talendLogs_CONSOLE.println(strBuffer_talendLogs_CONSOLE.toString());
                    consoleOut_talendLogs_CONSOLE.flush();
                    nb_line_talendLogs_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendLogs_CONSOLE++;

/**
 * [talendLogs_CONSOLE main ] stop
 */
	
	/**
	 * [talendLogs_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendLogs_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

 



/**
 * [talendLogs_FILE process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	



		
			
					if(outtalendLogs_FILE!=null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}
				
				globalMap.put("talendLogs_FILE_NB_LINE",nb_line_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",fileName_talendLogs_FILE);
			
		
		
		resourceMap.put("finish_talendLogs_FILE", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_FILE", true);
end_Hash.put("talendLogs_FILE", System.currentTimeMillis());




/**
 * [talendLogs_FILE end ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	


//////
//////
globalMap.put("talendLogs_CONSOLE_NB_LINE",nb_line_talendLogs_CONSOLE);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_CONSOLE", true);
end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());




/**
 * [talendLogs_CONSOLE end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	


		if(resourceMap.get("finish_talendLogs_FILE") == null){ 
			
				
						java.io.Writer outtalendLogs_FILE = (java.io.Writer)resourceMap.get("out_talendLogs_FILE");
						if(outtalendLogs_FILE!=null) {
							outtalendLogs_FILE.flush();
							outtalendLogs_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendLogs_FILE finally ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendMeter_FILEStruct implements routines.system.IPersistableRow<row_talendMeter_FILEStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendMeter_FILEStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row_talendMeter_METTERStruct implements routines.system.IPersistableRow<row_talendMeter_METTERStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1.length == 0) {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_dmd_seed_data_xml_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_dmd_seed_data_xml_1) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendMeter_METTERStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendMeter_METTERProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendMeter_METTERStruct row_talendMeter_METTER = new row_talendMeter_METTERStruct();
row_talendMeter_METTERStruct row_talendMeter_FILE = row_talendMeter_METTER;





	
	/**
	 * [talendMeter_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_CONSOLE", false);
		start_Hash.put("talendMeter_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendMeter_CONSOLE = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendMeter_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendMeter_CONSOLE = null;	

 		StringBuilder strBuffer_talendMeter_CONSOLE = null;
		int nb_line_talendMeter_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendMeter_CONSOLE begin ] stop
 */



	
	/**
	 * [talendMeter_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_FILE", false);
		start_Hash.put("talendMeter_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendMeter_FILE = 0;
		

String fileName_talendMeter_FILE = "";
    fileName_talendMeter_FILE = (new java.io.File("C:/MMCJobsLogs"+ "/" +"meter_file.txt")).getAbsolutePath().replace("\\","/");
    String fullName_talendMeter_FILE = null;
    String extension_talendMeter_FILE = null;
    String directory_talendMeter_FILE = null;
    if((fileName_talendMeter_FILE.indexOf("/") != -1)) {
        if(fileName_talendMeter_FILE.lastIndexOf(".") < fileName_talendMeter_FILE.lastIndexOf("/")) {
            fullName_talendMeter_FILE = fileName_talendMeter_FILE;
            extension_talendMeter_FILE = "";
        } else {
            fullName_talendMeter_FILE = fileName_talendMeter_FILE.substring(0, fileName_talendMeter_FILE.lastIndexOf("."));
            extension_talendMeter_FILE = fileName_talendMeter_FILE.substring(fileName_talendMeter_FILE.lastIndexOf("."));
        }
        directory_talendMeter_FILE = fileName_talendMeter_FILE.substring(0, fileName_talendMeter_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendMeter_FILE.lastIndexOf(".") != -1) {
            fullName_talendMeter_FILE = fileName_talendMeter_FILE.substring(0, fileName_talendMeter_FILE.lastIndexOf("."));
            extension_talendMeter_FILE = fileName_talendMeter_FILE.substring(fileName_talendMeter_FILE.lastIndexOf("."));
        } else {
            fullName_talendMeter_FILE = fileName_talendMeter_FILE;
            extension_talendMeter_FILE = "";
        }
        directory_talendMeter_FILE = "";
    }
    boolean isFileGenerated_talendMeter_FILE = true;
    java.io.File filetalendMeter_FILE = new java.io.File(fileName_talendMeter_FILE);
    globalMap.put("talendMeter_FILE_FILE_NAME",fileName_talendMeter_FILE);
        if(filetalendMeter_FILE.exists()){
            isFileGenerated_talendMeter_FILE = false;
        }
            int nb_line_talendMeter_FILE = 0;
            int splitedFileNo_talendMeter_FILE = 0;
            int currentRow_talendMeter_FILE = 0;

            final String OUT_DELIM_talendMeter_FILE = /** Start field talendMeter_FILE:FIELDSEPARATOR */";"/** End field talendMeter_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendMeter_FILE = /** Start field talendMeter_FILE:ROWSEPARATOR */"\n"/** End field talendMeter_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendMeter_FILE != null && directory_talendMeter_FILE.trim().length() != 0) {
                        java.io.File dir_talendMeter_FILE = new java.io.File(directory_talendMeter_FILE);
                        if(!dir_talendMeter_FILE.exists()) {
                            dir_talendMeter_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendMeter_FILE = null;

                        outtalendMeter_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendMeter_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendMeter_FILE", outtalendMeter_FILE);
resourceMap.put("nb_line_talendMeter_FILE", nb_line_talendMeter_FILE);

 



/**
 * [talendMeter_FILE begin ] stop
 */



	
	/**
	 * [talendMeter_METTER begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_METTER", false);
		start_Hash.put("talendMeter_METTER", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	
		int tos_count_talendMeter_METTER = 0;
		

	for (MetterCatcherUtils.MetterCatcherMessage mcm : talendMeter_METTER.getMessages()) {
		row_talendMeter_METTER.pid = pid;
		row_talendMeter_METTER.root_pid = rootPid;
		row_talendMeter_METTER.father_pid = fatherPid;	
        row_talendMeter_METTER.project = projectName;
        row_talendMeter_METTER.job = jobName;
        row_talendMeter_METTER.context = contextStr;
		row_talendMeter_METTER.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row_talendMeter_METTER.moment = mcm.getMoment();
		row_talendMeter_METTER.job_version = mcm.getJobVersion();
		row_talendMeter_METTER.job_repository_id = mcm.getJobId();
		row_talendMeter_METTER.system_pid = mcm.getSystemPid();
		row_talendMeter_METTER.label = mcm.getLabel();
		row_talendMeter_METTER.count = mcm.getCount();
		row_talendMeter_METTER.reference = talendMeter_METTER.getConnLinesCount(mcm.getReferense()+"_count");
		row_talendMeter_METTER.thresholds = mcm.getThresholds();
		

 



/**
 * [talendMeter_METTER begin ] stop
 */
	
	/**
	 * [talendMeter_METTER main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 


	tos_count_talendMeter_METTER++;

/**
 * [talendMeter_METTER main ] stop
 */
	
	/**
	 * [talendMeter_METTER process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER process_data_begin ] stop
 */

	
	/**
	 * [talendMeter_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					


                    StringBuilder sb_talendMeter_FILE = new StringBuilder();
                            if(row_talendMeter_METTER.moment != null) {
                        sb_talendMeter_FILE.append(
                            FormatterUtils.format_Date(row_talendMeter_METTER.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.pid != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.pid
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.father_pid != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.father_pid
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.root_pid != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.root_pid
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.system_pid != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.system_pid
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.project != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.project
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.job != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.job
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.job_repository_id != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.job_repository_id
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.job_version != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.job_version
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.context != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.context
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.origin != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.origin
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.label != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.label
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.count != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.count
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.reference != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.reference
                        );
                            }
                            sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
                            if(row_talendMeter_METTER.thresholds != null) {
                        sb_talendMeter_FILE.append(
                            row_talendMeter_METTER.thresholds
                        );
                            }
                    sb_talendMeter_FILE.append(OUT_DELIM_ROWSEP_talendMeter_FILE);


                    nb_line_talendMeter_FILE++;
                    resourceMap.put("nb_line_talendMeter_FILE", nb_line_talendMeter_FILE);

                        outtalendMeter_FILE.write(sb_talendMeter_FILE.toString());




 
     row_talendMeter_FILE = row_talendMeter_METTER;


	tos_count_talendMeter_FILE++;

/**
 * [talendMeter_FILE main ] stop
 */
	
	/**
	 * [talendMeter_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	

 



/**
 * [talendMeter_FILE process_data_begin ] stop
 */

	
	/**
	 * [talendMeter_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					
///////////////////////		
						



				strBuffer_talendMeter_CONSOLE = new StringBuilder();




   				
	    		if(row_talendMeter_FILE.moment != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
								FormatterUtils.format_Date(row_talendMeter_FILE.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.father_pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.root_pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.system_pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.system_pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.project != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.project)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.job != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.job)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.job_repository_id != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.job_repository_id)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.job_version != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.job_version)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.context != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.context)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.origin != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.origin)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.label != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.label)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.count != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.count)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.reference != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.reference)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_FILE.thresholds != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_FILE.thresholds)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendMeter_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendMeter_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendMeter_CONSOLE);
                    }
                    consoleOut_talendMeter_CONSOLE.println(strBuffer_talendMeter_CONSOLE.toString());
                    consoleOut_talendMeter_CONSOLE.flush();
                    nb_line_talendMeter_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendMeter_CONSOLE++;

/**
 * [talendMeter_CONSOLE main ] stop
 */
	
	/**
	 * [talendMeter_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	

 



/**
 * [talendMeter_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendMeter_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	

 



/**
 * [talendMeter_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendMeter_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	

 



/**
 * [talendMeter_FILE process_data_end ] stop
 */



	
	/**
	 * [talendMeter_METTER process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER process_data_end ] stop
 */
	
	/**
	 * [talendMeter_METTER end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

	}


 

ok_Hash.put("talendMeter_METTER", true);
end_Hash.put("talendMeter_METTER", System.currentTimeMillis());




/**
 * [talendMeter_METTER end ] stop
 */

	
	/**
	 * [talendMeter_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	



		
			
					if(outtalendMeter_FILE!=null) {
						outtalendMeter_FILE.flush();
						outtalendMeter_FILE.close();
					}
				
				globalMap.put("talendMeter_FILE_NB_LINE",nb_line_talendMeter_FILE);
				globalMap.put("talendMeter_FILE_FILE_NAME",fileName_talendMeter_FILE);
			
		
		
		resourceMap.put("finish_talendMeter_FILE", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendMeter_FILE", true);
end_Hash.put("talendMeter_FILE", System.currentTimeMillis());




/**
 * [talendMeter_FILE end ] stop
 */

	
	/**
	 * [talendMeter_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	


//////
//////
globalMap.put("talendMeter_CONSOLE_NB_LINE",nb_line_talendMeter_CONSOLE);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendMeter_CONSOLE", true);
end_Hash.put("talendMeter_CONSOLE", System.currentTimeMillis());




/**
 * [talendMeter_CONSOLE end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendMeter_METTER finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER finally ] stop
 */

	
	/**
	 * [talendMeter_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_FILE";
	
	currentComponent="talendMeter_FILE";

	


		if(resourceMap.get("finish_talendMeter_FILE") == null){ 
			
				
						java.io.Writer outtalendMeter_FILE = (java.io.Writer)resourceMap.get("out_talendMeter_FILE");
						if(outtalendMeter_FILE!=null) {
							outtalendMeter_FILE.flush();
							outtalendMeter_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendMeter_FILE finally ] stop
 */

	
	/**
	 * [talendMeter_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	

 



/**
 * [talendMeter_CONSOLE finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final dmd_seed_data_xml_1 dmd_seed_data_xml_1Class = new dmd_seed_data_xml_1();

        int exitCode = dmd_seed_data_xml_1Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dmd_seed_data_xml_1.class.getClassLoader().getResourceAsStream("local_project/dmd_seed_data_xml_1_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dmd_seed_data_xml_1.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("dmd_db_additionalparams", "id_String");
                            context.dmd_db_additionalparams=(String) context.getProperty("dmd_db_additionalparams");
                        context.setContextType("dmd_db_host", "id_String");
                            context.dmd_db_host=(String) context.getProperty("dmd_db_host");
                        context.setContextType("dmd_db_name", "id_String");
                            context.dmd_db_name=(String) context.getProperty("dmd_db_name");
                        context.setContextType("dmd_db_password", "id_Password");
                            String pwd_dmd_db_password_value = context.getProperty("dmd_db_password");
                            context.dmd_db_password = null;
                            if(pwd_dmd_db_password_value!=null) {
                                if(context_param.containsKey("dmd_db_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.dmd_db_password = pwd_dmd_db_password_value;
                                } else if (!pwd_dmd_db_password_value.isEmpty()) {
                                    try {
                                        context.dmd_db_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_dmd_db_password_value);
                                        context.put("dmd_db_password",context.dmd_db_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("dmd_db_port", "id_Integer");
                            try{
                                context.dmd_db_port=routines.system.ParserUtils.parseTo_Integer (context.getProperty("dmd_db_port"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "dmd_db_port", e.getMessage()));
                                context.dmd_db_port=null;
                            }
                        context.setContextType("dmd_db_psql_path", "id_String");
                            context.dmd_db_psql_path=(String) context.getProperty("dmd_db_psql_path");
                        context.setContextType("dmd_db_pwd_string", "id_String");
                            context.dmd_db_pwd_string=(String) context.getProperty("dmd_db_pwd_string");
                        context.setContextType("dmd_db_schema", "id_String");
                            context.dmd_db_schema=(String) context.getProperty("dmd_db_schema");
                        context.setContextType("dmd_db_script_path", "id_String");
                            context.dmd_db_script_path=(String) context.getProperty("dmd_db_script_path");
                        context.setContextType("dmd_db_user", "id_String");
                            context.dmd_db_user=(String) context.getProperty("dmd_db_user");
                        context.setContextType("dmd_file_path", "id_String");
                            context.dmd_file_path=(String) context.getProperty("dmd_file_path");
                        context.setContextType("dmd_db_stg_additionalparams", "id_String");
                            context.dmd_db_stg_additionalparams=(String) context.getProperty("dmd_db_stg_additionalparams");
                        context.setContextType("dmd_db_stg_port", "id_Integer");
                            try{
                                context.dmd_db_stg_port=routines.system.ParserUtils.parseTo_Integer (context.getProperty("dmd_db_stg_port"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "dmd_db_stg_port", e.getMessage()));
                                context.dmd_db_stg_port=null;
                            }
                        context.setContextType("dmd_db_stg_name", "id_String");
                            context.dmd_db_stg_name=(String) context.getProperty("dmd_db_stg_name");
                        context.setContextType("dmd_db_stg_schema", "id_String");
                            context.dmd_db_stg_schema=(String) context.getProperty("dmd_db_stg_schema");
                        context.setContextType("dmd_db_stg_user", "id_String");
                            context.dmd_db_stg_user=(String) context.getProperty("dmd_db_stg_user");
                        context.setContextType("dmd_db_stg_password", "id_Password");
                            String pwd_dmd_db_stg_password_value = context.getProperty("dmd_db_stg_password");
                            context.dmd_db_stg_password = null;
                            if(pwd_dmd_db_stg_password_value!=null) {
                                if(context_param.containsKey("dmd_db_stg_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.dmd_db_stg_password = pwd_dmd_db_stg_password_value;
                                } else if (!pwd_dmd_db_stg_password_value.isEmpty()) {
                                    try {
                                        context.dmd_db_stg_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_dmd_db_stg_password_value);
                                        context.put("dmd_db_stg_password",context.dmd_db_stg_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("dmd_db_stg_host", "id_String");
                            context.dmd_db_stg_host=(String) context.getProperty("dmd_db_stg_host");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("dmd_db_additionalparams")) {
                context.dmd_db_additionalparams = (String) parentContextMap.get("dmd_db_additionalparams");
            }if (parentContextMap.containsKey("dmd_db_host")) {
                context.dmd_db_host = (String) parentContextMap.get("dmd_db_host");
            }if (parentContextMap.containsKey("dmd_db_name")) {
                context.dmd_db_name = (String) parentContextMap.get("dmd_db_name");
            }if (parentContextMap.containsKey("dmd_db_password")) {
                context.dmd_db_password = (java.lang.String) parentContextMap.get("dmd_db_password");
            }if (parentContextMap.containsKey("dmd_db_port")) {
                context.dmd_db_port = (Integer) parentContextMap.get("dmd_db_port");
            }if (parentContextMap.containsKey("dmd_db_psql_path")) {
                context.dmd_db_psql_path = (String) parentContextMap.get("dmd_db_psql_path");
            }if (parentContextMap.containsKey("dmd_db_pwd_string")) {
                context.dmd_db_pwd_string = (String) parentContextMap.get("dmd_db_pwd_string");
            }if (parentContextMap.containsKey("dmd_db_schema")) {
                context.dmd_db_schema = (String) parentContextMap.get("dmd_db_schema");
            }if (parentContextMap.containsKey("dmd_db_script_path")) {
                context.dmd_db_script_path = (String) parentContextMap.get("dmd_db_script_path");
            }if (parentContextMap.containsKey("dmd_db_user")) {
                context.dmd_db_user = (String) parentContextMap.get("dmd_db_user");
            }if (parentContextMap.containsKey("dmd_file_path")) {
                context.dmd_file_path = (String) parentContextMap.get("dmd_file_path");
            }if (parentContextMap.containsKey("dmd_db_stg_additionalparams")) {
                context.dmd_db_stg_additionalparams = (String) parentContextMap.get("dmd_db_stg_additionalparams");
            }if (parentContextMap.containsKey("dmd_db_stg_port")) {
                context.dmd_db_stg_port = (Integer) parentContextMap.get("dmd_db_stg_port");
            }if (parentContextMap.containsKey("dmd_db_stg_name")) {
                context.dmd_db_stg_name = (String) parentContextMap.get("dmd_db_stg_name");
            }if (parentContextMap.containsKey("dmd_db_stg_schema")) {
                context.dmd_db_stg_schema = (String) parentContextMap.get("dmd_db_stg_schema");
            }if (parentContextMap.containsKey("dmd_db_stg_user")) {
                context.dmd_db_stg_user = (String) parentContextMap.get("dmd_db_stg_user");
            }if (parentContextMap.containsKey("dmd_db_stg_password")) {
                context.dmd_db_stg_password = (java.lang.String) parentContextMap.get("dmd_db_stg_password");
            }if (parentContextMap.containsKey("dmd_db_stg_host")) {
                context.dmd_db_stg_host = (String) parentContextMap.get("dmd_db_stg_host");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("dmd_db_password");
			parametersToEncrypt.add("dmd_db_stg_password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        talendStats_STATS.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob



        try {
            talendStats_STATSProcess(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileList_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileList_1) {
globalMap.put("tFileList_1_SUBPROCESS_STATE", -1);

e_tFileList_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dmd_seed_data_xml_1");
        }
        talendStats_STATS.addMessage(status==""?"end":status, (end-startTime));
        try {
            talendStats_STATSProcess(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1403143 characters generated by Talend Open Studio for Data Integration 
 *     on the 12 January, 2021 10:44:58 PM IST
 ************************************************************************************************/