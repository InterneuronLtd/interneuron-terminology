// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.snomed_import_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: snomed_import Purpose: snomed_import<br>
 * Description: snomed_import <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class snomed_import implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(snomed_clinical_ext_file_path != null){
				
					this.setProperty("snomed_clinical_ext_file_path", snomed_clinical_ext_file_path.toString());
				
			}
			
			if(snomed_db_additionalparams != null){
				
					this.setProperty("snomed_db_additionalparams", snomed_db_additionalparams.toString());
				
			}
			
			if(snomed_db_host != null){
				
					this.setProperty("snomed_db_host", snomed_db_host.toString());
				
			}
			
			if(snomed_db_name != null){
				
					this.setProperty("snomed_db_name", snomed_db_name.toString());
				
			}
			
			if(snomed_db_password != null){
				
					this.setProperty("snomed_db_password", snomed_db_password.toString());
				
			}
			
			if(snomed_db_port != null){
				
					this.setProperty("snomed_db_port", snomed_db_port.toString());
				
			}
			
			if(snomed_db_psql_path != null){
				
					this.setProperty("snomed_db_psql_path", snomed_db_psql_path.toString());
				
			}
			
			if(snomed_db_pwd_string != null){
				
					this.setProperty("snomed_db_pwd_string", snomed_db_pwd_string.toString());
				
			}
			
			if(snomed_db_schema != null){
				
					this.setProperty("snomed_db_schema", snomed_db_schema.toString());
				
			}
			
			if(snomed_db_script_path != null){
				
					this.setProperty("snomed_db_script_path", snomed_db_script_path.toString());
				
			}
			
			if(snomed_db_user != null){
				
					this.setProperty("snomed_db_user", snomed_db_user.toString());
				
			}
			
			if(snomed_drug_ext_file_path != null){
				
					this.setProperty("snomed_drug_ext_file_path", snomed_drug_ext_file_path.toString());
				
			}
			
			if(snomed_int_file_path != null){
				
					this.setProperty("snomed_int_file_path", snomed_int_file_path.toString());
				
			}
			
			if(snomed_int_release != null){
				
					this.setProperty("snomed_int_release", snomed_int_release.toString());
				
			}
			
			if(snomed_uk_file_path != null){
				
					this.setProperty("snomed_uk_file_path", snomed_uk_file_path.toString());
				
			}
			
			if(snomed_uk_release != null){
				
					this.setProperty("snomed_uk_release", snomed_uk_release.toString());
				
			}
			
		}

public String snomed_clinical_ext_file_path;
public String getSnomed_clinical_ext_file_path(){
	return this.snomed_clinical_ext_file_path;
}
public String snomed_db_additionalparams;
public String getSnomed_db_additionalparams(){
	return this.snomed_db_additionalparams;
}
public String snomed_db_host;
public String getSnomed_db_host(){
	return this.snomed_db_host;
}
public String snomed_db_name;
public String getSnomed_db_name(){
	return this.snomed_db_name;
}
public java.lang.String snomed_db_password;
public java.lang.String getSnomed_db_password(){
	return this.snomed_db_password;
}
public Integer snomed_db_port;
public Integer getSnomed_db_port(){
	return this.snomed_db_port;
}
public String snomed_db_psql_path;
public String getSnomed_db_psql_path(){
	return this.snomed_db_psql_path;
}
public String snomed_db_pwd_string;
public String getSnomed_db_pwd_string(){
	return this.snomed_db_pwd_string;
}
public String snomed_db_schema;
public String getSnomed_db_schema(){
	return this.snomed_db_schema;
}
public String snomed_db_script_path;
public String getSnomed_db_script_path(){
	return this.snomed_db_script_path;
}
public String snomed_db_user;
public String getSnomed_db_user(){
	return this.snomed_db_user;
}
public String snomed_drug_ext_file_path;
public String getSnomed_drug_ext_file_path(){
	return this.snomed_drug_ext_file_path;
}
public String snomed_int_file_path;
public String getSnomed_int_file_path(){
	return this.snomed_int_file_path;
}
public String snomed_int_release;
public String getSnomed_int_release(){
	return this.snomed_int_release;
}
public String snomed_uk_file_path;
public String getSnomed_uk_file_path(){
	return this.snomed_uk_file_path;
}
public String snomed_uk_release;
public String getSnomed_uk_release(){
	return this.snomed_uk_release;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "snomed_import";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				snomed_import.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(snomed_import.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String refsetid;

				public String getRefsetid () {
					return this.refsetid;
				}
				
			    public String referencedcomponentid;

				public String getReferencedcomponentid () {
					return this.referencedcomponentid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
						result = prime * result + ((this.effectivetime == null) ? 0 : this.effectivetime.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					
						if (this.effectivetime == null) {
							if (other.effectivetime != null)
								return false;
						
						} else if (!this.effectivetime.equals(other.effectivetime))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.id = this.id;
	            other.effectivetime = this.effectivetime;
	            other.active = this.active;
	            other.moduleid = this.moduleid;
	            other.refsetid = this.refsetid;
	            other.referencedcomponentid = this.referencedcomponentid;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.id = this.id;
	            	other.effectivetime = this.effectivetime;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.refsetid = readString(dis);
					
					this.referencedcomponentid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.refsetid,dos);
					
					// String
				
						writeString(this.referencedcomponentid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",refsetid="+refsetid);
		sb.append(",referencedcomponentid="+referencedcomponentid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.effectivetime, other.effectivetime);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class smile_ref_rowStruct implements routines.system.IPersistableRow<smile_ref_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String refsetid;

				public String getRefsetid () {
					return this.refsetid;
				}
				
			    public String referencedcomponentid;

				public String getReferencedcomponentid () {
					return this.referencedcomponentid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
						result = prime * result + ((this.effectivetime == null) ? 0 : this.effectivetime.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final smile_ref_rowStruct other = (smile_ref_rowStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					
						if (this.effectivetime == null) {
							if (other.effectivetime != null)
								return false;
						
						} else if (!this.effectivetime.equals(other.effectivetime))
						
							return false;
					

		return true;
    }

	public void copyDataTo(smile_ref_rowStruct other) {

		other.id = this.id;
	            other.effectivetime = this.effectivetime;
	            other.active = this.active;
	            other.moduleid = this.moduleid;
	            other.refsetid = this.refsetid;
	            other.referencedcomponentid = this.referencedcomponentid;
	            
	}

	public void copyKeysDataTo(smile_ref_rowStruct other) {

		other.id = this.id;
	            	other.effectivetime = this.effectivetime;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.refsetid = readString(dis);
					
					this.referencedcomponentid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.refsetid,dos);
					
					// String
				
						writeString(this.referencedcomponentid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",refsetid="+refsetid);
		sb.append(",referencedcomponentid="+referencedcomponentid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(smile_ref_rowStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.effectivetime, other.effectivetime);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String refsetid;

				public String getRefsetid () {
					return this.refsetid;
				}
				
			    public String referencedcomponentid;

				public String getReferencedcomponentid () {
					return this.referencedcomponentid;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.refsetid = readString(dis);
					
					this.referencedcomponentid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.refsetid,dos);
					
					// String
				
						writeString(this.referencedcomponentid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",refsetid="+refsetid);
		sb.append(",referencedcomponentid="+referencedcomponentid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class clinical_extn_rowStruct implements routines.system.IPersistableRow<clinical_extn_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String refsetid;

				public String getRefsetid () {
					return this.refsetid;
				}
				
			    public String referencedcomponentid;

				public String getReferencedcomponentid () {
					return this.referencedcomponentid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
						result = prime * result + ((this.effectivetime == null) ? 0 : this.effectivetime.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final clinical_extn_rowStruct other = (clinical_extn_rowStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					
						if (this.effectivetime == null) {
							if (other.effectivetime != null)
								return false;
						
						} else if (!this.effectivetime.equals(other.effectivetime))
						
							return false;
					

		return true;
    }

	public void copyDataTo(clinical_extn_rowStruct other) {

		other.id = this.id;
	            other.effectivetime = this.effectivetime;
	            other.active = this.active;
	            other.moduleid = this.moduleid;
	            other.refsetid = this.refsetid;
	            other.referencedcomponentid = this.referencedcomponentid;
	            
	}

	public void copyKeysDataTo(clinical_extn_rowStruct other) {

		other.id = this.id;
	            	other.effectivetime = this.effectivetime;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.refsetid = readString(dis);
					
					this.referencedcomponentid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.refsetid,dos);
					
					// String
				
						writeString(this.referencedcomponentid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",refsetid="+refsetid);
		sb.append(",referencedcomponentid="+referencedcomponentid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(clinical_extn_rowStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.effectivetime, other.effectivetime);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class uk_drug_extn_rowStruct implements routines.system.IPersistableRow<uk_drug_extn_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String refsetid;

				public String getRefsetid () {
					return this.refsetid;
				}
				
			    public String referencedcomponentid;

				public String getReferencedcomponentid () {
					return this.referencedcomponentid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
						result = prime * result + ((this.effectivetime == null) ? 0 : this.effectivetime.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final uk_drug_extn_rowStruct other = (uk_drug_extn_rowStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					
						if (this.effectivetime == null) {
							if (other.effectivetime != null)
								return false;
						
						} else if (!this.effectivetime.equals(other.effectivetime))
						
							return false;
					

		return true;
    }

	public void copyDataTo(uk_drug_extn_rowStruct other) {

		other.id = this.id;
	            other.effectivetime = this.effectivetime;
	            other.active = this.active;
	            other.moduleid = this.moduleid;
	            other.refsetid = this.refsetid;
	            other.referencedcomponentid = this.referencedcomponentid;
	            
	}

	public void copyKeysDataTo(uk_drug_extn_rowStruct other) {

		other.id = this.id;
	            	other.effectivetime = this.effectivetime;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.refsetid = readString(dis);
					
					this.referencedcomponentid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.refsetid,dos);
					
					// String
				
						writeString(this.referencedcomponentid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",refsetid="+refsetid);
		sb.append(",referencedcomponentid="+referencedcomponentid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(uk_drug_extn_rowStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.effectivetime, other.effectivetime);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		clinical_extn_rowStruct clinical_extn_row = new clinical_extn_rowStruct();

		uk_drug_extn_rowStruct uk_drug_extn_row = new uk_drug_extn_rowStruct();

			row2Struct row2 = new row2Struct();
smile_ref_rowStruct smile_ref_row = new smile_ref_rowStruct();
row4Struct row4 = new row4Struct();






	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"smile_ref_row");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.snomed_db_schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("snomedct_simplerefset_f");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("snomedct_simplerefset_f");
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name + "?" + context.snomed_db_additionalparams;
    dbUser_tDBOutput_1 = context.snomed_db_user;

	final String decryptedPassword_tDBOutput_1 = context.snomed_db_password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"id\",\"effectivetime\",\"active\",\"moduleid\",\"refsetid\",\"referencedcomponentid\") VALUES (?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
smile_ref_rowStruct smile_ref_row_tmp = new smile_ref_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"uk_drug_extn_row","clinical_extn_row");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = context.snomed_clinical_ext_file_path;
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("der2_Refset_SimpleFull_INT_*.txt"); 
    maskList_tFileList_1.add("der2_Refset_SimpleFull_GB1000000_*.txt");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = false;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
    
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("clinical_extn_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("smile_ref_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputDelimited_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = (String)globalMap.get("tFileList_1_CURRENT_FILEPATH");
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"), "US-ASCII","\t","\n",false,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						clinical_extn_row = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									clinical_extn_row = new clinical_extn_rowStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							clinical_extn_row.id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							clinical_extn_row.effectivetime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							clinical_extn_row.active = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							clinical_extn_row.moduleid = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							clinical_extn_row.refsetid = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							clinical_extn_row.referencedcomponentid = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "clinical_extn_row"
if(clinical_extn_row != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"clinical_extn_row");
						}
						
//////////
 

// for output
			row2 = new row2Struct();
								
			row2.id = clinical_extn_row.id;								
			row2.effectivetime = clinical_extn_row.effectivetime;								
			row2.active = clinical_extn_row.active;								
			row2.moduleid = clinical_extn_row.moduleid;								
			row2.refsetid = clinical_extn_row.refsetid;								
			row2.referencedcomponentid = clinical_extn_row.referencedcomponentid;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

smile_ref_row = null;


// # Output table : 'smile_ref_row'
smile_ref_row_tmp.id = row2.id;
smile_ref_row_tmp.effectivetime = row2.effectivetime;
smile_ref_row_tmp.active = row2.active;
smile_ref_row_tmp.moduleid = row2.moduleid;
smile_ref_row_tmp.refsetid = row2.refsetid;
smile_ref_row_tmp.referencedcomponentid = row2.referencedcomponentid;
smile_ref_row = smile_ref_row_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "smile_ref_row"
if(smile_ref_row != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"smile_ref_row");
					}
					



            row4 = null;
        whetherReject_tDBOutput_1 = false;
                    if(smile_ref_row.id == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, smile_ref_row.id);
}

                    if(smile_ref_row.effectivetime == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, smile_ref_row.effectivetime);
}

                    if(smile_ref_row.active == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, smile_ref_row.active);
}

                    if(smile_ref_row.moduleid == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, smile_ref_row.moduleid);
}

                    if(smile_ref_row.refsetid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, smile_ref_row.refsetid);
}

                    if(smile_ref_row.referencedcomponentid == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, smile_ref_row.referencedcomponentid);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
            if(!whetherReject_tDBOutput_1) {
                            row4 = new row4Struct();
                                row4.id = smile_ref_row.id;
                                row4.effectivetime = smile_ref_row.effectivetime;
                                row4.active = smile_ref_row.active;
                                row4.moduleid = smile_ref_row.moduleid;
                                row4.refsetid = smile_ref_row.refsetid;
                                row4.referencedcomponentid = smile_ref_row.referencedcomponentid;
            }
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row4.id != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row4.effectivetime != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.effectivetime)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row4.active != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.active)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row4.moduleid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.moduleid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row4.refsetid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.refsetid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row4.referencedcomponentid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.referencedcomponentid)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "smile_ref_row"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "clinical_extn_row"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputDelimited_1);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

    if (NB_FILEtFileList_1 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_1);
  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
	
	/**
	 * [tFileList_2 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_2", false);
		start_Hash.put("tFileList_2", System.currentTimeMillis());
		
	
	currentComponent="tFileList_2";

	
		int tos_count_tFileList_2 = 0;
		
	
 
     
    
  String directory_tFileList_2 = context.snomed_drug_ext_file_path;
  final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_2.add("der2_Refset_SimpleFull_GB1000001_*.txt");  
  for (final String filemask_tFileList_2 : maskList_tFileList_2) {
	String filemask_compile_tFileList_2 = filemask_tFileList_2;
	
		filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_2.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern.compile(filemask_compile_tFileList_2, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_2.add(fileNamePattern_tFileList_2);
  }
  int NB_FILEtFileList_2 = 0;

  final boolean case_sensitive_tFileList_2 = false;
    final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
	java.io.File file_tFileList_2 = new java.io.File(directory_tFileList_2);
    
		file_tFileList_2.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_2 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
          	if (fileNamePattern_tFileList_2.matcher(fileName_tFileList_2).matches()){
					if(!filePath_tFileList_2.contains(file.getAbsolutePath())) {
			          list_tFileList_2.add(file);
			          filePath_tFileList_2.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_2);
    
    for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2.size(); i_tFileList_2++){
      java.io.File files_tFileList_2 = list_tFileList_2.get(i_tFileList_2);
      String fileName_tFileList_2 = files_tFileList_2.getName();
      
      String currentFileName_tFileList_2 = files_tFileList_2.getName(); 
      String currentFilePath_tFileList_2 = files_tFileList_2.getAbsolutePath();
      String currentFileDirectory_tFileList_2 = files_tFileList_2.getParent();
      String currentFileExtension_tFileList_2 = null;
      
      if (files_tFileList_2.getName().contains(".") && files_tFileList_2.isFile()){
        currentFileExtension_tFileList_2 = files_tFileList_2.getName().substring(files_tFileList_2.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_2 = "";
      }
      
      NB_FILEtFileList_2 ++;
      globalMap.put("tFileList_2_CURRENT_FILE", currentFileName_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEPATH", currentFilePath_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_2);
      globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
      
 



/**
 * [tFileList_2 begin ] stop
 */
	
	/**
	 * [tFileList_2 main ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 


	tos_count_tFileList_2++;

/**
 * [tFileList_2 main ] stop
 */
	
	/**
	 * [tFileList_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("uk_drug_extn_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("smile_ref_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileInputDelimited_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = (String)globalMap.get("tFileList_2_CURRENT_FILEPATH");
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited((String)globalMap.get("tFileList_2_CURRENT_FILEPATH"), "US-ASCII","\t","\n",false,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						uk_drug_extn_row = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									uk_drug_extn_row = new uk_drug_extn_rowStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							uk_drug_extn_row.id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							uk_drug_extn_row.effectivetime = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							uk_drug_extn_row.active = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							uk_drug_extn_row.moduleid = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
							uk_drug_extn_row.refsetid = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
							uk_drug_extn_row.referencedcomponentid = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "uk_drug_extn_row"
if(uk_drug_extn_row != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"uk_drug_extn_row");
						}
						
//////////
 

// for output
			row2 = new row2Struct();
								
			row2.id = uk_drug_extn_row.id;								
			row2.effectivetime = uk_drug_extn_row.effectivetime;								
			row2.active = uk_drug_extn_row.active;								
			row2.moduleid = uk_drug_extn_row.moduleid;								
			row2.refsetid = uk_drug_extn_row.refsetid;								
			row2.referencedcomponentid = uk_drug_extn_row.referencedcomponentid;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

smile_ref_row = null;


// # Output table : 'smile_ref_row'
smile_ref_row_tmp.id = row2.id;
smile_ref_row_tmp.effectivetime = row2.effectivetime;
smile_ref_row_tmp.active = row2.active;
smile_ref_row_tmp.moduleid = row2.moduleid;
smile_ref_row_tmp.refsetid = row2.refsetid;
smile_ref_row_tmp.referencedcomponentid = row2.referencedcomponentid;
smile_ref_row = smile_ref_row_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "smile_ref_row"
if(smile_ref_row != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"smile_ref_row");
					}
					



            row4 = null;
        whetherReject_tDBOutput_1 = false;
                    if(smile_ref_row.id == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, smile_ref_row.id);
}

                    if(smile_ref_row.effectivetime == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, smile_ref_row.effectivetime);
}

                    if(smile_ref_row.active == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, smile_ref_row.active);
}

                    if(smile_ref_row.moduleid == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, smile_ref_row.moduleid);
}

                    if(smile_ref_row.refsetid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, smile_ref_row.refsetid);
}

                    if(smile_ref_row.referencedcomponentid == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, smile_ref_row.referencedcomponentid);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
            if(!whetherReject_tDBOutput_1) {
                            row4 = new row4Struct();
                                row4.id = smile_ref_row.id;
                                row4.effectivetime = smile_ref_row.effectivetime;
                                row4.active = smile_ref_row.active;
                                row4.moduleid = smile_ref_row.moduleid;
                                row4.refsetid = smile_ref_row.refsetid;
                                row4.referencedcomponentid = smile_ref_row.referencedcomponentid;
            }
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row4.id != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row4.effectivetime != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.effectivetime)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row4.active != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.active)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row4.moduleid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.moduleid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row4.refsetid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.refsetid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row4.referencedcomponentid != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row4.referencedcomponentid)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "smile_ref_row"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "uk_drug_extn_row"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)((String)globalMap.get("tFileList_2_CURRENT_FILEPATH")) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileInputDelimited_2);
						}				
					




	
	/**
	 * [tFileList_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_end ] stop
 */
	
	/**
	 * [tFileList_2 end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

  
    }
  globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
  

    if (NB_FILEtFileList_2 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_2);
  
 

 

ok_Hash.put("tFileList_2", true);
end_Hash.put("tFileList_2", System.currentTimeMillis());




/**
 * [tFileList_2 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"uk_drug_extn_row","clinical_extn_row");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"smile_ref_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */



	
	/**
	 * [tFileList_2 finally ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */



	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String definitionstatusid;

				public String getDefinitionstatusid () {
					return this.definitionstatusid;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.definitionstatusid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.definitionstatusid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",definitionstatusid="+definitionstatusid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class conc_rowStruct implements routines.system.IPersistableRow<conc_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String definitionstatusid;

				public String getDefinitionstatusid () {
					return this.definitionstatusid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
						result = prime * result + ((this.effectivetime == null) ? 0 : this.effectivetime.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final conc_rowStruct other = (conc_rowStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					
						if (this.effectivetime == null) {
							if (other.effectivetime != null)
								return false;
						
						} else if (!this.effectivetime.equals(other.effectivetime))
						
							return false;
					

		return true;
    }

	public void copyDataTo(conc_rowStruct other) {

		other.id = this.id;
	            other.effectivetime = this.effectivetime;
	            other.active = this.active;
	            other.moduleid = this.moduleid;
	            other.definitionstatusid = this.definitionstatusid;
	            
	}

	public void copyKeysDataTo(conc_rowStruct other) {

		other.id = this.id;
	            	other.effectivetime = this.effectivetime;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.definitionstatusid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.definitionstatusid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",definitionstatusid="+definitionstatusid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(conc_rowStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.effectivetime, other.effectivetime);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectiveTime;

				public String getEffectiveTime () {
					return this.effectiveTime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleId;

				public String getModuleId () {
					return this.moduleId;
				}
				
			    public String definitionStatusId;

				public String getDefinitionStatusId () {
					return this.definitionStatusId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectiveTime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleId = readString(dis);
					
					this.definitionStatusId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectiveTime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleId,dos);
					
					// String
				
						writeString(this.definitionStatusId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectiveTime="+effectiveTime);
		sb.append(",active="+active);
		sb.append(",moduleId="+moduleId);
		sb.append(",definitionStatusId="+definitionStatusId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectiveTime;

				public String getEffectiveTime () {
					return this.effectiveTime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleId;

				public String getModuleId () {
					return this.moduleId;
				}
				
			    public String definitionStatusId;

				public String getDefinitionStatusId () {
					return this.definitionStatusId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectiveTime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleId = readString(dis);
					
					this.definitionStatusId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectiveTime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleId,dos);
					
					// String
				
						writeString(this.definitionStatusId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectiveTime="+effectiveTime);
		sb.append(",active="+active);
		sb.append(",moduleId="+moduleId);
		sb.append(",definitionStatusId="+definitionStatusId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectiveTime;

				public String getEffectiveTime () {
					return this.effectiveTime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleId;

				public String getModuleId () {
					return this.moduleId;
				}
				
			    public String definitionStatusId;

				public String getDefinitionStatusId () {
					return this.definitionStatusId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectiveTime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleId = readString(dis);
					
					this.definitionStatusId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectiveTime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleId,dos);
					
					// String
				
						writeString(this.definitionStatusId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectiveTime="+effectiveTime);
		sb.append(",active="+active);
		sb.append(",moduleId="+moduleId);
		sb.append(",definitionStatusId="+definitionStatusId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();

		row3Struct row3 = new row3Struct();

			row5Struct row5 = new row5Struct();
conc_rowStruct conc_row = new conc_rowStruct();
row6Struct row6 = new row6Struct();






	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"conc_row");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.snomed_db_schema;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("snomedct_concept_f");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("snomedct_concept_f");
}

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name + "?" + context.snomed_db_additionalparams;
    dbUser_tDBOutput_2 = context.snomed_db_user;

	final String decryptedPassword_tDBOutput_2 = context.snomed_db_password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"id\",\"effectivetime\",\"active\",\"moduleid\",\"definitionstatusid\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
conc_rowStruct conc_row_tmp = new conc_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tUnite_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_2", false);
		start_Hash.put("tUnite_2", System.currentTimeMillis());
		
	
	currentComponent="tUnite_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3","row1");
					}
				
		int tos_count_tUnite_2 = 0;
		

int nb_line_tUnite_2 = 0;

 



/**
 * [tUnite_2 begin ] stop
 */
	
	/**
	 * [tFileList_3 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_5 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_3", false);
		start_Hash.put("tFileList_3", System.currentTimeMillis());
		
	
	currentComponent="tFileList_3";

	
		int tos_count_tFileList_3 = 0;
		
	
 
     
    
  String directory_tFileList_3 = context.snomed_clinical_ext_file_path;
  final java.util.List<String> maskList_tFileList_3 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_3 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_3.add("sct2_Concept_Full_INT_*.txt"); 
    maskList_tFileList_3.add("sct2_Concept_Full_GB1000000_*.txt");  
  for (final String filemask_tFileList_3 : maskList_tFileList_3) {
	String filemask_compile_tFileList_3 = filemask_tFileList_3;
	
		filemask_compile_tFileList_3 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_3.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_3 = java.util.regex.Pattern.compile(filemask_compile_tFileList_3, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_3.add(fileNamePattern_tFileList_3);
  }
  int NB_FILEtFileList_3 = 0;

  final boolean case_sensitive_tFileList_3 = false;
    final java.util.List<java.io.File> list_tFileList_3 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_3 = new java.util.HashSet<String>();
	java.io.File file_tFileList_3 = new java.io.File(directory_tFileList_3);
    
		file_tFileList_3.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_3 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_3 : patternList_tFileList_3) {
          	if (fileNamePattern_tFileList_3.matcher(fileName_tFileList_3).matches()){
					if(!filePath_tFileList_3.contains(file.getAbsolutePath())) {
			          list_tFileList_3.add(file);
			          filePath_tFileList_3.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_3);
    
    for (int i_tFileList_3 = 0; i_tFileList_3 < list_tFileList_3.size(); i_tFileList_3++){
      java.io.File files_tFileList_3 = list_tFileList_3.get(i_tFileList_3);
      String fileName_tFileList_3 = files_tFileList_3.getName();
      
      String currentFileName_tFileList_3 = files_tFileList_3.getName(); 
      String currentFilePath_tFileList_3 = files_tFileList_3.getAbsolutePath();
      String currentFileDirectory_tFileList_3 = files_tFileList_3.getParent();
      String currentFileExtension_tFileList_3 = null;
      
      if (files_tFileList_3.getName().contains(".") && files_tFileList_3.isFile()){
        currentFileExtension_tFileList_3 = files_tFileList_3.getName().substring(files_tFileList_3.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_3 = "";
      }
      
      NB_FILEtFileList_3 ++;
      globalMap.put("tFileList_3_CURRENT_FILE", currentFileName_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEPATH", currentFilePath_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_3);
      globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
      
 



/**
 * [tFileList_3 begin ] stop
 */
	
	/**
	 * [tFileList_3 main ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 


	tos_count_tFileList_3++;

/**
 * [tFileList_3 main ] stop
 */
	
	/**
	 * [tFileList_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_5++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("conc_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tFileInputDelimited_5);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileInputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_5", false);
		start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_5";

	
		int tos_count_tFileInputDelimited_5 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try{
					
						Object filename_tFileInputDelimited_5 = (String)globalMap.get("tFileList_3_CURRENT_FILEPATH");
						if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
			if(footer_value_tFileInputDelimited_5 >0 || random_value_tFileInputDelimited_5 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited((String)globalMap.get("tFileList_3_CURRENT_FILEPATH"), "US-ASCII","\t","\n",true,1,0,
									limit_tFileInputDelimited_5
								,-1, false);
						} catch(java.lang.Exception e) {
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_5!=null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_5 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_5 = 0;
				
					columnIndexWithD_tFileInputDelimited_5 = 0;
					
							row1.id = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 1;
					
							row1.effectiveTime = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 2;
					
							row1.active = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 3;
					
							row1.moduleId = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 4;
					
							row1.definitionStatusId = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
				
										
										if(rowstate_tFileInputDelimited_5.getException()!=null) {
											throw rowstate_tFileInputDelimited_5.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_5 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_5 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 


	tos_count_tFileInputDelimited_5++;

/**
 * [tFileInputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row1");
						}
						
//////////
 

// for output
			row5 = new row5Struct();
								
			row5.id = row1.id;								
			row5.effectiveTime = row1.effectiveTime;								
			row5.active = row1.active;								
			row5.moduleId = row1.moduleId;								
			row5.definitionStatusId = row1.definitionStatusId;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

conc_row = null;


// # Output table : 'conc_row'
conc_row_tmp.id = row5.id;
conc_row_tmp.effectivetime = row5.effectiveTime;
conc_row_tmp.active = row5.active;
conc_row_tmp.moduleid = row5.moduleId;
conc_row_tmp.definitionstatusid = row5.definitionStatusId;
conc_row = conc_row_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "conc_row"
if(conc_row != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"conc_row");
					}
					



            row6 = null;
        whetherReject_tDBOutput_2 = false;
                    if(conc_row.id == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, conc_row.id);
}

                    if(conc_row.effectivetime == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, conc_row.effectivetime);
}

                    if(conc_row.active == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, conc_row.active);
}

                    if(conc_row.moduleid == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, conc_row.moduleid);
}

                    if(conc_row.definitionstatusid == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, conc_row.definitionstatusid);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
            if(!whetherReject_tDBOutput_2) {
                            row6 = new row6Struct();
                                row6.id = conc_row.id;
                                row6.effectivetime = conc_row.effectivetime;
                                row6.active = conc_row.active;
                                row6.moduleid = conc_row.moduleid;
                                row6.definitionstatusid = conc_row.definitionstatusid;
            }
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
			    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row6.id != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.effectivetime != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.effectivetime)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.active != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.active)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.moduleid != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.moduleid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.definitionstatusid != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.definitionstatusid)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "conc_row"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	



            }
            }finally{
                if(!((Object)((String)globalMap.get("tFileList_3_CURRENT_FILEPATH")) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_5!=null){
                		fid_tFileInputDelimited_5.close();
                	}
                }
                if(fid_tFileInputDelimited_5!=null){
                	globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_5", true);
end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());




/**
 * [tFileInputDelimited_5 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tFileInputDelimited_5);
						}				
					




	
	/**
	 * [tFileList_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 process_data_end ] stop
 */
	
	/**
	 * [tFileList_3 end ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

  
    }
  globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
  

    if (NB_FILEtFileList_3 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_3);
  
 

 

ok_Hash.put("tFileList_3", true);
end_Hash.put("tFileList_3", System.currentTimeMillis());




/**
 * [tFileList_3 end ] stop
 */
	
	/**
	 * [tFileList_4 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_4", false);
		start_Hash.put("tFileList_4", System.currentTimeMillis());
		
	
	currentComponent="tFileList_4";

	
		int tos_count_tFileList_4 = 0;
		
	
 
     
    
  String directory_tFileList_4 = context.snomed_drug_ext_file_path;
  final java.util.List<String> maskList_tFileList_4 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_4 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_4.add("sct2_Concept_Full_GB1000001_*.txt");  
  for (final String filemask_tFileList_4 : maskList_tFileList_4) {
	String filemask_compile_tFileList_4 = filemask_tFileList_4;
	
		filemask_compile_tFileList_4 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_4.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_4 = java.util.regex.Pattern.compile(filemask_compile_tFileList_4, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_4.add(fileNamePattern_tFileList_4);
  }
  int NB_FILEtFileList_4 = 0;

  final boolean case_sensitive_tFileList_4 = false;
    final java.util.List<java.io.File> list_tFileList_4 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_4 = new java.util.HashSet<String>();
	java.io.File file_tFileList_4 = new java.io.File(directory_tFileList_4);
    
		file_tFileList_4.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_4 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_4 : patternList_tFileList_4) {
          	if (fileNamePattern_tFileList_4.matcher(fileName_tFileList_4).matches()){
					if(!filePath_tFileList_4.contains(file.getAbsolutePath())) {
			          list_tFileList_4.add(file);
			          filePath_tFileList_4.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_4);
    
    for (int i_tFileList_4 = 0; i_tFileList_4 < list_tFileList_4.size(); i_tFileList_4++){
      java.io.File files_tFileList_4 = list_tFileList_4.get(i_tFileList_4);
      String fileName_tFileList_4 = files_tFileList_4.getName();
      
      String currentFileName_tFileList_4 = files_tFileList_4.getName(); 
      String currentFilePath_tFileList_4 = files_tFileList_4.getAbsolutePath();
      String currentFileDirectory_tFileList_4 = files_tFileList_4.getParent();
      String currentFileExtension_tFileList_4 = null;
      
      if (files_tFileList_4.getName().contains(".") && files_tFileList_4.isFile()){
        currentFileExtension_tFileList_4 = files_tFileList_4.getName().substring(files_tFileList_4.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_4 = "";
      }
      
      NB_FILEtFileList_4 ++;
      globalMap.put("tFileList_4_CURRENT_FILE", currentFileName_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEPATH", currentFilePath_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_4);
      globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);
      
 



/**
 * [tFileList_4 begin ] stop
 */
	
	/**
	 * [tFileList_4 main ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 


	tos_count_tFileList_4++;

/**
 * [tFileList_4 main ] stop
 */
	
	/**
	 * [tFileList_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_3++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("conc_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row3", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate4", 1, "exec" + NB_ITERATE_tFileInputDelimited_3);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = (String)globalMap.get("tFileList_4_CURRENT_FILEPATH");
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited((String)globalMap.get("tFileList_4_CURRENT_FILEPATH"), "US-ASCII","\t","\n",true,1,0,
									limit_tFileInputDelimited_3
								,-1, false);
						} catch(java.lang.Exception e) {
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						row3 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									row3 = new row3Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
							row3.id = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
							row3.effectiveTime = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
							row3.active = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
							row3.moduleId = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 4;
					
							row3.definitionStatusId = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row3");
						}
						
//////////
 

// for output
			row5 = new row5Struct();
								
			row5.id = row3.id;								
			row5.effectiveTime = row3.effectiveTime;								
			row5.active = row3.active;								
			row5.moduleId = row3.moduleId;								
			row5.definitionStatusId = row3.definitionStatusId;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

conc_row = null;


// # Output table : 'conc_row'
conc_row_tmp.id = row5.id;
conc_row_tmp.effectivetime = row5.effectiveTime;
conc_row_tmp.active = row5.active;
conc_row_tmp.moduleid = row5.moduleId;
conc_row_tmp.definitionstatusid = row5.definitionStatusId;
conc_row = conc_row_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "conc_row"
if(conc_row != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"conc_row");
					}
					



            row6 = null;
        whetherReject_tDBOutput_2 = false;
                    if(conc_row.id == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, conc_row.id);
}

                    if(conc_row.effectivetime == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, conc_row.effectivetime);
}

                    if(conc_row.active == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, conc_row.active);
}

                    if(conc_row.moduleid == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, conc_row.moduleid);
}

                    if(conc_row.definitionstatusid == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, conc_row.definitionstatusid);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
            if(!whetherReject_tDBOutput_2) {
                            row6 = new row6Struct();
                                row6.id = conc_row.id;
                                row6.effectivetime = conc_row.effectivetime;
                                row6.active = conc_row.active;
                                row6.moduleid = conc_row.moduleid;
                                row6.definitionstatusid = conc_row.definitionstatusid;
            }
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
			    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row6.id != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.effectivetime != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.effectivetime)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.active != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.active)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.moduleid != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.moduleid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row6.definitionstatusid != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row6.definitionstatusid)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "conc_row"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)((String)globalMap.get("tFileList_4_CURRENT_FILEPATH")) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate4", 2, "exec" + NB_ITERATE_tFileInputDelimited_3);
						}				
					




	
	/**
	 * [tFileList_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 process_data_end ] stop
 */
	
	/**
	 * [tFileList_4 end ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

  
    }
  globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);
  

    if (NB_FILEtFileList_4 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_4);
  
 

 

ok_Hash.put("tFileList_4", true);
end_Hash.put("tFileList_4", System.currentTimeMillis());




/**
 * [tFileList_4 end ] stop
 */
	
	/**
	 * [tUnite_2 end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3","row1");
			  	}
			  	
 

ok_Hash.put("tUnite_2", true);
end_Hash.put("tUnite_2", System.currentTimeMillis());




/**
 * [tUnite_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			
			conn_tDBOutput_2.commit();
			
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"conc_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_3 finally ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 finally ] stop
 */



	
	/**
	 * [tFileList_4 finally ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */



	
	/**
	 * [tUnite_2 finally ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_3_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String conceptid;

				public String getConceptid () {
					return this.conceptid;
				}
				
			    public String languagecode;

				public String getLanguagecode () {
					return this.languagecode;
				}
				
			    public String typeid;

				public String getTypeid () {
					return this.typeid;
				}
				
			    public String term;

				public String getTerm () {
					return this.term;
				}
				
			    public String casesignificanceid;

				public String getCasesignificanceid () {
					return this.casesignificanceid;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.conceptid = readString(dis);
					
					this.languagecode = readString(dis);
					
					this.typeid = readString(dis);
					
					this.term = readString(dis);
					
					this.casesignificanceid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.conceptid,dos);
					
					// String
				
						writeString(this.languagecode,dos);
					
					// String
				
						writeString(this.typeid,dos);
					
					// String
				
						writeString(this.term,dos);
					
					// String
				
						writeString(this.casesignificanceid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",conceptid="+conceptid);
		sb.append(",languagecode="+languagecode);
		sb.append(",typeid="+typeid);
		sb.append(",term="+term);
		sb.append(",casesignificanceid="+casesignificanceid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class desc_rowStruct implements routines.system.IPersistableRow<desc_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String conceptid;

				public String getConceptid () {
					return this.conceptid;
				}
				
			    public String languagecode;

				public String getLanguagecode () {
					return this.languagecode;
				}
				
			    public String typeid;

				public String getTypeid () {
					return this.typeid;
				}
				
			    public String term;

				public String getTerm () {
					return this.term;
				}
				
			    public String casesignificanceid;

				public String getCasesignificanceid () {
					return this.casesignificanceid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
						result = prime * result + ((this.effectivetime == null) ? 0 : this.effectivetime.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final desc_rowStruct other = (desc_rowStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					
						if (this.effectivetime == null) {
							if (other.effectivetime != null)
								return false;
						
						} else if (!this.effectivetime.equals(other.effectivetime))
						
							return false;
					

		return true;
    }

	public void copyDataTo(desc_rowStruct other) {

		other.id = this.id;
	            other.effectivetime = this.effectivetime;
	            other.active = this.active;
	            other.moduleid = this.moduleid;
	            other.conceptid = this.conceptid;
	            other.languagecode = this.languagecode;
	            other.typeid = this.typeid;
	            other.term = this.term;
	            other.casesignificanceid = this.casesignificanceid;
	            
	}

	public void copyKeysDataTo(desc_rowStruct other) {

		other.id = this.id;
	            	other.effectivetime = this.effectivetime;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.conceptid = readString(dis);
					
					this.languagecode = readString(dis);
					
					this.typeid = readString(dis);
					
					this.term = readString(dis);
					
					this.casesignificanceid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.conceptid,dos);
					
					// String
				
						writeString(this.languagecode,dos);
					
					// String
				
						writeString(this.typeid,dos);
					
					// String
				
						writeString(this.term,dos);
					
					// String
				
						writeString(this.casesignificanceid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",conceptid="+conceptid);
		sb.append(",languagecode="+languagecode);
		sb.append(",typeid="+typeid);
		sb.append(",term="+term);
		sb.append(",casesignificanceid="+casesignificanceid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(desc_rowStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.effectivetime, other.effectivetime);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectiveTime;

				public String getEffectiveTime () {
					return this.effectiveTime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleId;

				public String getModuleId () {
					return this.moduleId;
				}
				
			    public String conceptId;

				public String getConceptId () {
					return this.conceptId;
				}
				
			    public String languageCode;

				public String getLanguageCode () {
					return this.languageCode;
				}
				
			    public String typeId;

				public String getTypeId () {
					return this.typeId;
				}
				
			    public String term;

				public String getTerm () {
					return this.term;
				}
				
			    public String caseSignificanceId;

				public String getCaseSignificanceId () {
					return this.caseSignificanceId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectiveTime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleId = readString(dis);
					
					this.conceptId = readString(dis);
					
					this.languageCode = readString(dis);
					
					this.typeId = readString(dis);
					
					this.term = readString(dis);
					
					this.caseSignificanceId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectiveTime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleId,dos);
					
					// String
				
						writeString(this.conceptId,dos);
					
					// String
				
						writeString(this.languageCode,dos);
					
					// String
				
						writeString(this.typeId,dos);
					
					// String
				
						writeString(this.term,dos);
					
					// String
				
						writeString(this.caseSignificanceId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectiveTime="+effectiveTime);
		sb.append(",active="+active);
		sb.append(",moduleId="+moduleId);
		sb.append(",conceptId="+conceptId);
		sb.append(",languageCode="+languageCode);
		sb.append(",typeId="+typeId);
		sb.append(",term="+term);
		sb.append(",caseSignificanceId="+caseSignificanceId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectiveTime;

				public String getEffectiveTime () {
					return this.effectiveTime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleId;

				public String getModuleId () {
					return this.moduleId;
				}
				
			    public String conceptId;

				public String getConceptId () {
					return this.conceptId;
				}
				
			    public String languageCode;

				public String getLanguageCode () {
					return this.languageCode;
				}
				
			    public String typeId;

				public String getTypeId () {
					return this.typeId;
				}
				
			    public String term;

				public String getTerm () {
					return this.term;
				}
				
			    public String caseSignificanceId;

				public String getCaseSignificanceId () {
					return this.caseSignificanceId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectiveTime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleId = readString(dis);
					
					this.conceptId = readString(dis);
					
					this.languageCode = readString(dis);
					
					this.typeId = readString(dis);
					
					this.term = readString(dis);
					
					this.caseSignificanceId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectiveTime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleId,dos);
					
					// String
				
						writeString(this.conceptId,dos);
					
					// String
				
						writeString(this.languageCode,dos);
					
					// String
				
						writeString(this.typeId,dos);
					
					// String
				
						writeString(this.term,dos);
					
					// String
				
						writeString(this.caseSignificanceId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectiveTime="+effectiveTime);
		sb.append(",active="+active);
		sb.append(",moduleId="+moduleId);
		sb.append(",conceptId="+conceptId);
		sb.append(",languageCode="+languageCode);
		sb.append(",typeId="+typeId);
		sb.append(",term="+term);
		sb.append(",caseSignificanceId="+caseSignificanceId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectiveTime;

				public String getEffectiveTime () {
					return this.effectiveTime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleId;

				public String getModuleId () {
					return this.moduleId;
				}
				
			    public String conceptId;

				public String getConceptId () {
					return this.conceptId;
				}
				
			    public String languageCode;

				public String getLanguageCode () {
					return this.languageCode;
				}
				
			    public String typeId;

				public String getTypeId () {
					return this.typeId;
				}
				
			    public String term;

				public String getTerm () {
					return this.term;
				}
				
			    public String caseSignificanceId;

				public String getCaseSignificanceId () {
					return this.caseSignificanceId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectiveTime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleId = readString(dis);
					
					this.conceptId = readString(dis);
					
					this.languageCode = readString(dis);
					
					this.typeId = readString(dis);
					
					this.term = readString(dis);
					
					this.caseSignificanceId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectiveTime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleId,dos);
					
					// String
				
						writeString(this.conceptId,dos);
					
					// String
				
						writeString(this.languageCode,dos);
					
					// String
				
						writeString(this.typeId,dos);
					
					// String
				
						writeString(this.term,dos);
					
					// String
				
						writeString(this.caseSignificanceId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectiveTime="+effectiveTime);
		sb.append(",active="+active);
		sb.append(",moduleId="+moduleId);
		sb.append(",conceptId="+conceptId);
		sb.append(",languageCode="+languageCode);
		sb.append(",typeId="+typeId);
		sb.append(",term="+term);
		sb.append(",caseSignificanceId="+caseSignificanceId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();

		row9Struct row9 = new row9Struct();

			row10Struct row10 = new row10Struct();
desc_rowStruct desc_row = new desc_rowStruct();
row8Struct row8 = new row8Struct();






	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"desc_row");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.snomed_db_schema;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("snomedct_description_f");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("snomedct_description_f");
}

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name + "?" + context.snomed_db_additionalparams;
    dbUser_tDBOutput_3 = context.snomed_db_user;

	final String decryptedPassword_tDBOutput_3 = context.snomed_db_password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"id\",\"effectivetime\",\"active\",\"moduleid\",\"conceptid\",\"languagecode\",\"typeid\",\"term\",\"casesignificanceid\") VALUES (?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
desc_rowStruct desc_row_tmp = new desc_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tUnite_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_3", false);
		start_Hash.put("tUnite_3", System.currentTimeMillis());
		
	
	currentComponent="tUnite_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7","row9");
					}
				
		int tos_count_tUnite_3 = 0;
		

int nb_line_tUnite_3 = 0;

 



/**
 * [tUnite_3 begin ] stop
 */
	
	/**
	 * [tFileList_5 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_4 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_5", false);
		start_Hash.put("tFileList_5", System.currentTimeMillis());
		
	
	currentComponent="tFileList_5";

	
		int tos_count_tFileList_5 = 0;
		
	
 
     
    
  String directory_tFileList_5 = context.snomed_clinical_ext_file_path;
  final java.util.List<String> maskList_tFileList_5 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_5 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_5.add("sct2_Description_Full-en_INT_*.txt"); 
    maskList_tFileList_5.add("sct2_Description_Full-en_GB1000000_*.txt");  
  for (final String filemask_tFileList_5 : maskList_tFileList_5) {
	String filemask_compile_tFileList_5 = filemask_tFileList_5;
	
		filemask_compile_tFileList_5 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_5.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_5 = java.util.regex.Pattern.compile(filemask_compile_tFileList_5, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_5.add(fileNamePattern_tFileList_5);
  }
  int NB_FILEtFileList_5 = 0;

  final boolean case_sensitive_tFileList_5 = false;
    final java.util.List<java.io.File> list_tFileList_5 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_5 = new java.util.HashSet<String>();
	java.io.File file_tFileList_5 = new java.io.File(directory_tFileList_5);
    
		file_tFileList_5.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_5 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_5 : patternList_tFileList_5) {
          	if (fileNamePattern_tFileList_5.matcher(fileName_tFileList_5).matches()){
					if(!filePath_tFileList_5.contains(file.getAbsolutePath())) {
			          list_tFileList_5.add(file);
			          filePath_tFileList_5.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_5);
    
    for (int i_tFileList_5 = 0; i_tFileList_5 < list_tFileList_5.size(); i_tFileList_5++){
      java.io.File files_tFileList_5 = list_tFileList_5.get(i_tFileList_5);
      String fileName_tFileList_5 = files_tFileList_5.getName();
      
      String currentFileName_tFileList_5 = files_tFileList_5.getName(); 
      String currentFilePath_tFileList_5 = files_tFileList_5.getAbsolutePath();
      String currentFileDirectory_tFileList_5 = files_tFileList_5.getParent();
      String currentFileExtension_tFileList_5 = null;
      
      if (files_tFileList_5.getName().contains(".") && files_tFileList_5.isFile()){
        currentFileExtension_tFileList_5 = files_tFileList_5.getName().substring(files_tFileList_5.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_5 = "";
      }
      
      NB_FILEtFileList_5 ++;
      globalMap.put("tFileList_5_CURRENT_FILE", currentFileName_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEPATH", currentFilePath_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_5);
      globalMap.put("tFileList_5_NB_FILE", NB_FILEtFileList_5);
      
 



/**
 * [tFileList_5 begin ] stop
 */
	
	/**
	 * [tFileList_5 main ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 


	tos_count_tFileList_5++;

/**
 * [tFileList_5 main ] stop
 */
	
	/**
	 * [tFileList_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_4++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("desc_row", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate5", 1, "exec" + NB_ITERATE_tFileInputDelimited_4);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try{
					
						Object filename_tFileInputDelimited_4 = (String)globalMap.get("tFileList_5_CURRENT_FILEPATH");
						if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
			if(footer_value_tFileInputDelimited_4 >0 || random_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited((String)globalMap.get("tFileList_5_CURRENT_FILEPATH"), "US-ASCII","\t","\n",true,1,0,
									limit_tFileInputDelimited_4
								,-1, false);
						} catch(java.lang.Exception e) {
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_4!=null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();
						
			    						row7 = null;			
												
									boolean whetherReject_tFileInputDelimited_4 = false;
									row7 = new row7Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_4 = 0;
				
					columnIndexWithD_tFileInputDelimited_4 = 0;
					
							row7.id = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 1;
					
							row7.effectiveTime = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 2;
					
							row7.active = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 3;
					
							row7.moduleId = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 4;
					
							row7.conceptId = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 5;
					
							row7.languageCode = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 6;
					
							row7.typeId = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 7;
					
							row7.term = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 8;
					
							row7.caseSignificanceId = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
				
										
										if(rowstate_tFileInputDelimited_4.getException()!=null) {
											throw rowstate_tFileInputDelimited_4.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_4 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tUnite_3 main ] start
	 */

	

	
	
	currentComponent="tUnite_3";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row7");
						}
						
//////////
 

// for output
			row10 = new row10Struct();
								
			row10.id = row7.id;								
			row10.effectiveTime = row7.effectiveTime;								
			row10.active = row7.active;								
			row10.moduleId = row7.moduleId;								
			row10.conceptId = row7.conceptId;								
			row10.languageCode = row7.languageCode;								
			row10.typeId = row7.typeId;								
			row10.term = row7.term;								
			row10.caseSignificanceId = row7.caseSignificanceId;			

			nb_line_tUnite_3++;

//////////
 


	tos_count_tUnite_3++;

/**
 * [tUnite_3 main ] stop
 */
	
	/**
	 * [tUnite_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_3";

	

 



/**
 * [tUnite_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

desc_row = null;


// # Output table : 'desc_row'
desc_row_tmp.id = row10.id;
desc_row_tmp.effectivetime = row10.effectiveTime;
desc_row_tmp.active = row10.active;
desc_row_tmp.moduleid = row10.moduleId;
desc_row_tmp.conceptid = row10.conceptId;
desc_row_tmp.languagecode = row10.languageCode;
desc_row_tmp.typeid = row10.typeId;
desc_row_tmp.term = row10.term;
desc_row_tmp.casesignificanceid = row10.caseSignificanceId;
desc_row = desc_row_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "desc_row"
if(desc_row != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"desc_row");
					}
					



            row8 = null;
        whetherReject_tDBOutput_3 = false;
                    if(desc_row.id == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, desc_row.id);
}

                    if(desc_row.effectivetime == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, desc_row.effectivetime);
}

                    if(desc_row.active == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, desc_row.active);
}

                    if(desc_row.moduleid == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, desc_row.moduleid);
}

                    if(desc_row.conceptid == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, desc_row.conceptid);
}

                    if(desc_row.languagecode == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, desc_row.languagecode);
}

                    if(desc_row.typeid == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, desc_row.typeid);
}

                    if(desc_row.term == null) {
pstmt_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(8, desc_row.term);
}

                    if(desc_row.casesignificanceid == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, desc_row.casesignificanceid);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
            if(!whetherReject_tDBOutput_3) {
                            row8 = new row8Struct();
                                row8.id = desc_row.id;
                                row8.effectivetime = desc_row.effectivetime;
                                row8.active = desc_row.active;
                                row8.moduleid = desc_row.moduleid;
                                row8.conceptid = desc_row.conceptid;
                                row8.languagecode = desc_row.languagecode;
                                row8.typeid = desc_row.typeid;
                                row8.term = desc_row.term;
                                row8.casesignificanceid = desc_row.casesignificanceid;
            }
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    		if (ne_tDBOutput_3 != null) {
				    			throw(sqle_tDBOutput_3);
				    		}else{
				            	throw(e_tDBOutput_3);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                if ((batchSize_tDBOutput_3 > 0) && (batchSizeCounter_tDBOutput_3 > 0)) {
                try {
                		int countSum_tDBOutput_3 = 0;
                		    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
            	    	
            	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
            	    	
                batchSizeCounter_tDBOutput_3 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_3){
			    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
			    	String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					}else{
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}
			    	
			    		if (ne_tDBOutput_3 != null) {
			    			throw(sqle_tDBOutput_3);
			    		}else{
			            	throw(e_tDBOutput_3);
			            }
			    	
				}
            }
                	conn_tDBOutput_3.commit();
                	
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(row8.id != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.effectivetime != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.effectivetime)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.active != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.active)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.moduleid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.moduleid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.conceptid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.conceptid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.languagecode != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.languagecode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.typeid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.typeid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.term != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.term)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.casesignificanceid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.casesignificanceid)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "desc_row"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_3";

	

 



/**
 * [tUnite_3 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	



            }
            }finally{
                if(!((Object)((String)globalMap.get("tFileList_5_CURRENT_FILEPATH")) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_4!=null){
                		fid_tFileInputDelimited_4.close();
                	}
                }
                if(fid_tFileInputDelimited_4!=null){
                	globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate5", 2, "exec" + NB_ITERATE_tFileInputDelimited_4);
						}				
					




	
	/**
	 * [tFileList_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 process_data_end ] stop
 */
	
	/**
	 * [tFileList_5 end ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

  
    }
  globalMap.put("tFileList_5_NB_FILE", NB_FILEtFileList_5);
  

    if (NB_FILEtFileList_5 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_5);
  
 

 

ok_Hash.put("tFileList_5", true);
end_Hash.put("tFileList_5", System.currentTimeMillis());




/**
 * [tFileList_5 end ] stop
 */
	
	/**
	 * [tFileList_6 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_6 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_6", false);
		start_Hash.put("tFileList_6", System.currentTimeMillis());
		
	
	currentComponent="tFileList_6";

	
		int tos_count_tFileList_6 = 0;
		
	
 
     
    
  String directory_tFileList_6 = context.snomed_drug_ext_file_path;
  final java.util.List<String> maskList_tFileList_6 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_6 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_6.add("sct2_Description_Full-en_GB1000001_*.txt");  
  for (final String filemask_tFileList_6 : maskList_tFileList_6) {
	String filemask_compile_tFileList_6 = filemask_tFileList_6;
	
		filemask_compile_tFileList_6 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_6.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_6 = java.util.regex.Pattern.compile(filemask_compile_tFileList_6, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_6.add(fileNamePattern_tFileList_6);
  }
  int NB_FILEtFileList_6 = 0;

  final boolean case_sensitive_tFileList_6 = false;
    final java.util.List<java.io.File> list_tFileList_6 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_6 = new java.util.HashSet<String>();
	java.io.File file_tFileList_6 = new java.io.File(directory_tFileList_6);
    
		file_tFileList_6.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_6 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_6 : patternList_tFileList_6) {
          	if (fileNamePattern_tFileList_6.matcher(fileName_tFileList_6).matches()){
					if(!filePath_tFileList_6.contains(file.getAbsolutePath())) {
			          list_tFileList_6.add(file);
			          filePath_tFileList_6.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_6);
    
    for (int i_tFileList_6 = 0; i_tFileList_6 < list_tFileList_6.size(); i_tFileList_6++){
      java.io.File files_tFileList_6 = list_tFileList_6.get(i_tFileList_6);
      String fileName_tFileList_6 = files_tFileList_6.getName();
      
      String currentFileName_tFileList_6 = files_tFileList_6.getName(); 
      String currentFilePath_tFileList_6 = files_tFileList_6.getAbsolutePath();
      String currentFileDirectory_tFileList_6 = files_tFileList_6.getParent();
      String currentFileExtension_tFileList_6 = null;
      
      if (files_tFileList_6.getName().contains(".") && files_tFileList_6.isFile()){
        currentFileExtension_tFileList_6 = files_tFileList_6.getName().substring(files_tFileList_6.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_6 = "";
      }
      
      NB_FILEtFileList_6 ++;
      globalMap.put("tFileList_6_CURRENT_FILE", currentFileName_tFileList_6);
      globalMap.put("tFileList_6_CURRENT_FILEPATH", currentFilePath_tFileList_6);
      globalMap.put("tFileList_6_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_6);
      globalMap.put("tFileList_6_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_6);
      globalMap.put("tFileList_6_NB_FILE", NB_FILEtFileList_6);
      
 



/**
 * [tFileList_6 begin ] stop
 */
	
	/**
	 * [tFileList_6 main ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

 


	tos_count_tFileList_6++;

/**
 * [tFileList_6 main ] stop
 */
	
	/**
	 * [tFileList_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

 



/**
 * [tFileList_6 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_6++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("desc_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row9", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate6", 1, "exec" + NB_ITERATE_tFileInputDelimited_6);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileInputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_6", false);
		start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_6";

	
		int tos_count_tFileInputDelimited_6 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				int limit_tFileInputDelimited_6 = -1;
				try{
					
						Object filename_tFileInputDelimited_6 = (String)globalMap.get("tFileList_6_CURRENT_FILEPATH");
						if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
			if(footer_value_tFileInputDelimited_6 >0 || random_value_tFileInputDelimited_6 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited((String)globalMap.get("tFileList_6_CURRENT_FILEPATH"), "US-ASCII","\t","\n",true,1,0,
									limit_tFileInputDelimited_6
								,-1, false);
						} catch(java.lang.Exception e) {
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_6!=null && fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();
						
			    						row9 = null;			
												
									boolean whetherReject_tFileInputDelimited_6 = false;
									row9 = new row9Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_6 = 0;
				
					columnIndexWithD_tFileInputDelimited_6 = 0;
					
							row9.id = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 1;
					
							row9.effectiveTime = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 2;
					
							row9.active = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 3;
					
							row9.moduleId = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 4;
					
							row9.conceptId = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 5;
					
							row9.languageCode = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 6;
					
							row9.typeId = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 7;
					
							row9.term = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 8;
					
							row9.caseSignificanceId = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
				
										
										if(rowstate_tFileInputDelimited_6.getException()!=null) {
											throw rowstate_tFileInputDelimited_6.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_6 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_6 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 


	tos_count_tFileInputDelimited_6++;

/**
 * [tFileInputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tUnite_3 main ] start
	 */

	

	
	
	currentComponent="tUnite_3";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row9");
						}
						
//////////
 

// for output
			row10 = new row10Struct();
								
			row10.id = row9.id;								
			row10.effectiveTime = row9.effectiveTime;								
			row10.active = row9.active;								
			row10.moduleId = row9.moduleId;								
			row10.conceptId = row9.conceptId;								
			row10.languageCode = row9.languageCode;								
			row10.typeId = row9.typeId;								
			row10.term = row9.term;								
			row10.caseSignificanceId = row9.caseSignificanceId;			

			nb_line_tUnite_3++;

//////////
 


	tos_count_tUnite_3++;

/**
 * [tUnite_3 main ] stop
 */
	
	/**
	 * [tUnite_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_3";

	

 



/**
 * [tUnite_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

desc_row = null;


// # Output table : 'desc_row'
desc_row_tmp.id = row10.id;
desc_row_tmp.effectivetime = row10.effectiveTime;
desc_row_tmp.active = row10.active;
desc_row_tmp.moduleid = row10.moduleId;
desc_row_tmp.conceptid = row10.conceptId;
desc_row_tmp.languagecode = row10.languageCode;
desc_row_tmp.typeid = row10.typeId;
desc_row_tmp.term = row10.term;
desc_row_tmp.casesignificanceid = row10.caseSignificanceId;
desc_row = desc_row_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "desc_row"
if(desc_row != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"desc_row");
					}
					



            row8 = null;
        whetherReject_tDBOutput_3 = false;
                    if(desc_row.id == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, desc_row.id);
}

                    if(desc_row.effectivetime == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, desc_row.effectivetime);
}

                    if(desc_row.active == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, desc_row.active);
}

                    if(desc_row.moduleid == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, desc_row.moduleid);
}

                    if(desc_row.conceptid == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, desc_row.conceptid);
}

                    if(desc_row.languagecode == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, desc_row.languagecode);
}

                    if(desc_row.typeid == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, desc_row.typeid);
}

                    if(desc_row.term == null) {
pstmt_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(8, desc_row.term);
}

                    if(desc_row.casesignificanceid == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, desc_row.casesignificanceid);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
            if(!whetherReject_tDBOutput_3) {
                            row8 = new row8Struct();
                                row8.id = desc_row.id;
                                row8.effectivetime = desc_row.effectivetime;
                                row8.active = desc_row.active;
                                row8.moduleid = desc_row.moduleid;
                                row8.conceptid = desc_row.conceptid;
                                row8.languagecode = desc_row.languagecode;
                                row8.typeid = desc_row.typeid;
                                row8.term = desc_row.term;
                                row8.casesignificanceid = desc_row.casesignificanceid;
            }
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    		if (ne_tDBOutput_3 != null) {
				    			throw(sqle_tDBOutput_3);
				    		}else{
				            	throw(e_tDBOutput_3);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                if ((batchSize_tDBOutput_3 > 0) && (batchSizeCounter_tDBOutput_3 > 0)) {
                try {
                		int countSum_tDBOutput_3 = 0;
                		    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
            	    	
            	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
            	    	
                batchSizeCounter_tDBOutput_3 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_3){
			    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
			    	String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					}else{
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}
			    	
			    		if (ne_tDBOutput_3 != null) {
			    			throw(sqle_tDBOutput_3);
			    		}else{
			            	throw(e_tDBOutput_3);
			            }
			    	
				}
            }
                	conn_tDBOutput_3.commit();
                	
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(row8.id != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.effectivetime != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.effectivetime)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.active != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.active)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.moduleid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.moduleid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.conceptid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.conceptid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.languagecode != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.languagecode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.typeid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.typeid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.term != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.term)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row8.casesignificanceid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row8.casesignificanceid)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "desc_row"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_3";

	

 



/**
 * [tUnite_3 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tFileInputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	



            }
            }finally{
                if(!((Object)((String)globalMap.get("tFileList_6_CURRENT_FILEPATH")) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_6!=null){
                		fid_tFileInputDelimited_6.close();
                	}
                }
                if(fid_tFileInputDelimited_6!=null){
                	globalMap.put("tFileInputDelimited_6_NB_LINE", fid_tFileInputDelimited_6.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_6", true);
end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());




/**
 * [tFileInputDelimited_6 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate6", 2, "exec" + NB_ITERATE_tFileInputDelimited_6);
						}				
					




	
	/**
	 * [tFileList_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

 



/**
 * [tFileList_6 process_data_end ] stop
 */
	
	/**
	 * [tFileList_6 end ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

  
    }
  globalMap.put("tFileList_6_NB_FILE", NB_FILEtFileList_6);
  

    if (NB_FILEtFileList_6 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_6);
  
 

 

ok_Hash.put("tFileList_6", true);
end_Hash.put("tFileList_6", System.currentTimeMillis());




/**
 * [tFileList_6 end ] stop
 */
	
	/**
	 * [tUnite_3 end ] start
	 */

	

	
	
	currentComponent="tUnite_3";

	

globalMap.put("tUnite_3_NB_LINE", nb_line_tUnite_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7","row9");
			  	}
			  	
 

ok_Hash.put("tUnite_3", true);
end_Hash.put("tUnite_3", System.currentTimeMillis());




/**
 * [tUnite_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    		if (ne_tDBOutput_3 != null) {
	    			throw(sqle_tDBOutput_3);
	    		}else{
	            	throw(e_tDBOutput_3);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			
			conn_tDBOutput_3.commit();
			
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"desc_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_5 finally ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */



	
	/**
	 * [tFileList_6 finally ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

 



/**
 * [tFileList_6 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 finally ] stop
 */



	
	/**
	 * [tUnite_3 finally ] start
	 */

	

	
	
	currentComponent="tUnite_3";

	

 



/**
 * [tUnite_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_5_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String sourceid;

				public String getSourceid () {
					return this.sourceid;
				}
				
			    public String destinationid;

				public String getDestinationid () {
					return this.destinationid;
				}
				
			    public String relationshipgroup;

				public String getRelationshipgroup () {
					return this.relationshipgroup;
				}
				
			    public String typeid;

				public String getTypeid () {
					return this.typeid;
				}
				
			    public String characteristictypeid;

				public String getCharacteristictypeid () {
					return this.characteristictypeid;
				}
				
			    public String modifierid;

				public String getModifierid () {
					return this.modifierid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
						result = prime * result + ((this.effectivetime == null) ? 0 : this.effectivetime.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					
						if (this.effectivetime == null) {
							if (other.effectivetime != null)
								return false;
						
						} else if (!this.effectivetime.equals(other.effectivetime))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.id = this.id;
	            other.effectivetime = this.effectivetime;
	            other.active = this.active;
	            other.moduleid = this.moduleid;
	            other.sourceid = this.sourceid;
	            other.destinationid = this.destinationid;
	            other.relationshipgroup = this.relationshipgroup;
	            other.typeid = this.typeid;
	            other.characteristictypeid = this.characteristictypeid;
	            other.modifierid = this.modifierid;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.id = this.id;
	            	other.effectivetime = this.effectivetime;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.sourceid = readString(dis);
					
					this.destinationid = readString(dis);
					
					this.relationshipgroup = readString(dis);
					
					this.typeid = readString(dis);
					
					this.characteristictypeid = readString(dis);
					
					this.modifierid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.sourceid,dos);
					
					// String
				
						writeString(this.destinationid,dos);
					
					// String
				
						writeString(this.relationshipgroup,dos);
					
					// String
				
						writeString(this.typeid,dos);
					
					// String
				
						writeString(this.characteristictypeid,dos);
					
					// String
				
						writeString(this.modifierid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",sourceid="+sourceid);
		sb.append(",destinationid="+destinationid);
		sb.append(",relationshipgroup="+relationshipgroup);
		sb.append(",typeid="+typeid);
		sb.append(",characteristictypeid="+characteristictypeid);
		sb.append(",modifierid="+modifierid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.effectivetime, other.effectivetime);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class rel_rowStruct implements routines.system.IPersistableRow<rel_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String sourceid;

				public String getSourceid () {
					return this.sourceid;
				}
				
			    public String destinationid;

				public String getDestinationid () {
					return this.destinationid;
				}
				
			    public String relationshipgroup;

				public String getRelationshipgroup () {
					return this.relationshipgroup;
				}
				
			    public String typeid;

				public String getTypeid () {
					return this.typeid;
				}
				
			    public String characteristictypeid;

				public String getCharacteristictypeid () {
					return this.characteristictypeid;
				}
				
			    public String modifierid;

				public String getModifierid () {
					return this.modifierid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
						result = prime * result + ((this.effectivetime == null) ? 0 : this.effectivetime.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final rel_rowStruct other = (rel_rowStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					
						if (this.effectivetime == null) {
							if (other.effectivetime != null)
								return false;
						
						} else if (!this.effectivetime.equals(other.effectivetime))
						
							return false;
					

		return true;
    }

	public void copyDataTo(rel_rowStruct other) {

		other.id = this.id;
	            other.effectivetime = this.effectivetime;
	            other.active = this.active;
	            other.moduleid = this.moduleid;
	            other.sourceid = this.sourceid;
	            other.destinationid = this.destinationid;
	            other.relationshipgroup = this.relationshipgroup;
	            other.typeid = this.typeid;
	            other.characteristictypeid = this.characteristictypeid;
	            other.modifierid = this.modifierid;
	            
	}

	public void copyKeysDataTo(rel_rowStruct other) {

		other.id = this.id;
	            	other.effectivetime = this.effectivetime;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.sourceid = readString(dis);
					
					this.destinationid = readString(dis);
					
					this.relationshipgroup = readString(dis);
					
					this.typeid = readString(dis);
					
					this.characteristictypeid = readString(dis);
					
					this.modifierid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.sourceid,dos);
					
					// String
				
						writeString(this.destinationid,dos);
					
					// String
				
						writeString(this.relationshipgroup,dos);
					
					// String
				
						writeString(this.typeid,dos);
					
					// String
				
						writeString(this.characteristictypeid,dos);
					
					// String
				
						writeString(this.modifierid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",sourceid="+sourceid);
		sb.append(",destinationid="+destinationid);
		sb.append(",relationshipgroup="+relationshipgroup);
		sb.append(",typeid="+typeid);
		sb.append(",characteristictypeid="+characteristictypeid);
		sb.append(",modifierid="+modifierid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rel_rowStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.effectivetime, other.effectivetime);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectiveTime;

				public String getEffectiveTime () {
					return this.effectiveTime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleId;

				public String getModuleId () {
					return this.moduleId;
				}
				
			    public String sourceId;

				public String getSourceId () {
					return this.sourceId;
				}
				
			    public String destinationId;

				public String getDestinationId () {
					return this.destinationId;
				}
				
			    public String relationshipGroup;

				public String getRelationshipGroup () {
					return this.relationshipGroup;
				}
				
			    public String typeId;

				public String getTypeId () {
					return this.typeId;
				}
				
			    public String characteristicTypeId;

				public String getCharacteristicTypeId () {
					return this.characteristicTypeId;
				}
				
			    public String modifierId;

				public String getModifierId () {
					return this.modifierId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectiveTime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleId = readString(dis);
					
					this.sourceId = readString(dis);
					
					this.destinationId = readString(dis);
					
					this.relationshipGroup = readString(dis);
					
					this.typeId = readString(dis);
					
					this.characteristicTypeId = readString(dis);
					
					this.modifierId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectiveTime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleId,dos);
					
					// String
				
						writeString(this.sourceId,dos);
					
					// String
				
						writeString(this.destinationId,dos);
					
					// String
				
						writeString(this.relationshipGroup,dos);
					
					// String
				
						writeString(this.typeId,dos);
					
					// String
				
						writeString(this.characteristicTypeId,dos);
					
					// String
				
						writeString(this.modifierId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectiveTime="+effectiveTime);
		sb.append(",active="+active);
		sb.append(",moduleId="+moduleId);
		sb.append(",sourceId="+sourceId);
		sb.append(",destinationId="+destinationId);
		sb.append(",relationshipGroup="+relationshipGroup);
		sb.append(",typeId="+typeId);
		sb.append(",characteristicTypeId="+characteristicTypeId);
		sb.append(",modifierId="+modifierId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectiveTime;

				public String getEffectiveTime () {
					return this.effectiveTime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleId;

				public String getModuleId () {
					return this.moduleId;
				}
				
			    public String sourceId;

				public String getSourceId () {
					return this.sourceId;
				}
				
			    public String destinationId;

				public String getDestinationId () {
					return this.destinationId;
				}
				
			    public String relationshipGroup;

				public String getRelationshipGroup () {
					return this.relationshipGroup;
				}
				
			    public String typeId;

				public String getTypeId () {
					return this.typeId;
				}
				
			    public String characteristicTypeId;

				public String getCharacteristicTypeId () {
					return this.characteristicTypeId;
				}
				
			    public String modifierId;

				public String getModifierId () {
					return this.modifierId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectiveTime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleId = readString(dis);
					
					this.sourceId = readString(dis);
					
					this.destinationId = readString(dis);
					
					this.relationshipGroup = readString(dis);
					
					this.typeId = readString(dis);
					
					this.characteristicTypeId = readString(dis);
					
					this.modifierId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectiveTime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleId,dos);
					
					// String
				
						writeString(this.sourceId,dos);
					
					// String
				
						writeString(this.destinationId,dos);
					
					// String
				
						writeString(this.relationshipGroup,dos);
					
					// String
				
						writeString(this.typeId,dos);
					
					// String
				
						writeString(this.characteristicTypeId,dos);
					
					// String
				
						writeString(this.modifierId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectiveTime="+effectiveTime);
		sb.append(",active="+active);
		sb.append(",moduleId="+moduleId);
		sb.append(",sourceId="+sourceId);
		sb.append(",destinationId="+destinationId);
		sb.append(",relationshipGroup="+relationshipGroup);
		sb.append(",typeId="+typeId);
		sb.append(",characteristicTypeId="+characteristicTypeId);
		sb.append(",modifierId="+modifierId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectiveTime;

				public String getEffectiveTime () {
					return this.effectiveTime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleId;

				public String getModuleId () {
					return this.moduleId;
				}
				
			    public String sourceId;

				public String getSourceId () {
					return this.sourceId;
				}
				
			    public String destinationId;

				public String getDestinationId () {
					return this.destinationId;
				}
				
			    public String relationshipGroup;

				public String getRelationshipGroup () {
					return this.relationshipGroup;
				}
				
			    public String typeId;

				public String getTypeId () {
					return this.typeId;
				}
				
			    public String characteristicTypeId;

				public String getCharacteristicTypeId () {
					return this.characteristicTypeId;
				}
				
			    public String modifierId;

				public String getModifierId () {
					return this.modifierId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectiveTime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleId = readString(dis);
					
					this.sourceId = readString(dis);
					
					this.destinationId = readString(dis);
					
					this.relationshipGroup = readString(dis);
					
					this.typeId = readString(dis);
					
					this.characteristicTypeId = readString(dis);
					
					this.modifierId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectiveTime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleId,dos);
					
					// String
				
						writeString(this.sourceId,dos);
					
					// String
				
						writeString(this.destinationId,dos);
					
					// String
				
						writeString(this.relationshipGroup,dos);
					
					// String
				
						writeString(this.typeId,dos);
					
					// String
				
						writeString(this.characteristicTypeId,dos);
					
					// String
				
						writeString(this.modifierId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectiveTime="+effectiveTime);
		sb.append(",active="+active);
		sb.append(",moduleId="+moduleId);
		sb.append(",sourceId="+sourceId);
		sb.append(",destinationId="+destinationId);
		sb.append(",relationshipGroup="+relationshipGroup);
		sb.append(",typeId="+typeId);
		sb.append(",characteristicTypeId="+characteristicTypeId);
		sb.append(",modifierId="+modifierId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();

		row13Struct row13 = new row13Struct();

			row12Struct row12 = new row12Struct();
rel_rowStruct rel_row = new rel_rowStruct();
row14Struct row14 = new row14Struct();






	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
		java.io.PrintStream consoleOut_tLogRow_4 = null;	

 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"rel_row");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = context.snomed_db_schema;
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("snomedct_relationship_f");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("snomedct_relationship_f");
}

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_4 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name + "?" + context.snomed_db_additionalparams;
    dbUser_tDBOutput_4 = context.snomed_db_user;

	final String decryptedPassword_tDBOutput_4 = context.snomed_db_password; 

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;


   int batchSize_tDBOutput_4 = 10000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
	    String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4 + "\" (\"id\",\"effectivetime\",\"active\",\"moduleid\",\"sourceid\",\"destinationid\",\"relationshipgroup\",\"typeid\",\"characteristictypeid\",\"modifierid\") VALUES (?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
rel_rowStruct rel_row_tmp = new rel_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tUnite_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_4", false);
		start_Hash.put("tUnite_4", System.currentTimeMillis());
		
	
	currentComponent="tUnite_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13","row11");
					}
				
		int tos_count_tUnite_4 = 0;
		

int nb_line_tUnite_4 = 0;

 



/**
 * [tUnite_4 begin ] stop
 */
	
	/**
	 * [tFileList_7 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_7 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_7", false);
		start_Hash.put("tFileList_7", System.currentTimeMillis());
		
	
	currentComponent="tFileList_7";

	
		int tos_count_tFileList_7 = 0;
		
	
 
     
    
  String directory_tFileList_7 = context.snomed_clinical_ext_file_path;
  final java.util.List<String> maskList_tFileList_7 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_7 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_7.add("sct2_Relationship_Full_INT_*.txt"); 
    maskList_tFileList_7.add("sct2_Relationship_Full_GB1000000_*.txt");  
  for (final String filemask_tFileList_7 : maskList_tFileList_7) {
	String filemask_compile_tFileList_7 = filemask_tFileList_7;
	
		filemask_compile_tFileList_7 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_7.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_7 = java.util.regex.Pattern.compile(filemask_compile_tFileList_7, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_7.add(fileNamePattern_tFileList_7);
  }
  int NB_FILEtFileList_7 = 0;

  final boolean case_sensitive_tFileList_7 = false;
    final java.util.List<java.io.File> list_tFileList_7 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_7 = new java.util.HashSet<String>();
	java.io.File file_tFileList_7 = new java.io.File(directory_tFileList_7);
    
		file_tFileList_7.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_7 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_7 : patternList_tFileList_7) {
          	if (fileNamePattern_tFileList_7.matcher(fileName_tFileList_7).matches()){
					if(!filePath_tFileList_7.contains(file.getAbsolutePath())) {
			          list_tFileList_7.add(file);
			          filePath_tFileList_7.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_7);
    
    for (int i_tFileList_7 = 0; i_tFileList_7 < list_tFileList_7.size(); i_tFileList_7++){
      java.io.File files_tFileList_7 = list_tFileList_7.get(i_tFileList_7);
      String fileName_tFileList_7 = files_tFileList_7.getName();
      
      String currentFileName_tFileList_7 = files_tFileList_7.getName(); 
      String currentFilePath_tFileList_7 = files_tFileList_7.getAbsolutePath();
      String currentFileDirectory_tFileList_7 = files_tFileList_7.getParent();
      String currentFileExtension_tFileList_7 = null;
      
      if (files_tFileList_7.getName().contains(".") && files_tFileList_7.isFile()){
        currentFileExtension_tFileList_7 = files_tFileList_7.getName().substring(files_tFileList_7.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_7 = "";
      }
      
      NB_FILEtFileList_7 ++;
      globalMap.put("tFileList_7_CURRENT_FILE", currentFileName_tFileList_7);
      globalMap.put("tFileList_7_CURRENT_FILEPATH", currentFilePath_tFileList_7);
      globalMap.put("tFileList_7_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_7);
      globalMap.put("tFileList_7_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_7);
      globalMap.put("tFileList_7_NB_FILE", NB_FILEtFileList_7);
      
 



/**
 * [tFileList_7 begin ] stop
 */
	
	/**
	 * [tFileList_7 main ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

 


	tos_count_tFileList_7++;

/**
 * [tFileList_7 main ] stop
 */
	
	/**
	 * [tFileList_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

 



/**
 * [tFileList_7 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_7++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("rel_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row14", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate7", 1, "exec" + NB_ITERATE_tFileInputDelimited_7);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileInputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_7", false);
		start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_7";

	
		int tos_count_tFileInputDelimited_7 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				int limit_tFileInputDelimited_7 = -1;
				try{
					
						Object filename_tFileInputDelimited_7 = (String)globalMap.get("tFileList_7_CURRENT_FILEPATH");
						if(filename_tFileInputDelimited_7 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
			if(footer_value_tFileInputDelimited_7 >0 || random_value_tFileInputDelimited_7 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited((String)globalMap.get("tFileList_7_CURRENT_FILEPATH"), "US-ASCII","\t","\n",true,1,0,
									limit_tFileInputDelimited_7
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_7!=null && fid_tFileInputDelimited_7.nextRecord()) {
						rowstate_tFileInputDelimited_7.reset();
						
			    						row11 = null;			
												
									boolean whetherReject_tFileInputDelimited_7 = false;
									row11 = new row11Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_7 = 0;
				
					columnIndexWithD_tFileInputDelimited_7 = 0;
					
							row11.id = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 1;
					
							row11.effectiveTime = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 2;
					
							row11.active = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 3;
					
							row11.moduleId = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 4;
					
							row11.sourceId = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 5;
					
							row11.destinationId = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 6;
					
							row11.relationshipGroup = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 7;
					
							row11.typeId = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 8;
					
							row11.characteristicTypeId = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 9;
					
							row11.modifierId = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
				
										
										if(rowstate_tFileInputDelimited_7.getException()!=null) {
											throw rowstate_tFileInputDelimited_7.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_7 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row11 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_7 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 


	tos_count_tFileInputDelimited_7++;

/**
 * [tFileInputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tUnite_4 main ] start
	 */

	

	
	
	currentComponent="tUnite_4";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row11");
						}
						
//////////
 

// for output
			row12 = new row12Struct();
								
			row12.id = row11.id;								
			row12.effectiveTime = row11.effectiveTime;								
			row12.active = row11.active;								
			row12.moduleId = row11.moduleId;								
			row12.sourceId = row11.sourceId;								
			row12.destinationId = row11.destinationId;								
			row12.relationshipGroup = row11.relationshipGroup;								
			row12.typeId = row11.typeId;								
			row12.characteristicTypeId = row11.characteristicTypeId;								
			row12.modifierId = row11.modifierId;			

			nb_line_tUnite_4++;

//////////
 


	tos_count_tUnite_4++;

/**
 * [tUnite_4 main ] stop
 */
	
	/**
	 * [tUnite_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_4";

	

 



/**
 * [tUnite_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

rel_row = null;


// # Output table : 'rel_row'
rel_row_tmp.id = row12.id;
rel_row_tmp.effectivetime = row12.effectiveTime;
rel_row_tmp.active = row12.active;
rel_row_tmp.moduleid = row12.moduleId;
rel_row_tmp.sourceid = row12.sourceId;
rel_row_tmp.destinationid = row12.destinationId;
rel_row_tmp.relationshipgroup = row12.relationshipGroup;
rel_row_tmp.typeid = row12.typeId;
rel_row_tmp.characteristictypeid = row12.characteristicTypeId;
rel_row_tmp.modifierid = row12.modifierId;
rel_row = rel_row_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "rel_row"
if(rel_row != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"rel_row");
					}
					



            row14 = null;
        whetherReject_tDBOutput_4 = false;
                    if(rel_row.id == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, rel_row.id);
}

                    if(rel_row.effectivetime == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, rel_row.effectivetime);
}

                    if(rel_row.active == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(3, rel_row.active);
}

                    if(rel_row.moduleid == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, rel_row.moduleid);
}

                    if(rel_row.sourceid == null) {
pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5, rel_row.sourceid);
}

                    if(rel_row.destinationid == null) {
pstmt_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(6, rel_row.destinationid);
}

                    if(rel_row.relationshipgroup == null) {
pstmt_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(7, rel_row.relationshipgroup);
}

                    if(rel_row.typeid == null) {
pstmt_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(8, rel_row.typeid);
}

                    if(rel_row.characteristictypeid == null) {
pstmt_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(9, rel_row.characteristictypeid);
}

                    if(rel_row.modifierid == null) {
pstmt_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(10, rel_row.modifierid);
}

			
    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
            if(!whetherReject_tDBOutput_4) {
                            row14 = new row14Struct();
                                row14.id = rel_row.id;
                                row14.effectivetime = rel_row.effectivetime;
                                row14.active = rel_row.active;
                                row14.moduleid = rel_row.moduleid;
                                row14.sourceid = rel_row.sourceid;
                                row14.destinationid = rel_row.destinationid;
                                row14.relationshipgroup = rel_row.relationshipgroup;
                                row14.typeid = rel_row.typeid;
                                row14.characteristictypeid = rel_row.characteristictypeid;
                                row14.modifierid = rel_row.modifierid;
            }
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    		if (ne_tDBOutput_4 != null) {
				    			throw(sqle_tDBOutput_4);
				    		}else{
				            	throw(e_tDBOutput_4);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                if ((batchSize_tDBOutput_4 > 0) && (batchSizeCounter_tDBOutput_4 > 0)) {
                try {
                		int countSum_tDBOutput_4 = 0;
                		    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
            	    	
            	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
            	    	
                batchSizeCounter_tDBOutput_4 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_4){
			    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
			    	String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					}else{
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}
			    	
			    		if (ne_tDBOutput_4 != null) {
			    			throw(sqle_tDBOutput_4);
			    		}else{
			            	throw(e_tDBOutput_4);
			            }
			    	
				}
            }
                	conn_tDBOutput_4.commit();
                	
                	commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_4 = new StringBuilder();




   				
	    		if(row14.id != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.effectivetime != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.effectivetime)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.active != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.active)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.moduleid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.moduleid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.sourceid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.sourceid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.destinationid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.destinationid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.relationshipgroup != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.relationshipgroup)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.typeid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.typeid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.characteristictypeid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.characteristictypeid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.modifierid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.modifierid)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
                    consoleOut_tLogRow_4.flush();
                    nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "rel_row"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tUnite_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_4";

	

 



/**
 * [tUnite_4 process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tFileInputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	



            }
            }finally{
                if(!((Object)((String)globalMap.get("tFileList_7_CURRENT_FILEPATH")) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_7!=null){
                		fid_tFileInputDelimited_7.close();
                	}
                }
                if(fid_tFileInputDelimited_7!=null){
                	globalMap.put("tFileInputDelimited_7_NB_LINE", fid_tFileInputDelimited_7.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_7", true);
end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());




/**
 * [tFileInputDelimited_7 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate7", 2, "exec" + NB_ITERATE_tFileInputDelimited_7);
						}				
					




	
	/**
	 * [tFileList_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

 



/**
 * [tFileList_7 process_data_end ] stop
 */
	
	/**
	 * [tFileList_7 end ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

  
    }
  globalMap.put("tFileList_7_NB_FILE", NB_FILEtFileList_7);
  

    if (NB_FILEtFileList_7 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_7);
  
 

 

ok_Hash.put("tFileList_7", true);
end_Hash.put("tFileList_7", System.currentTimeMillis());




/**
 * [tFileList_7 end ] stop
 */
	
	/**
	 * [tFileList_8 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_8 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_8", false);
		start_Hash.put("tFileList_8", System.currentTimeMillis());
		
	
	currentComponent="tFileList_8";

	
		int tos_count_tFileList_8 = 0;
		
	
 
     
    
  String directory_tFileList_8 = context.snomed_drug_ext_file_path;
  final java.util.List<String> maskList_tFileList_8 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_8 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_8.add("sct2_Relationship_Full_GB1000001_*.txt");  
  for (final String filemask_tFileList_8 : maskList_tFileList_8) {
	String filemask_compile_tFileList_8 = filemask_tFileList_8;
	
		filemask_compile_tFileList_8 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_8.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_8 = java.util.regex.Pattern.compile(filemask_compile_tFileList_8, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_8.add(fileNamePattern_tFileList_8);
  }
  int NB_FILEtFileList_8 = 0;

  final boolean case_sensitive_tFileList_8 = false;
    final java.util.List<java.io.File> list_tFileList_8 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_8 = new java.util.HashSet<String>();
	java.io.File file_tFileList_8 = new java.io.File(directory_tFileList_8);
    
		file_tFileList_8.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_8 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_8 : patternList_tFileList_8) {
          	if (fileNamePattern_tFileList_8.matcher(fileName_tFileList_8).matches()){
					if(!filePath_tFileList_8.contains(file.getAbsolutePath())) {
			          list_tFileList_8.add(file);
			          filePath_tFileList_8.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_8);
    
    for (int i_tFileList_8 = 0; i_tFileList_8 < list_tFileList_8.size(); i_tFileList_8++){
      java.io.File files_tFileList_8 = list_tFileList_8.get(i_tFileList_8);
      String fileName_tFileList_8 = files_tFileList_8.getName();
      
      String currentFileName_tFileList_8 = files_tFileList_8.getName(); 
      String currentFilePath_tFileList_8 = files_tFileList_8.getAbsolutePath();
      String currentFileDirectory_tFileList_8 = files_tFileList_8.getParent();
      String currentFileExtension_tFileList_8 = null;
      
      if (files_tFileList_8.getName().contains(".") && files_tFileList_8.isFile()){
        currentFileExtension_tFileList_8 = files_tFileList_8.getName().substring(files_tFileList_8.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_8 = "";
      }
      
      NB_FILEtFileList_8 ++;
      globalMap.put("tFileList_8_CURRENT_FILE", currentFileName_tFileList_8);
      globalMap.put("tFileList_8_CURRENT_FILEPATH", currentFilePath_tFileList_8);
      globalMap.put("tFileList_8_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_8);
      globalMap.put("tFileList_8_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_8);
      globalMap.put("tFileList_8_NB_FILE", NB_FILEtFileList_8);
      
 



/**
 * [tFileList_8 begin ] stop
 */
	
	/**
	 * [tFileList_8 main ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

 


	tos_count_tFileList_8++;

/**
 * [tFileList_8 main ] stop
 */
	
	/**
	 * [tFileList_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

 



/**
 * [tFileList_8 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_8++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("rel_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row14", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate8", 1, "exec" + NB_ITERATE_tFileInputDelimited_8);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileInputDelimited_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_8", false);
		start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_8";

	
		int tos_count_tFileInputDelimited_8 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_8 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				int limit_tFileInputDelimited_8 = -1;
				try{
					
						Object filename_tFileInputDelimited_8 = (String)globalMap.get("tFileList_8_CURRENT_FILEPATH");
						if(filename_tFileInputDelimited_8 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
			if(footer_value_tFileInputDelimited_8 >0 || random_value_tFileInputDelimited_8 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited((String)globalMap.get("tFileList_8_CURRENT_FILEPATH"), "US-ASCII","\t","\n",true,1,0,
									limit_tFileInputDelimited_8
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_8!=null && fid_tFileInputDelimited_8.nextRecord()) {
						rowstate_tFileInputDelimited_8.reset();
						
			    						row13 = null;			
												
									boolean whetherReject_tFileInputDelimited_8 = false;
									row13 = new row13Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_8 = 0;
				
					columnIndexWithD_tFileInputDelimited_8 = 0;
					
							row13.id = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 1;
					
							row13.effectiveTime = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 2;
					
							row13.active = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 3;
					
							row13.moduleId = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 4;
					
							row13.sourceId = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 5;
					
							row13.destinationId = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 6;
					
							row13.relationshipGroup = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 7;
					
							row13.typeId = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 8;
					
							row13.characteristicTypeId = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 9;
					
							row13.modifierId = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
				
										
										if(rowstate_tFileInputDelimited_8.getException()!=null) {
											throw rowstate_tFileInputDelimited_8.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_8 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row13 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_8 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 


	tos_count_tFileInputDelimited_8++;

/**
 * [tFileInputDelimited_8 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tUnite_4 main ] start
	 */

	

	
	
	currentComponent="tUnite_4";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row13");
						}
						
//////////
 

// for output
			row12 = new row12Struct();
								
			row12.id = row13.id;								
			row12.effectiveTime = row13.effectiveTime;								
			row12.active = row13.active;								
			row12.moduleId = row13.moduleId;								
			row12.sourceId = row13.sourceId;								
			row12.destinationId = row13.destinationId;								
			row12.relationshipGroup = row13.relationshipGroup;								
			row12.typeId = row13.typeId;								
			row12.characteristicTypeId = row13.characteristicTypeId;								
			row12.modifierId = row13.modifierId;			

			nb_line_tUnite_4++;

//////////
 


	tos_count_tUnite_4++;

/**
 * [tUnite_4 main ] stop
 */
	
	/**
	 * [tUnite_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_4";

	

 



/**
 * [tUnite_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

rel_row = null;


// # Output table : 'rel_row'
rel_row_tmp.id = row12.id;
rel_row_tmp.effectivetime = row12.effectiveTime;
rel_row_tmp.active = row12.active;
rel_row_tmp.moduleid = row12.moduleId;
rel_row_tmp.sourceid = row12.sourceId;
rel_row_tmp.destinationid = row12.destinationId;
rel_row_tmp.relationshipgroup = row12.relationshipGroup;
rel_row_tmp.typeid = row12.typeId;
rel_row_tmp.characteristictypeid = row12.characteristicTypeId;
rel_row_tmp.modifierid = row12.modifierId;
rel_row = rel_row_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "rel_row"
if(rel_row != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"rel_row");
					}
					



            row14 = null;
        whetherReject_tDBOutput_4 = false;
                    if(rel_row.id == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, rel_row.id);
}

                    if(rel_row.effectivetime == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, rel_row.effectivetime);
}

                    if(rel_row.active == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(3, rel_row.active);
}

                    if(rel_row.moduleid == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, rel_row.moduleid);
}

                    if(rel_row.sourceid == null) {
pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5, rel_row.sourceid);
}

                    if(rel_row.destinationid == null) {
pstmt_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(6, rel_row.destinationid);
}

                    if(rel_row.relationshipgroup == null) {
pstmt_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(7, rel_row.relationshipgroup);
}

                    if(rel_row.typeid == null) {
pstmt_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(8, rel_row.typeid);
}

                    if(rel_row.characteristictypeid == null) {
pstmt_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(9, rel_row.characteristictypeid);
}

                    if(rel_row.modifierid == null) {
pstmt_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(10, rel_row.modifierid);
}

			
    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
            if(!whetherReject_tDBOutput_4) {
                            row14 = new row14Struct();
                                row14.id = rel_row.id;
                                row14.effectivetime = rel_row.effectivetime;
                                row14.active = rel_row.active;
                                row14.moduleid = rel_row.moduleid;
                                row14.sourceid = rel_row.sourceid;
                                row14.destinationid = rel_row.destinationid;
                                row14.relationshipgroup = rel_row.relationshipgroup;
                                row14.typeid = rel_row.typeid;
                                row14.characteristictypeid = rel_row.characteristictypeid;
                                row14.modifierid = rel_row.modifierid;
            }
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    		if (ne_tDBOutput_4 != null) {
				    			throw(sqle_tDBOutput_4);
				    		}else{
				            	throw(e_tDBOutput_4);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                if ((batchSize_tDBOutput_4 > 0) && (batchSizeCounter_tDBOutput_4 > 0)) {
                try {
                		int countSum_tDBOutput_4 = 0;
                		    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
            	    	
            	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
            	    	
                batchSizeCounter_tDBOutput_4 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_4){
			    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
			    	String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					}else{
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}
			    	
			    		if (ne_tDBOutput_4 != null) {
			    			throw(sqle_tDBOutput_4);
			    		}else{
			            	throw(e_tDBOutput_4);
			            }
			    	
				}
            }
                	conn_tDBOutput_4.commit();
                	
                	commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_4 = new StringBuilder();




   				
	    		if(row14.id != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.effectivetime != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.effectivetime)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.active != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.active)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.moduleid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.moduleid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.sourceid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.sourceid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.destinationid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.destinationid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.relationshipgroup != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.relationshipgroup)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.typeid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.typeid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.characteristictypeid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.characteristictypeid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(row14.modifierid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row14.modifierid)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
                    consoleOut_tLogRow_4.flush();
                    nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "rel_row"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tUnite_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_4";

	

 



/**
 * [tUnite_4 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tFileInputDelimited_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	



            }
            }finally{
                if(!((Object)((String)globalMap.get("tFileList_8_CURRENT_FILEPATH")) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_8!=null){
                		fid_tFileInputDelimited_8.close();
                	}
                }
                if(fid_tFileInputDelimited_8!=null){
                	globalMap.put("tFileInputDelimited_8_NB_LINE", fid_tFileInputDelimited_8.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_8", true);
end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());




/**
 * [tFileInputDelimited_8 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate8", 2, "exec" + NB_ITERATE_tFileInputDelimited_8);
						}				
					




	
	/**
	 * [tFileList_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

 



/**
 * [tFileList_8 process_data_end ] stop
 */
	
	/**
	 * [tFileList_8 end ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

  
    }
  globalMap.put("tFileList_8_NB_FILE", NB_FILEtFileList_8);
  

    if (NB_FILEtFileList_8 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_8);
  
 

 

ok_Hash.put("tFileList_8", true);
end_Hash.put("tFileList_8", System.currentTimeMillis());




/**
 * [tFileList_8 end ] stop
 */
	
	/**
	 * [tUnite_4 end ] start
	 */

	

	
	
	currentComponent="tUnite_4";

	

globalMap.put("tUnite_4_NB_LINE", nb_line_tUnite_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13","row11");
			  	}
			  	
 

ok_Hash.put("tUnite_4", true);
end_Hash.put("tUnite_4", System.currentTimeMillis());




/**
 * [tUnite_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    		if (ne_tDBOutput_4 != null) {
	    			throw(sqle_tDBOutput_4);
	    		}else{
	            	throw(e_tDBOutput_4);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
			
			conn_tDBOutput_4.commit();
			
		
    	conn_tDBOutput_4 .close();
    	
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"rel_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_7 finally ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

 



/**
 * [tFileList_7 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 finally ] stop
 */



	
	/**
	 * [tFileList_8 finally ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

 



/**
 * [tFileList_8 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_8 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 finally ] stop
 */



	
	/**
	 * [tUnite_4 finally ] start
	 */

	

	
	
	currentComponent="tUnite_4";

	

 



/**
 * [tUnite_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_7_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public Object id;

				public Object getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String refsetid;

				public String getRefsetid () {
					return this.refsetid;
				}
				
			    public String referencedcomponentid;

				public String getReferencedcomponentid () {
					return this.referencedcomponentid;
				}
				
			    public String acceptabilityid;

				public String getAcceptabilityid () {
					return this.acceptabilityid;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
						this.id = (Object) dis.readObject();
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.refsetid = readString(dis);
					
					this.referencedcomponentid = readString(dis);
					
					this.acceptabilityid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.id);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.refsetid,dos);
					
					// String
				
						writeString(this.referencedcomponentid,dos);
					
					// String
				
						writeString(this.acceptabilityid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",refsetid="+refsetid);
		sb.append(",referencedcomponentid="+referencedcomponentid);
		sb.append(",acceptabilityid="+acceptabilityid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class lang_rowStruct implements routines.system.IPersistableRow<lang_rowStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object id;

				public Object getId () {
					return this.id;
				}
				
			    public String effectivetime;

				public String getEffectivetime () {
					return this.effectivetime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleid;

				public String getModuleid () {
					return this.moduleid;
				}
				
			    public String refsetid;

				public String getRefsetid () {
					return this.refsetid;
				}
				
			    public String referencedcomponentid;

				public String getReferencedcomponentid () {
					return this.referencedcomponentid;
				}
				
			    public String acceptabilityid;

				public String getAcceptabilityid () {
					return this.acceptabilityid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
						result = prime * result + ((this.effectivetime == null) ? 0 : this.effectivetime.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final lang_rowStruct other = (lang_rowStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					
						if (this.effectivetime == null) {
							if (other.effectivetime != null)
								return false;
						
						} else if (!this.effectivetime.equals(other.effectivetime))
						
							return false;
					

		return true;
    }

	public void copyDataTo(lang_rowStruct other) {

		other.id = this.id;
	            other.effectivetime = this.effectivetime;
	            other.active = this.active;
	            other.moduleid = this.moduleid;
	            other.refsetid = this.refsetid;
	            other.referencedcomponentid = this.referencedcomponentid;
	            other.acceptabilityid = this.acceptabilityid;
	            
	}

	public void copyKeysDataTo(lang_rowStruct other) {

		other.id = this.id;
	            	other.effectivetime = this.effectivetime;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
						this.id = (Object) dis.readObject();
					
					this.effectivetime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleid = readString(dis);
					
					this.refsetid = readString(dis);
					
					this.referencedcomponentid = readString(dis);
					
					this.acceptabilityid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.id);
					
					// String
				
						writeString(this.effectivetime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleid,dos);
					
					// String
				
						writeString(this.refsetid,dos);
					
					// String
				
						writeString(this.referencedcomponentid,dos);
					
					// String
				
						writeString(this.acceptabilityid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",effectivetime="+effectivetime);
		sb.append(",active="+active);
		sb.append(",moduleid="+moduleid);
		sb.append(",refsetid="+refsetid);
		sb.append(",referencedcomponentid="+referencedcomponentid);
		sb.append(",acceptabilityid="+acceptabilityid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(lang_rowStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.effectivetime, other.effectivetime);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectiveTime;

				public String getEffectiveTime () {
					return this.effectiveTime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleId;

				public String getModuleId () {
					return this.moduleId;
				}
				
			    public String refsetId;

				public String getRefsetId () {
					return this.refsetId;
				}
				
			    public String referencedComponentId;

				public String getReferencedComponentId () {
					return this.referencedComponentId;
				}
				
			    public String acceptabilityId;

				public String getAcceptabilityId () {
					return this.acceptabilityId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectiveTime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleId = readString(dis);
					
					this.refsetId = readString(dis);
					
					this.referencedComponentId = readString(dis);
					
					this.acceptabilityId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectiveTime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleId,dos);
					
					// String
				
						writeString(this.refsetId,dos);
					
					// String
				
						writeString(this.referencedComponentId,dos);
					
					// String
				
						writeString(this.acceptabilityId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectiveTime="+effectiveTime);
		sb.append(",active="+active);
		sb.append(",moduleId="+moduleId);
		sb.append(",refsetId="+refsetId);
		sb.append(",referencedComponentId="+referencedComponentId);
		sb.append(",acceptabilityId="+acceptabilityId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectiveTime;

				public String getEffectiveTime () {
					return this.effectiveTime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleId;

				public String getModuleId () {
					return this.moduleId;
				}
				
			    public String refsetId;

				public String getRefsetId () {
					return this.refsetId;
				}
				
			    public String referencedComponentId;

				public String getReferencedComponentId () {
					return this.referencedComponentId;
				}
				
			    public String acceptabilityId;

				public String getAcceptabilityId () {
					return this.acceptabilityId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectiveTime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleId = readString(dis);
					
					this.refsetId = readString(dis);
					
					this.referencedComponentId = readString(dis);
					
					this.acceptabilityId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectiveTime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleId,dos);
					
					// String
				
						writeString(this.refsetId,dos);
					
					// String
				
						writeString(this.referencedComponentId,dos);
					
					// String
				
						writeString(this.acceptabilityId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectiveTime="+effectiveTime);
		sb.append(",active="+active);
		sb.append(",moduleId="+moduleId);
		sb.append(",refsetId="+refsetId);
		sb.append(",referencedComponentId="+referencedComponentId);
		sb.append(",acceptabilityId="+acceptabilityId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_snomed_import = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_snomed_import = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String effectiveTime;

				public String getEffectiveTime () {
					return this.effectiveTime;
				}
				
			    public String active;

				public String getActive () {
					return this.active;
				}
				
			    public String moduleId;

				public String getModuleId () {
					return this.moduleId;
				}
				
			    public String refsetId;

				public String getRefsetId () {
					return this.refsetId;
				}
				
			    public String referencedComponentId;

				public String getReferencedComponentId () {
					return this.referencedComponentId;
				}
				
			    public String acceptabilityId;

				public String getAcceptabilityId () {
					return this.acceptabilityId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_snomed_import.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_snomed_import.length == 0) {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_snomed_import = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_snomed_import, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_snomed_import) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.effectiveTime = readString(dis);
					
					this.active = readString(dis);
					
					this.moduleId = readString(dis);
					
					this.refsetId = readString(dis);
					
					this.referencedComponentId = readString(dis);
					
					this.acceptabilityId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.effectiveTime,dos);
					
					// String
				
						writeString(this.active,dos);
					
					// String
				
						writeString(this.moduleId,dos);
					
					// String
				
						writeString(this.refsetId,dos);
					
					// String
				
						writeString(this.referencedComponentId,dos);
					
					// String
				
						writeString(this.acceptabilityId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",effectiveTime="+effectiveTime);
		sb.append(",active="+active);
		sb.append(",moduleId="+moduleId);
		sb.append(",refsetId="+refsetId);
		sb.append(",referencedComponentId="+referencedComponentId);
		sb.append(",acceptabilityId="+acceptabilityId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();

		row17Struct row17 = new row17Struct();

			row18Struct row18 = new row18Struct();
lang_rowStruct lang_row = new lang_rowStruct();
row16Struct row16 = new row16Struct();






	
	/**
	 * [tLogRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_5", false);
		start_Hash.put("tLogRow_5", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tLogRow_5 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
		java.io.PrintStream consoleOut_tLogRow_5 = null;	

 		StringBuilder strBuffer_tLogRow_5 = null;
		int nb_line_tLogRow_5 = 0;
///////////////////////    			



 



/**
 * [tLogRow_5 begin ] stop
 */



	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"lang_row");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = context.snomed_db_schema;
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("snomedct_langrefset_f");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("snomedct_langrefset_f");
}

int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_5 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name + "?" + context.snomed_db_additionalparams;
    dbUser_tDBOutput_5 = context.snomed_db_user;

	final String decryptedPassword_tDBOutput_5 = context.snomed_db_password; 

    String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

    conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5,dbUser_tDBOutput_5,dbPwd_tDBOutput_5);
	
	resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
        conn_tDBOutput_5.setAutoCommit(false);
        int commitEvery_tDBOutput_5 = 10000;
        int commitCounter_tDBOutput_5 = 0;


   int batchSize_tDBOutput_5 = 10000;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"id\",\"effectivetime\",\"active\",\"moduleid\",\"refsetid\",\"referencedcomponentid\",\"acceptabilityid\") VALUES (?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
lang_rowStruct lang_row_tmp = new lang_rowStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tUnite_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_5", false);
		start_Hash.put("tUnite_5", System.currentTimeMillis());
		
	
	currentComponent="tUnite_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15","row17");
					}
				
		int tos_count_tUnite_5 = 0;
		

int nb_line_tUnite_5 = 0;

 



/**
 * [tUnite_5 begin ] stop
 */
	
	/**
	 * [tFileList_9 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_9 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_9", false);
		start_Hash.put("tFileList_9", System.currentTimeMillis());
		
	
	currentComponent="tFileList_9";

	
		int tos_count_tFileList_9 = 0;
		
	
 
     
    
  String directory_tFileList_9 = context.snomed_clinical_ext_file_path;
  final java.util.List<String> maskList_tFileList_9 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_9 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_9.add("der2_cRefset_LanguageFull-en_INT_*.txt"); 
    maskList_tFileList_9.add("der2_cRefset_LanguageFull-en_GB1000000_*.txt");  
  for (final String filemask_tFileList_9 : maskList_tFileList_9) {
	String filemask_compile_tFileList_9 = filemask_tFileList_9;
	
		filemask_compile_tFileList_9 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_9.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_9 = java.util.regex.Pattern.compile(filemask_compile_tFileList_9, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_9.add(fileNamePattern_tFileList_9);
  }
  int NB_FILEtFileList_9 = 0;

  final boolean case_sensitive_tFileList_9 = false;
    final java.util.List<java.io.File> list_tFileList_9 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_9 = new java.util.HashSet<String>();
	java.io.File file_tFileList_9 = new java.io.File(directory_tFileList_9);
    
		file_tFileList_9.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_9 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_9 : patternList_tFileList_9) {
          	if (fileNamePattern_tFileList_9.matcher(fileName_tFileList_9).matches()){
					if(!filePath_tFileList_9.contains(file.getAbsolutePath())) {
			          list_tFileList_9.add(file);
			          filePath_tFileList_9.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_9);
    
    for (int i_tFileList_9 = 0; i_tFileList_9 < list_tFileList_9.size(); i_tFileList_9++){
      java.io.File files_tFileList_9 = list_tFileList_9.get(i_tFileList_9);
      String fileName_tFileList_9 = files_tFileList_9.getName();
      
      String currentFileName_tFileList_9 = files_tFileList_9.getName(); 
      String currentFilePath_tFileList_9 = files_tFileList_9.getAbsolutePath();
      String currentFileDirectory_tFileList_9 = files_tFileList_9.getParent();
      String currentFileExtension_tFileList_9 = null;
      
      if (files_tFileList_9.getName().contains(".") && files_tFileList_9.isFile()){
        currentFileExtension_tFileList_9 = files_tFileList_9.getName().substring(files_tFileList_9.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_9 = "";
      }
      
      NB_FILEtFileList_9 ++;
      globalMap.put("tFileList_9_CURRENT_FILE", currentFileName_tFileList_9);
      globalMap.put("tFileList_9_CURRENT_FILEPATH", currentFilePath_tFileList_9);
      globalMap.put("tFileList_9_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_9);
      globalMap.put("tFileList_9_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_9);
      globalMap.put("tFileList_9_NB_FILE", NB_FILEtFileList_9);
      
 



/**
 * [tFileList_9 begin ] stop
 */
	
	/**
	 * [tFileList_9 main ] start
	 */

	

	
	
	currentComponent="tFileList_9";

	

 


	tos_count_tFileList_9++;

/**
 * [tFileList_9 main ] stop
 */
	
	/**
	 * [tFileList_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_9";

	

 



/**
 * [tFileList_9 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_9++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("lang_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate9", 1, "exec" + NB_ITERATE_tFileInputDelimited_9);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileInputDelimited_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_9", false);
		start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_9";

	
		int tos_count_tFileInputDelimited_9 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_9 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_9 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = null;
				int limit_tFileInputDelimited_9 = -1;
				try{
					
						Object filename_tFileInputDelimited_9 = (String)globalMap.get("tFileList_9_CURRENT_FILEPATH");
						if(filename_tFileInputDelimited_9 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_9 = 0, random_value_tFileInputDelimited_9 = -1;
			if(footer_value_tFileInputDelimited_9 >0 || random_value_tFileInputDelimited_9 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited((String)globalMap.get("tFileList_9_CURRENT_FILEPATH"), "US-ASCII","\t","\n",true,1,0,
									limit_tFileInputDelimited_9
								,-1, false);
						} catch(java.lang.Exception e) {
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_9!=null && fid_tFileInputDelimited_9.nextRecord()) {
						rowstate_tFileInputDelimited_9.reset();
						
			    						row15 = null;			
												
									boolean whetherReject_tFileInputDelimited_9 = false;
									row15 = new row15Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_9 = 0;
				
					columnIndexWithD_tFileInputDelimited_9 = 0;
					
							row15.id = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 1;
					
							row15.effectiveTime = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 2;
					
							row15.active = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 3;
					
							row15.moduleId = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 4;
					
							row15.refsetId = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 5;
					
							row15.referencedComponentId = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 6;
					
							row15.acceptabilityId = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
				
										
										if(rowstate_tFileInputDelimited_9.getException()!=null) {
											throw rowstate_tFileInputDelimited_9.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_9 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_9 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 


	tos_count_tFileInputDelimited_9++;

/**
 * [tFileInputDelimited_9 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 process_data_begin ] stop
 */
// Start of branch "row15"
if(row15 != null) { 



	
	/**
	 * [tUnite_5 main ] start
	 */

	

	
	
	currentComponent="tUnite_5";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row15");
						}
						
//////////
 

// for output
			row18 = new row18Struct();
								
			row18.id = row15.id;								
			row18.effectiveTime = row15.effectiveTime;								
			row18.active = row15.active;								
			row18.moduleId = row15.moduleId;								
			row18.refsetId = row15.refsetId;								
			row18.referencedComponentId = row15.referencedComponentId;								
			row18.acceptabilityId = row15.acceptabilityId;			

			nb_line_tUnite_5++;

//////////
 


	tos_count_tUnite_5++;

/**
 * [tUnite_5 main ] stop
 */
	
	/**
	 * [tUnite_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_5";

	

 



/**
 * [tUnite_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

lang_row = null;


// # Output table : 'lang_row'
lang_row_tmp.id = row18.id;
lang_row_tmp.effectivetime = row18.effectiveTime;
lang_row_tmp.active = row18.active;
lang_row_tmp.moduleid = row18.moduleId;
lang_row_tmp.refsetid = row18.refsetId;
lang_row_tmp.referencedcomponentid = row18.referencedComponentId;
lang_row_tmp.acceptabilityid = row18.acceptabilityId;
lang_row = lang_row_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "lang_row"
if(lang_row != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lang_row");
					}
					



            row16 = null;
        whetherReject_tDBOutput_5 = false;
                    if(lang_row.id == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_5.setObject(1, lang_row.id, java.sql.Types.OTHER);
}

                    if(lang_row.effectivetime == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(2, lang_row.effectivetime);
}

                    if(lang_row.active == null) {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(3, lang_row.active);
}

                    if(lang_row.moduleid == null) {
pstmt_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(4, lang_row.moduleid);
}

                    if(lang_row.refsetid == null) {
pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(5, lang_row.refsetid);
}

                    if(lang_row.referencedcomponentid == null) {
pstmt_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(6, lang_row.referencedcomponentid);
}

                    if(lang_row.acceptabilityid == null) {
pstmt_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(7, lang_row.acceptabilityid);
}

			
    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
            if(!whetherReject_tDBOutput_5) {
                            row16 = new row16Struct();
                                row16.id = lang_row.id;
                                row16.effectivetime = lang_row.effectivetime;
                                row16.active = lang_row.active;
                                row16.moduleid = lang_row.moduleid;
                                row16.refsetid = lang_row.refsetid;
                                row16.referencedcomponentid = lang_row.referencedcomponentid;
                                row16.acceptabilityid = lang_row.acceptabilityid;
            }
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    		if (ne_tDBOutput_5 != null) {
				    			throw(sqle_tDBOutput_5);
				    		}else{
				            	throw(e_tDBOutput_5);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_5++;
                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
                if ((batchSize_tDBOutput_5 > 0) && (batchSizeCounter_tDBOutput_5 > 0)) {
                try {
                		int countSum_tDBOutput_5 = 0;
                		    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
            	    	
            	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
            	    	
                batchSizeCounter_tDBOutput_5 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_5){
			    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
			    	String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
					}else{
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}
			    	
			    		if (ne_tDBOutput_5 != null) {
			    			throw(sqle_tDBOutput_5);
			    		}else{
			            	throw(e_tDBOutput_5);
			            }
			    	
				}
            }
                	conn_tDBOutput_5.commit();
                	
                	commitCounter_tDBOutput_5=0;
                }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_5 = new StringBuilder();




   				
	    		if(row16.id != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.effectivetime != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.effectivetime)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.active != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.active)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.moduleid != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.moduleid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.refsetid != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.refsetid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.referencedcomponentid != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.referencedcomponentid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.acceptabilityid != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.acceptabilityid)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_5);
                    }
                    consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
                    consoleOut_tLogRow_5.flush();
                    nb_line_tLogRow_5++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "lang_row"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tUnite_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_5";

	

 



/**
 * [tUnite_5 process_data_end ] stop
 */

} // End of branch "row15"




	
	/**
	 * [tFileInputDelimited_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	



            }
            }finally{
                if(!((Object)((String)globalMap.get("tFileList_9_CURRENT_FILEPATH")) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_9!=null){
                		fid_tFileInputDelimited_9.close();
                	}
                }
                if(fid_tFileInputDelimited_9!=null){
                	globalMap.put("tFileInputDelimited_9_NB_LINE", fid_tFileInputDelimited_9.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_9", true);
end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());




/**
 * [tFileInputDelimited_9 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate9", 2, "exec" + NB_ITERATE_tFileInputDelimited_9);
						}				
					




	
	/**
	 * [tFileList_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_9";

	

 



/**
 * [tFileList_9 process_data_end ] stop
 */
	
	/**
	 * [tFileList_9 end ] start
	 */

	

	
	
	currentComponent="tFileList_9";

	

  
    }
  globalMap.put("tFileList_9_NB_FILE", NB_FILEtFileList_9);
  

    if (NB_FILEtFileList_9 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_9);
  
 

 

ok_Hash.put("tFileList_9", true);
end_Hash.put("tFileList_9", System.currentTimeMillis());




/**
 * [tFileList_9 end ] stop
 */
	
	/**
	 * [tFileList_10 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_10 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_10", false);
		start_Hash.put("tFileList_10", System.currentTimeMillis());
		
	
	currentComponent="tFileList_10";

	
		int tos_count_tFileList_10 = 0;
		
	
 
     
    
  String directory_tFileList_10 = context.snomed_drug_ext_file_path;
  final java.util.List<String> maskList_tFileList_10 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_10 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_10.add("der2_cRefset_LanguageFull-en_GB1000001_*.txt");  
  for (final String filemask_tFileList_10 : maskList_tFileList_10) {
	String filemask_compile_tFileList_10 = filemask_tFileList_10;
	
		filemask_compile_tFileList_10 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_10.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_10 = java.util.regex.Pattern.compile(filemask_compile_tFileList_10, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_10.add(fileNamePattern_tFileList_10);
  }
  int NB_FILEtFileList_10 = 0;

  final boolean case_sensitive_tFileList_10 = false;
    final java.util.List<java.io.File> list_tFileList_10 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_10 = new java.util.HashSet<String>();
	java.io.File file_tFileList_10 = new java.io.File(directory_tFileList_10);
    
		file_tFileList_10.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_10 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_10 : patternList_tFileList_10) {
          	if (fileNamePattern_tFileList_10.matcher(fileName_tFileList_10).matches()){
					if(!filePath_tFileList_10.contains(file.getAbsolutePath())) {
			          list_tFileList_10.add(file);
			          filePath_tFileList_10.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_10);
    
    for (int i_tFileList_10 = 0; i_tFileList_10 < list_tFileList_10.size(); i_tFileList_10++){
      java.io.File files_tFileList_10 = list_tFileList_10.get(i_tFileList_10);
      String fileName_tFileList_10 = files_tFileList_10.getName();
      
      String currentFileName_tFileList_10 = files_tFileList_10.getName(); 
      String currentFilePath_tFileList_10 = files_tFileList_10.getAbsolutePath();
      String currentFileDirectory_tFileList_10 = files_tFileList_10.getParent();
      String currentFileExtension_tFileList_10 = null;
      
      if (files_tFileList_10.getName().contains(".") && files_tFileList_10.isFile()){
        currentFileExtension_tFileList_10 = files_tFileList_10.getName().substring(files_tFileList_10.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_10 = "";
      }
      
      NB_FILEtFileList_10 ++;
      globalMap.put("tFileList_10_CURRENT_FILE", currentFileName_tFileList_10);
      globalMap.put("tFileList_10_CURRENT_FILEPATH", currentFilePath_tFileList_10);
      globalMap.put("tFileList_10_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_10);
      globalMap.put("tFileList_10_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_10);
      globalMap.put("tFileList_10_NB_FILE", NB_FILEtFileList_10);
      
 



/**
 * [tFileList_10 begin ] stop
 */
	
	/**
	 * [tFileList_10 main ] start
	 */

	

	
	
	currentComponent="tFileList_10";

	

 


	tos_count_tFileList_10++;

/**
 * [tFileList_10 main ] stop
 */
	
	/**
	 * [tFileList_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_10";

	

 



/**
 * [tFileList_10 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_10++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("lang_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate10", 1, "exec" + NB_ITERATE_tFileInputDelimited_10);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileInputDelimited_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_10", false);
		start_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_10";

	
		int tos_count_tFileInputDelimited_10 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_10 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_10 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10 = null;
				int limit_tFileInputDelimited_10 = -1;
				try{
					
						Object filename_tFileInputDelimited_10 = (String)globalMap.get("tFileList_10_CURRENT_FILEPATH");
						if(filename_tFileInputDelimited_10 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_10 = 0, random_value_tFileInputDelimited_10 = -1;
			if(footer_value_tFileInputDelimited_10 >0 || random_value_tFileInputDelimited_10 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_10 = new org.talend.fileprocess.FileInputDelimited((String)globalMap.get("tFileList_10_CURRENT_FILEPATH"), "US-ASCII","\t","\n",true,1,0,
									limit_tFileInputDelimited_10
								,-1, false);
						} catch(java.lang.Exception e) {
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_10!=null && fid_tFileInputDelimited_10.nextRecord()) {
						rowstate_tFileInputDelimited_10.reset();
						
			    						row17 = null;			
												
									boolean whetherReject_tFileInputDelimited_10 = false;
									row17 = new row17Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_10 = 0;
				
					columnIndexWithD_tFileInputDelimited_10 = 0;
					
							row17.id = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 1;
					
							row17.effectiveTime = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 2;
					
							row17.active = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 3;
					
							row17.moduleId = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 4;
					
							row17.refsetId = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 5;
					
							row17.referencedComponentId = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 6;
					
							row17.acceptabilityId = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
				
										
										if(rowstate_tFileInputDelimited_10.getException()!=null) {
											throw rowstate_tFileInputDelimited_10.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_10 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_10 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 


	tos_count_tFileInputDelimited_10++;

/**
 * [tFileInputDelimited_10 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tUnite_5 main ] start
	 */

	

	
	
	currentComponent="tUnite_5";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row17");
						}
						
//////////
 

// for output
			row18 = new row18Struct();
								
			row18.id = row17.id;								
			row18.effectiveTime = row17.effectiveTime;								
			row18.active = row17.active;								
			row18.moduleId = row17.moduleId;								
			row18.refsetId = row17.refsetId;								
			row18.referencedComponentId = row17.referencedComponentId;								
			row18.acceptabilityId = row17.acceptabilityId;			

			nb_line_tUnite_5++;

//////////
 


	tos_count_tUnite_5++;

/**
 * [tUnite_5 main ] stop
 */
	
	/**
	 * [tUnite_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_5";

	

 



/**
 * [tUnite_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

lang_row = null;


// # Output table : 'lang_row'
lang_row_tmp.id = row18.id;
lang_row_tmp.effectivetime = row18.effectiveTime;
lang_row_tmp.active = row18.active;
lang_row_tmp.moduleid = row18.moduleId;
lang_row_tmp.refsetid = row18.refsetId;
lang_row_tmp.referencedcomponentid = row18.referencedComponentId;
lang_row_tmp.acceptabilityid = row18.acceptabilityId;
lang_row = lang_row_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "lang_row"
if(lang_row != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"lang_row");
					}
					



            row16 = null;
        whetherReject_tDBOutput_5 = false;
                    if(lang_row.id == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.OTHER);
} else {pstmt_tDBOutput_5.setObject(1, lang_row.id, java.sql.Types.OTHER);
}

                    if(lang_row.effectivetime == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(2, lang_row.effectivetime);
}

                    if(lang_row.active == null) {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(3, lang_row.active);
}

                    if(lang_row.moduleid == null) {
pstmt_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(4, lang_row.moduleid);
}

                    if(lang_row.refsetid == null) {
pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(5, lang_row.refsetid);
}

                    if(lang_row.referencedcomponentid == null) {
pstmt_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(6, lang_row.referencedcomponentid);
}

                    if(lang_row.acceptabilityid == null) {
pstmt_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(7, lang_row.acceptabilityid);
}

			
    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
            if(!whetherReject_tDBOutput_5) {
                            row16 = new row16Struct();
                                row16.id = lang_row.id;
                                row16.effectivetime = lang_row.effectivetime;
                                row16.active = lang_row.active;
                                row16.moduleid = lang_row.moduleid;
                                row16.refsetid = lang_row.refsetid;
                                row16.referencedcomponentid = lang_row.referencedcomponentid;
                                row16.acceptabilityid = lang_row.acceptabilityid;
            }
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    		if (ne_tDBOutput_5 != null) {
				    			throw(sqle_tDBOutput_5);
				    		}else{
				            	throw(e_tDBOutput_5);
				            }
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_5++;
                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
                if ((batchSize_tDBOutput_5 > 0) && (batchSizeCounter_tDBOutput_5 > 0)) {
                try {
                		int countSum_tDBOutput_5 = 0;
                		    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
            	    	
            	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
            	    	
                batchSizeCounter_tDBOutput_5 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_5){
			    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
			    	String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
					}else{
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}
			    	
			    		if (ne_tDBOutput_5 != null) {
			    			throw(sqle_tDBOutput_5);
			    		}else{
			            	throw(e_tDBOutput_5);
			            }
			    	
				}
            }
                	conn_tDBOutput_5.commit();
                	
                	commitCounter_tDBOutput_5=0;
                }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_5 = new StringBuilder();




   				
	    		if(row16.id != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.effectivetime != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.effectivetime)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.active != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.active)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.moduleid != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.moduleid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.refsetid != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.refsetid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.referencedcomponentid != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.referencedcomponentid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_5.append("|");
    			


   				
	    		if(row16.acceptabilityid != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row16.acceptabilityid)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_5);
                    }
                    consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
                    consoleOut_tLogRow_5.flush();
                    nb_line_tLogRow_5++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "lang_row"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tUnite_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_5";

	

 



/**
 * [tUnite_5 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tFileInputDelimited_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	



            }
            }finally{
                if(!((Object)((String)globalMap.get("tFileList_10_CURRENT_FILEPATH")) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_10!=null){
                		fid_tFileInputDelimited_10.close();
                	}
                }
                if(fid_tFileInputDelimited_10!=null){
                	globalMap.put("tFileInputDelimited_10_NB_LINE", fid_tFileInputDelimited_10.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_10", true);
end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());




/**
 * [tFileInputDelimited_10 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate10", 2, "exec" + NB_ITERATE_tFileInputDelimited_10);
						}				
					




	
	/**
	 * [tFileList_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_10";

	

 



/**
 * [tFileList_10 process_data_end ] stop
 */
	
	/**
	 * [tFileList_10 end ] start
	 */

	

	
	
	currentComponent="tFileList_10";

	

  
    }
  globalMap.put("tFileList_10_NB_FILE", NB_FILEtFileList_10);
  

    if (NB_FILEtFileList_10 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_10);
  
 

 

ok_Hash.put("tFileList_10", true);
end_Hash.put("tFileList_10", System.currentTimeMillis());




/**
 * [tFileList_10 end ] stop
 */
	
	/**
	 * [tUnite_5 end ] start
	 */

	

	
	
	currentComponent="tUnite_5";

	

globalMap.put("tUnite_5_NB_LINE", nb_line_tUnite_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15","row17");
			  	}
			  	
 

ok_Hash.put("tUnite_5", true);
end_Hash.put("tUnite_5", System.currentTimeMillis());




/**
 * [tUnite_5 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    		if (ne_tDBOutput_5 != null) {
	    			throw(sqle_tDBOutput_5);
	    		}else{
	            	throw(e_tDBOutput_5);
	            }
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);
			
			conn_tDBOutput_5.commit();
			
		
    	conn_tDBOutput_5 .close();
    	
    	resourceMap.put("finish_tDBOutput_5", true);
    	

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"lang_row");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */

	
	/**
	 * [tLogRow_5 end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	


//////
//////
globalMap.put("tLogRow_5_NB_LINE",nb_line_tLogRow_5);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tLogRow_5", true);
end_Hash.put("tLogRow_5", System.currentTimeMillis());




/**
 * [tLogRow_5 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_9 finally ] start
	 */

	

	
	
	currentComponent="tFileList_9";

	

 



/**
 * [tFileList_9 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_9 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 finally ] stop
 */



	
	/**
	 * [tFileList_10 finally ] start
	 */

	

	
	
	currentComponent="tFileList_10";

	

 



/**
 * [tFileList_10 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_10 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 finally ] stop
 */



	
	/**
	 * [tUnite_5 finally ] start
	 */

	

	
	
	currentComponent="tUnite_5";

	

 



/**
 * [tUnite_5 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_5") == null){
            java.sql.Connection ctn_tDBOutput_5 = null;
            if((ctn_tDBOutput_5 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_5")) != null){
                try {
                    ctn_tDBOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_5) {
                    String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :" + sqlEx_tDBOutput_5.getMessage();
                    System.err.println(errorMessage_tDBOutput_5);
                }
            }
        }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */

	
	/**
	 * [tLogRow_5 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_9_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_2", false);
		start_Hash.put("tDBRow_2", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_2";

	
		int tos_count_tDBRow_2 = 0;
		

	java.sql.Connection conn_tDBRow_2 = null;
	String query_tDBRow_2 = "";
	boolean whetherReject_tDBRow_2 = false;
			String driverClass_tDBRow_2 = "org.postgresql.Driver";
		    java.lang.Class jdbcclazz_tDBRow_2 = java.lang.Class.forName(driverClass_tDBRow_2);
		
				String url_tDBRow_2 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name + "?" + context.snomed_db_additionalparams;
		
					String dbUser_tDBRow_2 = context.snomed_db_user;
	        
            		
            		
            		
	final String decryptedPassword_tDBRow_2 = context.snomed_db_password; 
        		   	
        	        String dbPwd_tDBRow_2 = decryptedPassword_tDBRow_2;
	        
					
			conn_tDBRow_2 = java.sql.DriverManager.getConnection(url_tDBRow_2,dbUser_tDBRow_2,dbPwd_tDBRow_2);
		
    resourceMap.put("conn_tDBRow_2", conn_tDBRow_2);
					if(conn_tDBRow_2.getAutoCommit()) {
						
				conn_tDBRow_2.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_2 = 10000;
					int commitCounter_tDBRow_2 = 0;
				
        java.sql.Statement stmt_tDBRow_2 = conn_tDBRow_2.createStatement();
        resourceMap.put("stmt_tDBRow_2", stmt_tDBRow_2);


 



/**
 * [tDBRow_2 begin ] stop
 */
	
	/**
	 * [tDBRow_2 main ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

query_tDBRow_2 = "TRUNCATE TABLE \""+context.snomed_db_name+"\".\""+context.snomed_db_schema+"\".\"snomedct_concept_f\"";
whetherReject_tDBRow_2 = false;
globalMap.put("tDBRow_2_QUERY",query_tDBRow_2);
try {
		stmt_tDBRow_2.execute(query_tDBRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_2 = true;
		
			throw(e);
			
	}
	
	if(!whetherReject_tDBRow_2) {
		
	}
	
		commitCounter_tDBRow_2++;
		if(commitEvery_tDBRow_2 <= commitCounter_tDBRow_2) {
			
			conn_tDBRow_2.commit();
			
			commitCounter_tDBRow_2=0;
		}
		

 


	tos_count_tDBRow_2++;

/**
 * [tDBRow_2 main ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_2 end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

	
        stmt_tDBRow_2.close();
        resourceMap.remove("stmt_tDBRow_2");
    resourceMap.put("statementClosed_tDBRow_2", true);
		if(commitEvery_tDBRow_2>commitCounter_tDBRow_2){

			
			conn_tDBRow_2.commit();
			
	
			commitCounter_tDBRow_2=0;
	
		}
			conn_tDBRow_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tDBRow_2", true);
 

ok_Hash.put("tDBRow_2", true);
end_Hash.put("tDBRow_2", System.currentTimeMillis());




/**
 * [tDBRow_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileList_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_2 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_2") == null) {
            java.sql.Statement stmtToClose_tDBRow_2 = null;
            if ((stmtToClose_tDBRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_2")) != null) {
                stmtToClose_tDBRow_2.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_2") == null){
            java.sql.Connection ctn_tDBRow_2 = null;
            if((ctn_tDBRow_2 = (java.sql.Connection)resourceMap.get("conn_tDBRow_2")) != null){
                try {
                    ctn_tDBRow_2.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_2) {
                    String errorMessage_tDBRow_2 = "failed to close the connection in tDBRow_2 :" + sqlEx_tDBRow_2.getMessage();
                    System.err.println(errorMessage_tDBRow_2);
                }
            }
        }
    }
 



/**
 * [tDBRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_3", false);
		start_Hash.put("tDBRow_3", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_3";

	
		int tos_count_tDBRow_3 = 0;
		

	java.sql.Connection conn_tDBRow_3 = null;
	String query_tDBRow_3 = "";
	boolean whetherReject_tDBRow_3 = false;
			String driverClass_tDBRow_3 = "org.postgresql.Driver";
		    java.lang.Class jdbcclazz_tDBRow_3 = java.lang.Class.forName(driverClass_tDBRow_3);
		
				String url_tDBRow_3 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name + "?" + context.snomed_db_additionalparams;
		
					String dbUser_tDBRow_3 = context.snomed_db_user;
	        
            		
            		
            		
	final String decryptedPassword_tDBRow_3 = context.snomed_db_password; 
        		   	
        	        String dbPwd_tDBRow_3 = decryptedPassword_tDBRow_3;
	        
					
			conn_tDBRow_3 = java.sql.DriverManager.getConnection(url_tDBRow_3,dbUser_tDBRow_3,dbPwd_tDBRow_3);
		
    resourceMap.put("conn_tDBRow_3", conn_tDBRow_3);
					if(conn_tDBRow_3.getAutoCommit()) {
						
				conn_tDBRow_3.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_3 = 10000;
					int commitCounter_tDBRow_3 = 0;
				
        java.sql.Statement stmt_tDBRow_3 = conn_tDBRow_3.createStatement();
        resourceMap.put("stmt_tDBRow_3", stmt_tDBRow_3);


 



/**
 * [tDBRow_3 begin ] stop
 */
	
	/**
	 * [tDBRow_3 main ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

query_tDBRow_3 = "truncate table \""+context.snomed_db_name+"\".\""+context.snomed_db_schema+"\".\"snomedct_simplerefset_f\"";
whetherReject_tDBRow_3 = false;
globalMap.put("tDBRow_3_QUERY",query_tDBRow_3);
try {
		stmt_tDBRow_3.execute(query_tDBRow_3);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_3 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_3) {
		
	}
	
		commitCounter_tDBRow_3++;
		if(commitEvery_tDBRow_3 <= commitCounter_tDBRow_3) {
			
			conn_tDBRow_3.commit();
			
			commitCounter_tDBRow_3=0;
		}
		

 


	tos_count_tDBRow_3++;

/**
 * [tDBRow_3 main ] stop
 */
	
	/**
	 * [tDBRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

 



/**
 * [tDBRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

 



/**
 * [tDBRow_3 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_3 end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

	
        stmt_tDBRow_3.close();
        resourceMap.remove("stmt_tDBRow_3");
    resourceMap.put("statementClosed_tDBRow_3", true);
		if(commitEvery_tDBRow_3>commitCounter_tDBRow_3){

			
			conn_tDBRow_3.commit();
			
	
			commitCounter_tDBRow_3=0;
	
		}
			conn_tDBRow_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tDBRow_3", true);
 

ok_Hash.put("tDBRow_3", true);
end_Hash.put("tDBRow_3", System.currentTimeMillis());




/**
 * [tDBRow_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFileList_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_3 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_3") == null) {
            java.sql.Statement stmtToClose_tDBRow_3 = null;
            if ((stmtToClose_tDBRow_3 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_3")) != null) {
                stmtToClose_tDBRow_3.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_3") == null){
            java.sql.Connection ctn_tDBRow_3 = null;
            if((ctn_tDBRow_3 = (java.sql.Connection)resourceMap.get("conn_tDBRow_3")) != null){
                try {
                    ctn_tDBRow_3.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_3) {
                    String errorMessage_tDBRow_3 = "failed to close the connection in tDBRow_3 :" + sqlEx_tDBRow_3.getMessage();
                    System.err.println(errorMessage_tDBRow_3);
                }
            }
        }
    }
 



/**
 * [tDBRow_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = context.snomed_db_additionalparams;
            String url_tDBConnection_1 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name;
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = context.snomed_db_user;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.snomed_db_password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1",context.snomed_db_schema);

	globalMap.put("conn_" + "tDBConnection_1",conn_tDBConnection_1);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBRow_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";

	
		int tos_count_tDBConnection_2 = 0;
		


	
            String dbProperties_tDBConnection_2 = context.snomed_db_additionalparams;
            String url_tDBConnection_2 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name;
            
            if(dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
                url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
            }
	String dbUser_tDBConnection_2 = context.snomed_db_user;
	
	
		
	final String decryptedPassword_tDBConnection_2 = context.snomed_db_password; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_2.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
        if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
                java.sql.DriverManager.registerDriver(d_tDBConnection_2);
            } catch (java.lang.Exception e_tDBConnection_2) {
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_2 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_2",context.snomed_db_schema);

	globalMap.put("conn_" + "tDBConnection_2",conn_tDBConnection_2);

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBRow_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
			String driverClass_tDBRow_1 = "org.postgresql.Driver";
		    java.lang.Class jdbcclazz_tDBRow_1 = java.lang.Class.forName(driverClass_tDBRow_1);
		
				String url_tDBRow_1 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name + "?" + context.snomed_db_additionalparams;
		
					String dbUser_tDBRow_1 = context.snomed_db_user;
	        
            		
            		
            		
	final String decryptedPassword_tDBRow_1 = context.snomed_db_password; 
        		   	
        	        String dbPwd_tDBRow_1 = decryptedPassword_tDBRow_1;
	        
					
			conn_tDBRow_1 = java.sql.DriverManager.getConnection(url_tDBRow_1,dbUser_tDBRow_1,dbPwd_tDBRow_1);
		
    resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
					if(conn_tDBRow_1.getAutoCommit()) {
						
				conn_tDBRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_1 = 10000;
					int commitCounter_tDBRow_1 = 0;
				
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);


 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

query_tDBRow_1 = "TRUNCATE TABLE \""+context.snomed_db_name+"\".\""+context.snomed_db_schema+"\".\"snomedct_description_f\"";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
	}
	
		commitCounter_tDBRow_1++;
		if(commitEvery_tDBRow_1 <= commitCounter_tDBRow_1) {
			
			conn_tDBRow_1.commit();
			
			commitCounter_tDBRow_1=0;
		}
		

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

	
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
		if(commitEvery_tDBRow_1>commitCounter_tDBRow_1){

			
			conn_tDBRow_1.commit();
			
	
			commitCounter_tDBRow_1=0;
	
		}
			conn_tDBRow_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFileList_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_1") == null){
            java.sql.Connection ctn_tDBRow_1 = null;
            if((ctn_tDBRow_1 = (java.sql.Connection)resourceMap.get("conn_tDBRow_1")) != null){
                try {
                    ctn_tDBRow_1.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_1) {
                    String errorMessage_tDBRow_1 = "failed to close the connection in tDBRow_1 :" + sqlEx_tDBRow_1.getMessage();
                    System.err.println(errorMessage_tDBRow_1);
                }
            }
        }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_3", false);
		start_Hash.put("tDBConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_3";

	
		int tos_count_tDBConnection_3 = 0;
		


	
            String dbProperties_tDBConnection_3 = context.snomed_db_additionalparams;
            String url_tDBConnection_3 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name;
            
            if(dbProperties_tDBConnection_3 != null && !"".equals(dbProperties_tDBConnection_3.trim())) {
                url_tDBConnection_3 = url_tDBConnection_3 + "?" + dbProperties_tDBConnection_3;
            }
	String dbUser_tDBConnection_3 = context.snomed_db_user;
	
	
		
	final String decryptedPassword_tDBConnection_3 = context.snomed_db_password; 
		String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;
	
	
	java.sql.Connection conn_tDBConnection_3 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_3 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_3 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_3.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_3 = drivers_tDBConnection_3.nextElement();
        if (redShiftDriverNames_tDBConnection_3.contains(d_tDBConnection_3.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_3);
                java.sql.DriverManager.registerDriver(d_tDBConnection_3);
            } catch (java.lang.Exception e_tDBConnection_3) {
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_3 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_3 = java.lang.Class.forName(driverClass_tDBConnection_3);
			globalMap.put("driverClass_tDBConnection_3", driverClass_tDBConnection_3);
		
			conn_tDBConnection_3 = java.sql.DriverManager.getConnection(url_tDBConnection_3,dbUser_tDBConnection_3,dbPwd_tDBConnection_3);

		globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
	if (null != conn_tDBConnection_3) {
		
			conn_tDBConnection_3.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_3",context.snomed_db_schema);

	globalMap.put("conn_" + "tDBConnection_3",conn_tDBConnection_3);

 



/**
 * [tDBConnection_3 begin ] stop
 */
	
	/**
	 * [tDBConnection_3 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 


	tos_count_tDBConnection_3++;

/**
 * [tDBConnection_3 main ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 



/**
 * [tDBConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 



/**
 * [tDBConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_3 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 

ok_Hash.put("tDBConnection_3", true);
end_Hash.put("tDBConnection_3", System.currentTimeMillis());




/**
 * [tDBConnection_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tDBRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 



/**
 * [tDBConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_4", false);
		start_Hash.put("tDBRow_4", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_4";

	
		int tos_count_tDBRow_4 = 0;
		

	java.sql.Connection conn_tDBRow_4 = null;
	String query_tDBRow_4 = "";
	boolean whetherReject_tDBRow_4 = false;
			String driverClass_tDBRow_4 = "org.postgresql.Driver";
		    java.lang.Class jdbcclazz_tDBRow_4 = java.lang.Class.forName(driverClass_tDBRow_4);
		
				String url_tDBRow_4 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name + "?" + context.snomed_db_additionalparams;
		
					String dbUser_tDBRow_4 = context.snomed_db_user;
	        
            		
            		
            		
	final String decryptedPassword_tDBRow_4 = context.snomed_db_password; 
        		   	
        	        String dbPwd_tDBRow_4 = decryptedPassword_tDBRow_4;
	        
					
			conn_tDBRow_4 = java.sql.DriverManager.getConnection(url_tDBRow_4,dbUser_tDBRow_4,dbPwd_tDBRow_4);
		
    resourceMap.put("conn_tDBRow_4", conn_tDBRow_4);
					if(conn_tDBRow_4.getAutoCommit()) {
						
				conn_tDBRow_4.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_4 = 10000;
					int commitCounter_tDBRow_4 = 0;
				
        java.sql.Statement stmt_tDBRow_4 = conn_tDBRow_4.createStatement();
        resourceMap.put("stmt_tDBRow_4", stmt_tDBRow_4);


 



/**
 * [tDBRow_4 begin ] stop
 */
	
	/**
	 * [tDBRow_4 main ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

query_tDBRow_4 = "TRUNCATE TABLE \""+context.snomed_db_name+"\".\""+context.snomed_db_schema+"\".\"snomedct_relationship_f\"";
whetherReject_tDBRow_4 = false;
globalMap.put("tDBRow_4_QUERY",query_tDBRow_4);
try {
		stmt_tDBRow_4.execute(query_tDBRow_4);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_4 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_4) {
		
	}
	
		commitCounter_tDBRow_4++;
		if(commitEvery_tDBRow_4 <= commitCounter_tDBRow_4) {
			
			conn_tDBRow_4.commit();
			
			commitCounter_tDBRow_4=0;
		}
		

 


	tos_count_tDBRow_4++;

/**
 * [tDBRow_4 main ] stop
 */
	
	/**
	 * [tDBRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

 



/**
 * [tDBRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

 



/**
 * [tDBRow_4 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_4 end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

	
        stmt_tDBRow_4.close();
        resourceMap.remove("stmt_tDBRow_4");
    resourceMap.put("statementClosed_tDBRow_4", true);
		if(commitEvery_tDBRow_4>commitCounter_tDBRow_4){

			
			conn_tDBRow_4.commit();
			
	
			commitCounter_tDBRow_4=0;
	
		}
			conn_tDBRow_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tDBRow_4", true);
 

ok_Hash.put("tDBRow_4", true);
end_Hash.put("tDBRow_4", System.currentTimeMillis());




/**
 * [tDBRow_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tFileList_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_4 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_4") == null) {
            java.sql.Statement stmtToClose_tDBRow_4 = null;
            if ((stmtToClose_tDBRow_4 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_4")) != null) {
                stmtToClose_tDBRow_4.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_4") == null){
            java.sql.Connection ctn_tDBRow_4 = null;
            if((ctn_tDBRow_4 = (java.sql.Connection)resourceMap.get("conn_tDBRow_4")) != null){
                try {
                    ctn_tDBRow_4.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_4) {
                    String errorMessage_tDBRow_4 = "failed to close the connection in tDBRow_4 :" + sqlEx_tDBRow_4.getMessage();
                    System.err.println(errorMessage_tDBRow_4);
                }
            }
        }
    }
 



/**
 * [tDBRow_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_4", false);
		start_Hash.put("tDBConnection_4", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_4";

	
		int tos_count_tDBConnection_4 = 0;
		


	
            String dbProperties_tDBConnection_4 = context.snomed_db_additionalparams;
            String url_tDBConnection_4 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name;
            
            if(dbProperties_tDBConnection_4 != null && !"".equals(dbProperties_tDBConnection_4.trim())) {
                url_tDBConnection_4 = url_tDBConnection_4 + "?" + dbProperties_tDBConnection_4;
            }
	String dbUser_tDBConnection_4 = context.snomed_db_user;
	
	
		
	final String decryptedPassword_tDBConnection_4 = context.snomed_db_password; 
		String dbPwd_tDBConnection_4 = decryptedPassword_tDBConnection_4;
	
	
	java.sql.Connection conn_tDBConnection_4 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_4 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_4 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_4.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_4 = drivers_tDBConnection_4.nextElement();
        if (redShiftDriverNames_tDBConnection_4.contains(d_tDBConnection_4.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_4);
                java.sql.DriverManager.registerDriver(d_tDBConnection_4);
            } catch (java.lang.Exception e_tDBConnection_4) {
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_4 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_4 = java.lang.Class.forName(driverClass_tDBConnection_4);
			globalMap.put("driverClass_tDBConnection_4", driverClass_tDBConnection_4);
		
			conn_tDBConnection_4 = java.sql.DriverManager.getConnection(url_tDBConnection_4,dbUser_tDBConnection_4,dbPwd_tDBConnection_4);

		globalMap.put("conn_tDBConnection_4", conn_tDBConnection_4);
	if (null != conn_tDBConnection_4) {
		
			conn_tDBConnection_4.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_4",context.snomed_db_schema);

	globalMap.put("conn_" + "tDBConnection_4",conn_tDBConnection_4);

 



/**
 * [tDBConnection_4 begin ] stop
 */
	
	/**
	 * [tDBConnection_4 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_4";

	

 


	tos_count_tDBConnection_4++;

/**
 * [tDBConnection_4 main ] stop
 */
	
	/**
	 * [tDBConnection_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_4";

	

 



/**
 * [tDBConnection_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_4";

	

 



/**
 * [tDBConnection_4 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_4 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_4";

	

 

ok_Hash.put("tDBConnection_4", true);
end_Hash.put("tDBConnection_4", System.currentTimeMillis());




/**
 * [tDBConnection_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tDBRow_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_4 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_4";

	

 



/**
 * [tDBConnection_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_4_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_5", false);
		start_Hash.put("tDBRow_5", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_5";

	
		int tos_count_tDBRow_5 = 0;
		

	java.sql.Connection conn_tDBRow_5 = null;
	String query_tDBRow_5 = "";
	boolean whetherReject_tDBRow_5 = false;
			String driverClass_tDBRow_5 = "org.postgresql.Driver";
		    java.lang.Class jdbcclazz_tDBRow_5 = java.lang.Class.forName(driverClass_tDBRow_5);
		
				String url_tDBRow_5 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name + "?" + context.snomed_db_additionalparams;
		
					String dbUser_tDBRow_5 = context.snomed_db_user;
	        
            		
            		
            		
	final String decryptedPassword_tDBRow_5 = context.snomed_db_password; 
        		   	
        	        String dbPwd_tDBRow_5 = decryptedPassword_tDBRow_5;
	        
					
			conn_tDBRow_5 = java.sql.DriverManager.getConnection(url_tDBRow_5,dbUser_tDBRow_5,dbPwd_tDBRow_5);
		
    resourceMap.put("conn_tDBRow_5", conn_tDBRow_5);
					if(conn_tDBRow_5.getAutoCommit()) {
						
				conn_tDBRow_5.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_5 = 10000;
					int commitCounter_tDBRow_5 = 0;
				
        java.sql.Statement stmt_tDBRow_5 = conn_tDBRow_5.createStatement();
        resourceMap.put("stmt_tDBRow_5", stmt_tDBRow_5);


 



/**
 * [tDBRow_5 begin ] stop
 */
	
	/**
	 * [tDBRow_5 main ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

query_tDBRow_5 = "TRUNCATE TABLE \""+context.snomed_db_name+"\".\""+context.snomed_db_schema+"\".\"snomedct_langrefset_f\"";
whetherReject_tDBRow_5 = false;
globalMap.put("tDBRow_5_QUERY",query_tDBRow_5);
try {
		stmt_tDBRow_5.execute(query_tDBRow_5);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_5 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_5) {
		
	}
	
		commitCounter_tDBRow_5++;
		if(commitEvery_tDBRow_5 <= commitCounter_tDBRow_5) {
			
			conn_tDBRow_5.commit();
			
			commitCounter_tDBRow_5=0;
		}
		

 


	tos_count_tDBRow_5++;

/**
 * [tDBRow_5 main ] stop
 */
	
	/**
	 * [tDBRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

 



/**
 * [tDBRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

 



/**
 * [tDBRow_5 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_5 end ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

	
        stmt_tDBRow_5.close();
        resourceMap.remove("stmt_tDBRow_5");
    resourceMap.put("statementClosed_tDBRow_5", true);
		if(commitEvery_tDBRow_5>commitCounter_tDBRow_5){

			
			conn_tDBRow_5.commit();
			
	
			commitCounter_tDBRow_5=0;
	
		}
			conn_tDBRow_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tDBRow_5", true);
 

ok_Hash.put("tDBRow_5", true);
end_Hash.put("tDBRow_5", System.currentTimeMillis());




/**
 * [tDBRow_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tFileList_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_5 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_5") == null) {
            java.sql.Statement stmtToClose_tDBRow_5 = null;
            if ((stmtToClose_tDBRow_5 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_5")) != null) {
                stmtToClose_tDBRow_5.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_5") == null){
            java.sql.Connection ctn_tDBRow_5 = null;
            if((ctn_tDBRow_5 = (java.sql.Connection)resourceMap.get("conn_tDBRow_5")) != null){
                try {
                    ctn_tDBRow_5.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_5) {
                    String errorMessage_tDBRow_5 = "failed to close the connection in tDBRow_5 :" + sqlEx_tDBRow_5.getMessage();
                    System.err.println(errorMessage_tDBRow_5);
                }
            }
        }
    }
 



/**
 * [tDBRow_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_5", false);
		start_Hash.put("tDBConnection_5", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_5";

	
		int tos_count_tDBConnection_5 = 0;
		


	
            String dbProperties_tDBConnection_5 = context.snomed_db_additionalparams;
            String url_tDBConnection_5 = "jdbc:postgresql://"+context.snomed_db_host+":"+context.snomed_db_port+"/"+context.snomed_db_name;
            
            if(dbProperties_tDBConnection_5 != null && !"".equals(dbProperties_tDBConnection_5.trim())) {
                url_tDBConnection_5 = url_tDBConnection_5 + "?" + dbProperties_tDBConnection_5;
            }
	String dbUser_tDBConnection_5 = context.snomed_db_user;
	
	
		
	final String decryptedPassword_tDBConnection_5 = context.snomed_db_password; 
		String dbPwd_tDBConnection_5 = decryptedPassword_tDBConnection_5;
	
	
	java.sql.Connection conn_tDBConnection_5 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_5 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_5 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_5.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_5 = drivers_tDBConnection_5.nextElement();
        if (redShiftDriverNames_tDBConnection_5.contains(d_tDBConnection_5.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_5);
                java.sql.DriverManager.registerDriver(d_tDBConnection_5);
            } catch (java.lang.Exception e_tDBConnection_5) {
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_5 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_5 = java.lang.Class.forName(driverClass_tDBConnection_5);
			globalMap.put("driverClass_tDBConnection_5", driverClass_tDBConnection_5);
		
			conn_tDBConnection_5 = java.sql.DriverManager.getConnection(url_tDBConnection_5,dbUser_tDBConnection_5,dbPwd_tDBConnection_5);

		globalMap.put("conn_tDBConnection_5", conn_tDBConnection_5);
	if (null != conn_tDBConnection_5) {
		
			conn_tDBConnection_5.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_5",context.snomed_db_schema);

	globalMap.put("conn_" + "tDBConnection_5",conn_tDBConnection_5);

 



/**
 * [tDBConnection_5 begin ] stop
 */
	
	/**
	 * [tDBConnection_5 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_5";

	

 


	tos_count_tDBConnection_5++;

/**
 * [tDBConnection_5 main ] stop
 */
	
	/**
	 * [tDBConnection_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_5";

	

 



/**
 * [tDBConnection_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_5";

	

 



/**
 * [tDBConnection_5 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_5 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_5";

	

 

ok_Hash.put("tDBConnection_5", true);
end_Hash.put("tDBConnection_5", System.currentTimeMillis());




/**
 * [tDBConnection_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tDBRow_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_5 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_5";

	

 



/**
 * [tDBConnection_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_5_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final snomed_import snomed_importClass = new snomed_import();

        int exitCode = snomed_importClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = snomed_import.class.getClassLoader().getResourceAsStream("local_project/snomed_import_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = snomed_import.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("snomed_clinical_ext_file_path", "id_String");
                            context.snomed_clinical_ext_file_path=(String) context.getProperty("snomed_clinical_ext_file_path");
                        context.setContextType("snomed_db_additionalparams", "id_String");
                            context.snomed_db_additionalparams=(String) context.getProperty("snomed_db_additionalparams");
                        context.setContextType("snomed_db_host", "id_String");
                            context.snomed_db_host=(String) context.getProperty("snomed_db_host");
                        context.setContextType("snomed_db_name", "id_String");
                            context.snomed_db_name=(String) context.getProperty("snomed_db_name");
                        context.setContextType("snomed_db_password", "id_Password");
                            String pwd_snomed_db_password_value = context.getProperty("snomed_db_password");
                            context.snomed_db_password = null;
                            if(pwd_snomed_db_password_value!=null) {
                                if(context_param.containsKey("snomed_db_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.snomed_db_password = pwd_snomed_db_password_value;
                                } else if (!pwd_snomed_db_password_value.isEmpty()) {
                                    try {
                                        context.snomed_db_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_snomed_db_password_value);
                                        context.put("snomed_db_password",context.snomed_db_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("snomed_db_port", "id_Integer");
                            try{
                                context.snomed_db_port=routines.system.ParserUtils.parseTo_Integer (context.getProperty("snomed_db_port"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "snomed_db_port", e.getMessage()));
                                context.snomed_db_port=null;
                            }
                        context.setContextType("snomed_db_psql_path", "id_String");
                            context.snomed_db_psql_path=(String) context.getProperty("snomed_db_psql_path");
                        context.setContextType("snomed_db_pwd_string", "id_String");
                            context.snomed_db_pwd_string=(String) context.getProperty("snomed_db_pwd_string");
                        context.setContextType("snomed_db_schema", "id_String");
                            context.snomed_db_schema=(String) context.getProperty("snomed_db_schema");
                        context.setContextType("snomed_db_script_path", "id_String");
                            context.snomed_db_script_path=(String) context.getProperty("snomed_db_script_path");
                        context.setContextType("snomed_db_user", "id_String");
                            context.snomed_db_user=(String) context.getProperty("snomed_db_user");
                        context.setContextType("snomed_drug_ext_file_path", "id_String");
                            context.snomed_drug_ext_file_path=(String) context.getProperty("snomed_drug_ext_file_path");
                        context.setContextType("snomed_int_file_path", "id_String");
                            context.snomed_int_file_path=(String) context.getProperty("snomed_int_file_path");
                        context.setContextType("snomed_int_release", "id_String");
                            context.snomed_int_release=(String) context.getProperty("snomed_int_release");
                        context.setContextType("snomed_uk_file_path", "id_String");
                            context.snomed_uk_file_path=(String) context.getProperty("snomed_uk_file_path");
                        context.setContextType("snomed_uk_release", "id_String");
                            context.snomed_uk_release=(String) context.getProperty("snomed_uk_release");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("snomed_clinical_ext_file_path")) {
                context.snomed_clinical_ext_file_path = (String) parentContextMap.get("snomed_clinical_ext_file_path");
            }if (parentContextMap.containsKey("snomed_db_additionalparams")) {
                context.snomed_db_additionalparams = (String) parentContextMap.get("snomed_db_additionalparams");
            }if (parentContextMap.containsKey("snomed_db_host")) {
                context.snomed_db_host = (String) parentContextMap.get("snomed_db_host");
            }if (parentContextMap.containsKey("snomed_db_name")) {
                context.snomed_db_name = (String) parentContextMap.get("snomed_db_name");
            }if (parentContextMap.containsKey("snomed_db_password")) {
                context.snomed_db_password = (java.lang.String) parentContextMap.get("snomed_db_password");
            }if (parentContextMap.containsKey("snomed_db_port")) {
                context.snomed_db_port = (Integer) parentContextMap.get("snomed_db_port");
            }if (parentContextMap.containsKey("snomed_db_psql_path")) {
                context.snomed_db_psql_path = (String) parentContextMap.get("snomed_db_psql_path");
            }if (parentContextMap.containsKey("snomed_db_pwd_string")) {
                context.snomed_db_pwd_string = (String) parentContextMap.get("snomed_db_pwd_string");
            }if (parentContextMap.containsKey("snomed_db_schema")) {
                context.snomed_db_schema = (String) parentContextMap.get("snomed_db_schema");
            }if (parentContextMap.containsKey("snomed_db_script_path")) {
                context.snomed_db_script_path = (String) parentContextMap.get("snomed_db_script_path");
            }if (parentContextMap.containsKey("snomed_db_user")) {
                context.snomed_db_user = (String) parentContextMap.get("snomed_db_user");
            }if (parentContextMap.containsKey("snomed_drug_ext_file_path")) {
                context.snomed_drug_ext_file_path = (String) parentContextMap.get("snomed_drug_ext_file_path");
            }if (parentContextMap.containsKey("snomed_int_file_path")) {
                context.snomed_int_file_path = (String) parentContextMap.get("snomed_int_file_path");
            }if (parentContextMap.containsKey("snomed_int_release")) {
                context.snomed_int_release = (String) parentContextMap.get("snomed_int_release");
            }if (parentContextMap.containsKey("snomed_uk_file_path")) {
                context.snomed_uk_file_path = (String) parentContextMap.get("snomed_uk_file_path");
            }if (parentContextMap.containsKey("snomed_uk_release")) {
                context.snomed_uk_release = (String) parentContextMap.get("snomed_uk_release");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("snomed_db_password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_1) {
globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

e_tDBConnection_1.printStackTrace();

}
try {
errorCode = null;tDBConnection_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_2) {
globalMap.put("tDBConnection_2_SUBPROCESS_STATE", -1);

e_tDBConnection_2.printStackTrace();

}
try {
errorCode = null;tDBConnection_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_3) {
globalMap.put("tDBConnection_3_SUBPROCESS_STATE", -1);

e_tDBConnection_3.printStackTrace();

}
try {
errorCode = null;tDBConnection_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_4) {
globalMap.put("tDBConnection_4_SUBPROCESS_STATE", -1);

e_tDBConnection_4.printStackTrace();

}
try {
errorCode = null;tDBConnection_5Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_5) {
globalMap.put("tDBConnection_5_SUBPROCESS_STATE", -1);

e_tDBConnection_5.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : snomed_import");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_4");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_5");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_3", globalMap.get("conn_tDBConnection_3"));
            connections.put("conn_tDBConnection_4", globalMap.get("conn_tDBConnection_4"));
            connections.put("conn_tDBConnection_5", globalMap.get("conn_tDBConnection_5"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     528988 characters generated by Talend Open Studio for Data Integration 
 *     on the 7 December 2020 at 6:38:19 PM IST
 ************************************************************************************************/